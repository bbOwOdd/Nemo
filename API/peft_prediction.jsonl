{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which computes the factorial of a given integer number.\n\n### Input:\nnum = 5\n\n", "label": "def factorial(num): \n    if num == 0: \n        return 1\n    else: \n        return num * factorial(num-1) \n\nx = 5\nprint(factorial(x)) \n# 120", "prediction": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the given URL and print out the protocol, domain name, and path using Python.\n\n### Input:\nhttps://www.example.com/path/to/file\n\n", "label": "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file", "prediction": "### Output:\nProtocol: https\nDomain name: www.example.com\nPath: /path/to/file"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following for loop into a recursive function in Python.\n\n### Input:\nfor i in range(5):\n    print(i)\n\n", "label": "def printRange(start, end):\n    if start == end:\n        return\n    print(start)\n    printRange(start+1, end)\n\nprintRange(0, 5)", "prediction": "### Output:\ndef recursive_function(n):\n    if n == 0:\n        return\n    print"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following Python code to a generator.\n\n### Input:\ndef fibonacci(n):\n  if n < 0:\n    return;\n  result = []\n  prev = 0\n  current = 1\n  result.append(prev)\n  result.append(current)\n  while(n - 2):\n    temp = current \n    current += prev\n    prev = temp\n    result.append(current)\n    n = n - 1\n  return result\n\n", "label": "def fibonacci(n):\n  prev, current = 0, 1\n  while(n):\n    yield prev\n    prev, current = current, prev + current \n    n = n - 1\n    \n# Driver Code\nresult = list(fibonacci(10))\n\nprint(result) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "prediction": "def fibonacci(n):\n  if n < 0:\n    return;\n  prev = 0\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out a random id number containing 6 digits.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\ndef generateId():\n  return ''.join(str(random.randint(0,9)) for i in range(6))\n\nprint(generateId())", "prediction": "### Output:\nimport random\nprint(random.randint(100000, 999999))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to check whether a given number is prime or not.\n\n### Input:\n13\n\n", "label": "def check_prime(num):\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if not num % i:\n            return False\n    return True\n\nresult = check_prime(13)\nprint(result)", "prediction": "### Output:\n13 is a prime number."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two integer arguments, x and y, and returns the result of the formula (x+y)^2.\n\n### Input:\nNot applicable\n\n", "label": "def compute_formula(x, y):\n    return (x + y)**2", "prediction": "### Output:\ndef formula(x, y):\n    return (x + y) ** 2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function that calculates the objective function of a linear equation.\n\n### Input:\nax + by = c\n\na = 3, b = 5, c = 7\n\n", "label": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)", "prediction": "def objective_function(a, b, c):\n    return a * x + b * y - c"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python program to get the largest element from a list?\n\n### Input:\nmyList = [13, 7, 5, 21, 101]\n\n", "label": "def largestElement(myList): \n    return max(myList)", "prediction": "def largest(myList):\n    return max(myList)\n\nprint(largest(myList))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind a bug in the given Python program and fix it.\n\n### Input:\ndef get_times_table(x):\n  times_table = []\n  for i in range(10):\n      times_table[i] = x * i\n  return times_table\n\n", "label": "def get_times_table(x):\n  times_table = []\n  for i in range(10):\n      times_table.append(x * i)\n  return times_table", "prediction": "print(get_times_table(5))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.\n\n### Input:\n\n\n", "label": "def Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a deep learning model in Python using Keras to perform digit classification.\n\n### Input:\nMNIST dataset\n(Contains 70,000 images of handwritten digits - 10 classes, 0-9 - with 7,000 images per class).\n\n", "label": "import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils import to_categorical\n\n# load the MNIST dataset\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# flatten 28*28 images to a 784 vector for each image\nnum_pixels = X_train.shape[1] * X_train.shape[2]\nX_train = X_train.reshape(X_train.shape[0], num_pixels).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], num_pixels).astype('float32')\n\n# normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n\n# one hot encode outputs\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\nnum_classes = y_test.shape[1]\n\n# define the keras model\ndef classification_model():\n # create model\n model = Sequential()\n model.add(Dense(num_pixels, activation='relu', input_shape=(num_pixels,)))\n model.add(Dense(100, activation='relu'))\n model.add(Dense(num_classes, activation='softmax'))\n \n # compile model\n model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n return model\n\n# build the model\nmodel = classification_model()\n\n# fit the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, verbose=2)\n\n# evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=0)\n\nprint('Accuracy: {}% \\n Error: {}'.format(scores[1], 1 - scores[1]))", "prediction": "### Output:\nThe model should be able to classify the images with an accuracy of at least 90"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string.\n\n### Input:\n['foo', 'bar', 'baz']\n\n", "label": "def list_to_tuples(words):\n    # create an empty list\n    result = []\n\n    # create a tuple for each string\n    for word in words:\n        result.append((word, len(word)))\n    \n    return result\n\nresult = list_to_tuples(['foo', 'bar', 'baz'])\nprint(result)", "prediction": "### Output:\n[('foo', 3), ('bar', 3), ('baz', "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of numbers and returns the sum of all odd numbers in the list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n", "label": "def sum_odd_numbers(nums):\n    result = 0\n    for num in nums:\n        # check for odd number\n        if num % 2 != 0:\n            result += num\n    return result\n\nresult = sum_odd_numbers([1, 2, 3, 4, 5])\nprint(result)", "prediction": "def sum_odd_numbers(numbers):\n    \"\"\"Return the sum of all odd numbers in the list.\"\"\"\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to store the properties and methods for a calculator.\n\n### Input:\n\n\n", "label": "class Calculator():\n    def __init__(self):\n        self.current_sum = 0\n\n    def add(self, value):\n        self.current_sum = self.current_sum + value \n\n    def subtract(self, value):\n        self.current_sum = self.current_sum - value\n\n    def get_total(self):\n        return self.current_sum", "prediction": "class Calculator:\n    def __init__(self, num1, num2):\n        self.num1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web scraper that will fetch the news headlines from a given website.\n\n### Input:\nNot applicable\n\n", "label": "import requests \nfrom bs4 import BeautifulSoup \n  \nURL = \"http://example.com/\"\nr = requests.get(URL) \n  \nsoup = BeautifulSoup(r.content, 'html5lib') \n  \nheadlines = soup.find_all('h2') \n  \nfor headline in headlines: \n print(headline.text)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_news(url):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify a given text using a Multinomial Naive Bayes classifier.\n\n### Input:\n\n\n", "label": "import json\nimport pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# load the training data\nwith open(\"training_data.json\") as f:\n    training_data = json.load(f)\n    \n# create a dataframe from the training data\ndf = pd.DataFrame(training_data)\n\n# create count vectorizer \nvec = CountVectorizer()\nX = vec.fit_transform(df[\"text\"])\ny = df[\"class\"]\n\n# train the model\nclf = MultinomialNB()\nclf.fit(X, y)\n\n# predict the class of the text\ntext = \"this is a sample text\"\nx = vec.transform([text]) # transform the text into counts\nclf.predict(x)", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code for an algorithm to find the shortest path between two points in a matrix\n\n### Input:\nmatrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]]\nstart = (0, 0)\nend = (2, 2)\n\n", "label": "def shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len", "prediction": "def find_shortest_path(matrix, start, end):\n    # Initialize the distance matrix\n    distance"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to generate a random integer between 1 and 10.\n\n### Input:\n\n\n", "label": "import random\n\nrand_int = random.randint(1, 10)", "prediction": "import random\nrandom_integer = random.randint(1, 10)\nprint(random_integer)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Python class for evaluating a decision tree model.\n\n### Input:\n\n\n", "label": "class DecisionTreeEvaluator():\n    \"\"\"\n    Decision Tree model evaluation implementation.\n    \"\"\"\n    def __init__(self):\n        self.model = model\n \n    def evaluate(self, X_test, y_test):\n        \"\"\"\n        Evaluates the given decision tree model on the given test data.\n \n        Parameters\n        ----------\n        X_test : array-like, shape = [n_samples, n_features]\n        Test samples.\n \n        y_test : array-like, shape = [n_samples]\n        True labels for X_test.\n \n        Returns\n        -------\n        accuracy : float\n        The accuracy of the decision tree model.\n        \"\"\"\n        y_pred = self.model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        return accuracy", "prediction": "class DecisionTreeModel:\n    def __init__(self, data, target):\n        self.data ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classifier in python to categorize the given set of records.\n\n### Input:\n[(32, \u201cmale\u201d),(49, \u201cfemale\u201d),(21, \u201cmale\u201d),(45, \u201cfemale\u201d)]\n\n", "label": "def classifier(records):\n    male_list = []\n    female_list = []\n\n    # loop through the records\n    for record in records:\n        # check if the record belongs to male\n        if record[1] == 'male':\n            male_list.append(record[0])\n        # check if the record belongs to female\n        elif record[1] == 'female':\n            female_list.append(record[0])\n    # return the categorized lists \n    return male_list, female_list", "prediction": "### Output:\n[(32, \u201cmale\u201d),(49, \u201cfemale\u201d),(21, \u201cmale"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI-powered movie recommendation system in Python.\n\n### Input:\nA list of user's ratings for 50 different movies.\n\n", "label": "# import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Define the rating matrix\ndf = pd.read_csv('ratings.csv')\nrating_matrix = df.pivot_table(values='rating',index='user_id',columns='movie_title')\n\n#Calculate cosine similarity\nsimilarity_scores = cosine_similarity(rating_matrix.values)\n\n#Define a function to recommend movies\ndef recommend_movies(user_id, input_rating_matrix, similarity_matrix):\n  #Calculate the mean of all ratings for each user\n  user_mean = np.nanmean(input_rating_matrix,axis=1)\n  #Calculate and subtract mean from user ratings\n  user_rating_minus_mean = input_rating_matrix - user_mean.reshape(-1,1)\n  \n  #Calculate weighted similarity scores\n  weighted_similarity_scores = similarity_matrix * user_rating_minus_mean\n  \n  #Calculate the weighted sum of all similarity scores for each movie\n  movie_score = weighted_similarity_scores.sum(axis=0)\n  \n  #Generate list of recommended movies, sorted by score in descending order\n  sorted_movie_scores = np.sort(movie_score)[::-1]\n  sorted_movies = np.argsort(movie_score)[::-1]\n  \n  #Recommend movies, excluding movies which the user has already rated\n  user_rated_movies = input_rating_matrix[user_id].nonzero()[0]\n  recommend_movies = []\n  for i in sorted_movies:\n    if i not in user_rated_movies:\n      recommend_movies.append(i)\n      \n  return recommend_movies\n  \n#Call the function \nrecommend_movies(user_id, rating_matrix, similarity_scores)", "prediction": "### Output:\nA list of 10 movie recommendations for the user, sorted by their predicted rating.\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to encrypt a given message using an affine cipher.\n\n### Input:\nmessage = \"Hello world\"\n\n", "label": "def encode_message(message, a, b):\n    encoded_message = \"\"\n    for char in message:\n        # encode each character\n        x = (ord(char) - 97) * a + b\n        # wrap around if x is greater than 26\n        x = x % 26\n        # convert back to character\n        encoded_message += chr(x + 97)\n    return encoded_message\n\n# Main\nif __name__ == \"__main__\":\n    message = \"Hello world\"\n    a = 3  # a and b must be relatively prime\n    b = 5\n    print(encode_message(message, a, b))  # Khoor zruog", "prediction": "def encrypt(message, a, b):\n    encrypted = \"\"\n    for char in message:\n        encrypted"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that prints out the contents of a given list with even indices only.\n\n### Input:\nmy_list = [1, 5, 10, 15, 20]\n\n", "label": "def print_even_indices(my_list):\n    for i in range(len(my_list)):\n        if i % 2 == 0:\n            print(my_list[i])\n            \nprint_even_indices(my_list)", "prediction": "def print_even_indices(my_list):\n    for i in range(0, len(my_list), "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program that takes an array of integers as an argument, and returns the second largest number.\n\n### Input:\narr = [10, 12, 2, 8, 6, 4]\n\n", "label": "def second_largest(arr):\n  max_first = max(arr[0], arr[1])\n  max_second = min(arr[0], arr[1])\n  for i in range(2, len(arr)):\n    if arr[i] > max_first:\n      max_second = max_first\n      max_first = arr[i]\n    else: \n      if arr[i] > max_second:\n        max_second = arr[i]\n  return max_second\n\nprint(second_largest(arr))", "prediction": "def second_largest(arr):\n    arr.sort()\n    return arr[-2]\n\nprint(second_largest"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create a list containing the squares of numbers up to n.\n\n### Input:\n\n\n", "label": "def squares(n):\n    return [x*x for x in range(1,n+1)]\n\nprint(squares(10))", "prediction": "def square_list(n):\n    return [i**2 for i in range(1, n+"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nInstall necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.\n\n### Input:\n\n\n", "label": "#!/usr/bin/python\n\n#Install the modules we need\n#from pyfirmata import Arduino, util, INPUT\nfrom mcpi import minecraft\nfrom mcpi import minecraftstuff\nfrom time import sleep\nimport server\nimport serial\n\n# Set up a connection to the Arduino/Shrimp if we need it\n#PORT = \"/dev/tty.SLAB_USBtoUART\"\n#ser = serial.Serial(PORT, 9600)\n\n# Connect to the server: we use the imported server.py to make it work with CloudMaker\nmc = minecraft.Minecraft.create(server.address)\n#Post a message to the minecraft chat window \nmc.postToChat(\"Ready to read Memory!\")\n\n# Use the command /getpos or F3 in Minecraft client to find out where you are then use those\n# x, y, z coordinates to build things\n# translate CloudMaker coords for mcpi ones\n# add this to x\nmcx = 177\n# - this from y\nmcy = 64\n# - this from z\nmcz = 135\n\n# Text Bubble 1\ndef MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid):\n\t# Main Bubble\n\tmc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid)\n\t# inset bottom\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid)\n\t#inset top\n\tmc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid)\n\n\n# If you want to add a bubble diagram, insert your coordinates\n# Then use /js blocktype(\"My Message\", blockid) while facing the block where you want to write\n\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0)\n#MemoryCloud1(-343, 75, -15, 44, 14, 2, 0)\n#MemoryCloud1(-343, 100, -15, 44, 14, 2, 0)\n\n# the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness,\n# blocktype, blockidoption)\n\nMemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0)\n\n\n#\n", "prediction": "import pyfirmata\nimport mcpi.minecraft as minecraft\nimport minecraftstuff\nimport time\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print a multiplication table up to 10.\n\n### Input:\n\n\n", "label": "def print_multiplication_table(n):\n for i in range(1, 11):\n print(\"{} * {} = {}\".format(n, i, n*i))", "prediction": "def print_table(n):\n    for i in range(1, 11):\n        print(n,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to remove redundant characters in a given string.\n\n### Input:\ntext = \"teeestttingggg\"\n\n", "label": "def remove_redundant(text):\n    \"\"\"Remove redundant characters from a given string\"\"\"\n    result = \"\"\n\n    # Iterate over the string\n    for c in text:\n        # Add the character to the result if it is not already present\n        if c not in result:\n            result+=c\n\n    return result\n\n# Output\nprint(remove_redundant(text))", "prediction": "def remove_redundant(text):\n    result = \"\"\n    for i in range(len(text)):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an Algorithm to sort an array of integers using the insertion sort technique in Python\n\n### Input:\n[9, 3, 4, 2, 6, 7]\n\n", "label": "def insertion_sort(arr): \n for i in range(1, len(arr)): \n key = arr[i] \n j = i-1\n while j>=0 and key < arr[j] : \n arr[j+1] = arr[j] \n j -= 1\n arr[j+1] = key \nreturn arr \n  \narr = [9, 3, 4, 2, 6, 7]\nanswer = insertion_sort(arr)\nprint(answer) # [2, 3, 4, 6, 7, 9]", "prediction": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to find the fastest path from a given source node to target node\n\n### Input:\nA source node of 3, a target node of 5, and the following weighted undirected graph\n3->4 (5)\n3->7 (3)\n4->5 (3)\n\n", "label": "graph = {\n    3: {4: 5, 7: 3},\n    4: {5: 3},\n    5: {},\n    7: {},\n}\n \ndef find_fastest_path(graph, source, target):\n    if source == target:\n        return 0\n    \n    costs = {}\n    \n    for node in graph:\n        costs[node] = float(\"inf\")\n        \n    costs[source] = 0\n    \n    paths = {}\n    paths[source] = [source]\n    \n    visited = set()\n    \n    while len(visited) != len(graph):\n        current_node, current_cost = min(\n            [(k, v) for k, v in costs.items() if k not in visited],\n            key=lambda x:x[1]\n        )\n        visited.add(current_node)\n        for neighbour, cost in graph[current_node].items():\n            if current_cost + cost < costs[neighbour]:\n                costs[neighbour] = current_cost + cost\n                paths[neighbour] = paths[current_node] + [neighbour]\n    \n    return costs[target], paths[target]", "prediction": "def find_fastest_path(source, target, graph):\n    # Initialize a dictionary to store the shortest"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python functions for updating and deleting records in a local SQLite database.\n\n### Input:\nNot applicable\n\n", "label": "import sqlite3\n\ndef update_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' UPDATE records\n    SET name = ?,\n    data = ?\n    WHERE id = ?'''\n cur.execute(sql, record)\n conn.commit()\n \ndef delete_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' DELETE FROM records\n    WHERE id = ?'''\n cur.execute(sql, (record[0],))\n conn.commit()", "prediction": "### Output:\ndef update_record(self, record_id, new_data):\n    \"\"\"Update a record in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to join two given lists with a specific separator.\n\n### Input:\nlist_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\n", "label": "list_1 = [\"Hello\", \"World\"]\nlist_2 = [\"Python\", \"Programming\"]\nseparator = \",\"\n\nresult = separator.join(list_1 + list_2)\nprint(result)", "prediction": "### Output:\n['Hello, World', 'Python, Programming']"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class called \"sid\" with a state parameter for Prefix-SID. The class should be a container and should be auto-generated by the PythonClass plugin for PYANG from YANG module openconfig-network-instance. The class should be based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of the container should be represented as a class variable with a specific YANG type. The Prefix Segment-ID list should be an IGP-Prefix Segment attached to an IGP prefix. An IGP-Prefix Segment should be global (unless explicitly advertised otherwise) within the SR/IGP domain.\n\n### Input:\n\n\n", "label": "# -*- coding: utf-8 -*-\nfrom operator import attrgetter\nfrom pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType\nfrom pyangbind.lib.yangtypes import RestrictedClassType\nfrom pyangbind.lib.yangtypes import TypedListType\nfrom pyangbind.lib.yangtypes import YANGBool\nfrom pyangbind.lib.yangtypes import YANGListType\nfrom pyangbind.lib.yangtypes import YANGDynClass\nfrom pyangbind.lib.yangtypes import ReferenceType\nfrom pyangbind.lib.base import PybindBase\nfrom collections import OrderedDict\nfrom decimal import Decimal\nfrom bitarray import bitarray\nimport six\n\n# PY3 support of some PY2 keywords (needs improved)\nif six.PY3:\n    import builtins as __builtin__\n\n    long = int\nelif six.PY2:\n    import __builtin__\n\nfrom . import state\n\n\nclass sid(PybindBase):\n    \"\"\"\n  This class was auto-generated by the PythonClass plugin for PYANG\n  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of\n  the container is represented as a class variable - with a specific\n  YANG type.\n\n  YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached\nto an IGP prefix. An IGP-Prefix Segment is global (unless explicitly\nadvertised otherwise) within the SR/IGP domain.\n  \"\"\"\n    __slots__ = (\"_path_helper\", \"_extmethods\", \"__state\")\n\n    _yang_name = \"sid\"\n\n    _pybind_generated_by = \"container\"\n\n    def __init__(self, *args, **kwargs):\n\n        self._path_helper = False\n\n        self._extmethods = False\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n        load = kwargs.pop(\"load\", None)\n        if args:\n            if len(args) > 1:\n                raise TypeError(\"cannot create a YANG container with >1 argument\")\n            all_attr = True\n            for e in self._pyangbind_elements:\n                if not hasattr(args[0], e):\n                    all_attr = False\n                    break\n            if not all_attr:\n                raise ValueError(\"Supplied object did not have the correct attributes\")\n            for e in self._pyangbind_elements:\n                nobj = getattr(args[0], e)\n                if nobj._changed() is False:\n                    continue\n                setmethod = getattr(self, \"_set_%s\" % e)\n                if load is None:\n                    setmethod(getattr(args[0], e))\n                else:\n                    setmethod(getattr(args[0], e), load=load)\n\n    def _path(self):\n        if hasattr(self, \"_parent\"):\n            return self._parent._path() + [self._yang_name]\n        else:\n            return [\n                \"network-instances\",\n                \"network-instance\",\n                \"protocols\",\n                \"protocol\",\n                \"isis\",\n                \"levels\",\n                \"level\",\n                \"link-state-database\",\n                \"lsp\",\n                \"tlvs\",\n                \"tlv\",\n                \"extended-ipv4-reachability\",\n                \"prefixes\",\n                \"prefix\",\n                \"subTLVs\",\n                \"subTLVs\",\n                \"prefix-sid\",\n                \"sid\",\n            ]\n\n    def _get_state(self):\n        \"\"\"\n    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        return self.__state\n\n    def _set_state(self, v, load=False):\n        \"\"\"\n    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n    If this variable is read-only (config: false) in the\n    source YANG file, then _set_state is considered as a private\n    method. Backends looking to populate this variable should\n    do so via calling thisObj._set_state() directly.\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        if hasattr(v, \"_utype\"):\n            v = v._utype(v)\n        try:\n            t = YANGDynClass(\n                v,\n                base=state.state,\n                is_container=\"container\",\n                yang_name=\"state\",\n                parent=self,\n                path_helper=self._path_helper,\n                extmethods=self._extmethods,\n                register_paths=True,\n                extensions=None,\n                namespace=\"http://openconfig.net/yang/network-instance\",\n                defining_module=\"openconfig-network-instance\",\n                yang_type=\"container\",\n                is_config=False,\n            )\n        except (TypeError, ValueError):\n            raise ValueError(\n                {\n                    \"error-string\": \"\"\"state must be of a type compatible with container\"\"\",\n                    \"defined-type\": \"container\",\n                    \"generated-type\": \"\"\"YANGDynClass(base=state.state, is_container='container', yang_name=\"state\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\"\"\",\n                }\n            )\n\n        self.__state = t\n        if hasattr(self, \"_set\"):\n            self._set()\n\n    def _unset_state(self):\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n    state = __builtin__.property(_get_state)\n\n    _pyangbind_elements = OrderedDict([(\"state\", state)])\n\n\nfrom . import state\n\n\nclass sid(PybindBase):\n    \"\"\"\n  This class was auto-generated by the PythonClass plugin for PYANG\n  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of\n  the container is represented as a class variable - with a specific\n  YANG type.\n\n  YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached\nto an IGP prefix. An IGP-Prefix Segment is global (unless explicitly\nadvertised otherwise) within the SR/IGP domain.\n  \"\"\"\n    __slots__ = (\"_path_helper\", \"_extmethods\", \"__state\")\n\n    _yang_name = \"sid\"\n\n    _pybind_generated_by = \"container\"\n\n    def __init__(self, *args, **kwargs):\n\n        self._path_helper = False\n\n        self._extmethods = False\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n        load = kwargs.pop(\"load\", None)\n        if args:\n            if len(args) > 1:\n                raise TypeError(\"cannot create a YANG container with >1 argument\")\n            all_attr = True\n            for e in self._pyangbind_elements:\n                if not hasattr(args[0], e):\n                    all_attr = False\n                    break\n            if not all_attr:\n                raise ValueError(\"Supplied object did not have the correct attributes\")\n            for e in self._pyangbind_elements:\n                nobj = getattr(args[0], e)\n                if nobj._changed() is False:\n                    continue\n                setmethod = getattr(self, \"_set_%s\" % e)\n                if load is None:\n                    setmethod(getattr(args[0], e))\n                else:\n                    setmethod(getattr(args[0], e), load=load)\n\n    def _path(self):\n        if hasattr(self, \"_parent\"):\n            return self._parent._path() + [self._yang_name]\n        else:\n            return [\n                \"network-instances\",\n                \"network-instance\",\n                \"protocols\",\n                \"protocol\",\n                \"isis\",\n                \"levels\",\n                \"level\",\n                \"link-state-database\",\n                \"lsp\",\n                \"tlvs\",\n                \"tlv\",\n                \"extended-ipv4-reachability\",\n                \"prefixes\",\n                \"prefix\",\n                \"subTLVs\",\n                \"subTLVs\",\n                \"prefix-sid\",\n                \"sid\",\n            ]\n\n    def _get_state(self):\n        \"\"\"\n    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        return self.__state\n\n    def _set_state(self, v, load=False):\n        \"\"\"\n    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container)\n    If this variable is read-only (config: false) in the\n    source YANG file, then _set_state is considered as a private\n    method. Backends looking to populate this variable should\n    do so via calling thisObj._set_state() directly.\n\n    YANG Description: State parameters for Prefix-SID.\n    \"\"\"\n        if hasattr(v, \"_utype\"):\n            v = v._utype(v)\n        try:\n            t = YANGDynClass(\n                v,\n                base=state.state,\n                is_container=\"container\",\n                yang_name=\"state\",\n                parent=self,\n                path_helper=self._path_helper,\n                extmethods=self._extmethods,\n                register_paths=True,\n                extensions=None,\n                namespace=\"http://openconfig.net/yang/network-instance\",\n                defining_module=\"openconfig-network-instance\",\n                yang_type=\"container\",\n                is_config=False,\n            )\n        except (TypeError, ValueError):\n            raise ValueError(\n                {\n                    \"error-string\": \"\"\"state must be of a type compatible with container\"\"\",\n                    \"defined-type\": \"container\",\n                    \"generated-type\": \"\"\"YANGDynClass(base=state.state, is_container='container', yang_name=\"state\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\"\"\",\n                }\n            )\n\n        self.__state = t\n        if hasattr(self, \"_set\"):\n            self._set()\n\n    def _unset_state(self):\n        self.__state = YANGDynClass(\n            base=state.state,\n            is_container=\"container\",\n            yang_name=\"state\",\n            parent=self,\n            path_helper=self._path_helper,\n            extmethods=self._extmethods,\n            register_paths=True,\n            extensions=None,\n            namespace=\"http://openconfig.net/yang/network-instance\",\n            defining_module=\"openconfig-network-instance\",\n            yang_type=\"container\",\n            is_config=False,\n        )\n\n    state = __builtin__.property(_get_state)\n\n    _pyangbind_elements = OrderedDict([(\"state\", state)])\n", "prediction": "class sid:\n    def __init__(self, prefix_sid):\n        self.prefix_sid = prefix_sid"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to perform an action based on a given condition.\n\n### Input:\nCondition: If the user input is an integer, print \"You have entered an integer\"\n\n", "label": "user_input = input(\"Enter a number:\")\nif user_input.isdigit():\n   print(\"You have entered an integer.\")", "prediction": "def check_input(user_input):\n    if isinstance(user_input, int):\n        print(\"You have entered"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the minimum value in a list.\n\n### Input:\n[30, 10, 40, 20]\n\n", "label": "def findMinValue(list):\n    minValue = list[0]\n    for i in range(1, len(list)):\n        if list[i] < minValue:\n            minValue = list[i]\n    return minValue\n\nlist1 = [30, 10, 40, 20]\nminValue = findMinValue(list1)\nprint(minValue)", "prediction": "def min_value(list):\n    min = list[0]\n    for i in range(1,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the programming language in the given code snippet.\n\n### Input:\ndef f(x):\n return x + 2\n\n", "label": "Python", "prediction": "### Output:\nPython"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two lists as arguments, and calculates their dot product.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n", "label": "def dot_product(list1, list2):\n  if len(list1) != len(list2):\n    raise ValueError('List lengths must be the same.')\n  dot_product = 0\n  for i, val in enumerate(list1):\n    dot_product += val * list2[i]\n  return dot_product\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\ndot_product_result = dot_product(list1, list2)\nprint(dot_product_result) # 32", "prediction": "def dot_product(list1, list2):\n    return sum([a*b for a,b in zip"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to define a circle object.\n\n### Input:\n\n\n", "label": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def get_area(self):\n        return 3.14 * (self.radius ** 2)", "prediction": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out all the odd numbers between 1 and 30.\n\n### Input:\n\n\n", "label": "for i in range(1, 31):\n if(i%2 != 0):\n  print(i)", "prediction": "def odd_numbers():\n    for i in range(1, 31):\n        if i % "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an algorithm in python to calculate the power of an integer.\n\n### Input:\n\n\n", "label": "def power_of_integer(x, n):\n    if n == 0:\n        return 1\n    \n    if n % 2 == 0:\n        return power_of_integer(x*x, n//2)\n    else:\n        return x * power_of_integer(x*x, (n-1)//2)", "prediction": "def power(base, exponent):\n    if exponent == 0:\n        return 1\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to remove all elements within a list with value 0.\n\n### Input:\nmy_list = [0, 2, 3, 0, 4]\n\n", "label": "my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)", "prediction": "def remove_zero(my_list):\n    return [x for x in my_list if x != 0"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of the Fibonacci sequence.\n\n### Input:\n\n\n", "label": "def fibonacci_sum(n): \n    if n <= 1: \n        return n \n    previous = 0\n    current  = 1\n    sum      = 1\n    \n    for _ in range(n - 1): \n        previous, current = current, previous + current \n        sum += current \n      \n    return sum", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web scraper using Python that gathers all the phone numbers from a set of webpages?\n\n### Input:\nURLs to scrape\n\n", "label": "import requests\nimport re\n\ndef scrape_phone_numbers(urls):\n    phone_numbers = []\n    for url in urls:\n        response = requests.get(url)\n        numbers = re.findall(\"([+]\\d{2}\\s?0?\\d{10})\", response.text)\n        phone_numbers.extend(numbers)\n    return phone_numbers", "prediction": "def get_phone_numbers(urls):\n    phone_numbers = []\n    for url in urls:\n        page ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python using OOP techniques that takes a list of integers as input and outputs the maximum value from the list.\n\n### Input:\n[1, 4, 8, 6, -2, 5]\n\n", "label": "class MaxValueAlgorithm:\n \n def __init__(self, lst):\n self.lst = lst\n \n def get_max_value(self):\n max_value = self.lst[0]\n for num in self.lst:\n if(num > max_value):\n max_value = num\n \n return max_value\n\n# Testing the algorithm\nlst = [1, 4, 8, 6, -2, 5]\nalgo = MaxValueAlgorithm(lst)\nm = algo.get_max_value()\n\nprint(\"Max value in the list is:\", m)", "prediction": "### Output:\n8"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to count the number of upper case and lower case letters in a given string\n\n### Input:\nHello World\n\n", "label": "def countLetters(s): \n   uppercase, lowercase = 0, 0\n   for x in s: \n      if x.islower(): \n         lowercase+= 1\n      elif x.isupper(): \n         uppercase+= 1\n   print (\"No. of Upper case characters : \", uppercase) \n   print (\"No. of Lower case Characters : \", lowercase) \n\ncountLetters('Hello World')", "prediction": "def count_letters(string):\n    upper = 0\n    lower = 0\n    for char"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program to sum the values of two variables.\n\n### Input:\n<input>\n\n", "label": "x = 5\ny = 4\n\ntotal = x + y\n\nprint(total) # Output: 9", "prediction": "### Output:\ndef sum(a, b):\n    return a + b\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given number of seconds into days, hours, minutes and seconds.\n\n### Input:\n\n\n", "label": "# Function to convert given number of seconds into days, hours, minutes and seconds\ndef convert_seconds(seconds):\n    # Get the number of days\n    days = seconds // 86400\n    # Get the remaining seconds\n    secs = seconds % 86400\n    # Get the number of hours\n    hours = secs // 3600\n    # Get the remaining seconds\n    secs = secs % 3600\n    # Get the number of minutes\n    minutes = secs // 60\n    # Get the remaining seconds\n    secs = secs % 60\n    \n    return days, hours, minutes, secs\n\n# Main Program \nseconds = int(input(\"Enter a number of seconds: \"))\n\ndays, hours, minutes, secs = convert_seconds(seconds)\n\nprint(\"Days:\", days)\nprint(\"Hours:\", hours)\nprint(\"Minutes:\", minutes)\nprint(\"Seconds:\", secs)", "prediction": "def convert_seconds(seconds):\n    days = seconds // 86400\n    seconds %= 86400"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c.\n\n### Input:\na = 2, b = 2, and c = 4\n\n", "label": "def countPairs(a, b, c):\n    count = 0\n    for x in range(0, c + 1):\n        for y in range(0, c + 1):\n            if a * x + b * y == c:\n                count += 1\n    return count\n\na = 2\nb = 2\nc = 4\nprint(countPairs(a, b, c))", "prediction": "def distinct_pairs(a, b, c):\n    count = 0\n    for x in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for a specific value in a large array of integers and return the index of the value if found.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\n\n", "label": "def search(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1\n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = 8\nindex = search(arr, target)\nif index != -1:\n print(\"Found at index: \" + str(index))\nelse:\n print(\"Not Found\")", "prediction": "### Output:\nThe index of the target value is 7."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads a matrix of size nxn and prints out the transpose of the matrix.\n\n### Input:\nn = 5\n\n", "label": "def transpose(m): \n  \n    result = [[0 for x in range(len(m))] for y in range(len(m[0]))] \n  \n    # iterate through rows of m \n    for i in range(len(m)): \n        # iterate through columns of m \n        for j in range(len(m[0])): \n            result[j][i] = m[i][j] \n  \n    return result \n  \n# input matrix \nmatrix = [ \n            [1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9] \n          ] \n  \n# display output \nprint(transpose(matrix))", "prediction": "matrix = [[1, 2, 3, 4, 5],\n          [6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to classify digits from the MNIST dataset.\n\n### Input:\nNot applicable\n\n", "label": "import tensorflow as tf\n\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train = x_train.reshape(60000, 784)\nx_test = x_test.reshape(10000, 784)\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Dense(256, activation='relu', input_shape=(784,)),\n tf.keras.layers.Dropout(0.2),\n tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(\n optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy']\n)\n\nmodel.fit(x_train, y_train, epochs=5)\nmodel.evaluate(x_test, y_test)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a list of tuples (words and their frequency) in descending order.\n\n### Input:\n[(\"hello\", 10), (\"world\", 15), (\"foo\", 8)]\n\n", "label": "def sortTuples(tuples):\n    tuples.sort(key=lambda x: x[1],reverse=True)\n    return tuples", "prediction": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1],"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to format a date.\n\n### Input:\n\n\n", "label": "import datetime \nnow = datetime.datetime.now().strftime(\"%d/%m/%Y\") \nprint(now)", "prediction": "def format_date(date):\n    return date.strftime(\"%d/%m/%Y\")\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a basic calculator that performs addition and subtraction.\n\n### Input:\nNot applicable\n\n", "label": "class Calculator:\n    def __init__(self):\n        pass\n    \n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \ncalc = Calculator()\nprint(calc.add(10, 5)) # 15\nprint(calc.subtract(10, 5)) # 5", "prediction": "### Output:\nclass Calculator:\n    def __init__(self, num1, num2):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to search an element in a list using linear search.\n\n### Input:\n[25, 10, 5, 2, 50], 50\n\n", "label": "def linear_search(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return -1\n\nindex = linear_search([25, 10, 5, 2, 50], 50)\nif index < 0:\n    print(f\"{element} not found in the list\")\nelse:\n    print(f\"{element} found at index {index}\")", "prediction": "def linear_search(list, element):\n    for i in range(len(list)):\n        if list[i]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function that takes in two positive integer numbers and generate a random number between them.\n\n### Input:\nmin_range = 3\nmax_range = 7\n\n", "label": "import random\n\ndef generate_random_number(min_range, max_range):\n    return random.randint(min_range, max_range)\n\nmin_range = 3\nmax_range = 7\nrandom_number = generate_random_number(min_range, max_range)\nprint(random_number)", "prediction": "def random_number(min_range, max_range):\n    return random.randint(min_range, max_range)\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to optimize a portfolio.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nfrom scipy.optimize import minimize \n\n# Define the objective function\ndef objective(x):\n  return -np.sum(np.log(x))\n\n# Define the constraints\ndef constraints(x):\n  return np.sum(x) - 1\n\n# Set the initial values of the variables\nx0 = np.ones(5)/5\n\n# Minimize the portfolio\nx = minimize(objective, x0, method=\"SLSQP\", constraints=[constraints]) \n\n# Print the optimized portfolio\nprint(\"Optimized weights: \", x.x)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import minimize\n\ndef"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract data from a given website.\n\n### Input:\nhttps://www.example.com/\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nresponse = requests.get(url) #get the response\nhtml_data = response.text # get the data in text\n\nsoup = BeautifulSoup(html_data, 'html.parser') #parse the data\n\nfor item in soup.find_all('div', {'class': 'post-content'}): #find all elements with the class 'post-content' and loop through them\n    content = item.get_text() #get the text content\n    print(content) #print the content", "prediction": "def web_scraper(url):\n    import requests\n    from bs4 import BeautifulSoup\n\n    page ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.\n\n### Input:\n[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}]\n\n", "label": "def calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]", "prediction": "def calculate_result(inputs):\n    result = 0\n    for i in inputs:\n        result +="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the roots of a given quadratic equation.\n\n### Input:\na = 2, b = 5, c = -3\n\n", "label": "def quadratic_roots(a, b, c):\n    # Calculate the discriminant \n    discriminant = (b**2) - (4*a*c)\n\n    # Compute the root\n    root1 = (-b + discriminant**0.5)/(2*a) \n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Print the roots\n    print(\"The roots are {0} and {1}\".format(root1, root2))\n\nquadratic_roots(2, 5, -3)", "prediction": "def quadratic(a, b, c):\n    d = (b**2) - (4*a"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm for spelling correction in Python.\n\n### Input:\nNot applicable\n\n", "label": "import re\n\ndef spell_correction(word):\n  # Remove punctuation\n  word = re.sub(r'[^\\w\\s]', '', word)\n  # Separate words using whitespace\n  word_list = word.split()\n  # Create a set to store the dictionary words\n  dict_words = set()\n  # Open the words.txt dictionary\n  with open('words.txt', 'r') as file:\n    # Read each line and add to the dictionary\n    for line in file:\n      dict_words.add(line.rstrip('\\n'))\n  # Create a correction list\n  corrections = []\n  # Iterate over the word list\n  for word in word_list:\n    # If word is in the dictionary, add to correction list\n    if word in dict_words:\n      corrections.append(word)\n    # Otherwise, search for a correction\n    else:\n      # Connect character to the ones before and after \n      for pos in range(1,len(word)):\n        # Store prefix and suffix\n        prefix = word[:pos]\n        suffix = word[pos+1:]\n        # Store possible correction\n        correction = prefix + word[pos] + suffix\n        # Check if the correction is in the dictionary\n        if correction in dict_words:\n          corrections.append(correction)\n          break\n  # Return the corrected words\n  return ' '.join(corrections)", "prediction": "### Output:\ndef spell_correct(word):\n    \"\"\"Spell correct a word.\"\"\"\n    # Check if the"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to remove the characters within the parentheses.\n\n### Input:\nString: 'It was a (big) surprise!'\n\n", "label": "def remove_parentheses(string):\n    string_list = list(string)\n    \n    is_in_parentheses = False\n\n    for i in range (len(string_list)):\n        if string_list[i] == '(':\n            is_in_parentheses = True\n        elif string_list[i] == ')':\n            is_in_parentheses = False\n        elif is_in_parentheses:\n            string_list[i] = ''\n\n    return ''.join(string_list)", "prediction": "def remove_parentheses(string):\n    return string.replace('(', '').replace(')', '')"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of words given by the user and prints out a sentence constructed from these words.\n\n### Input:\nwords = ['The', 'quick', 'brown', 'fox']\n\n", "label": "words = ['The', 'quick', 'brown', 'fox']\n\nsentence = \" \".join(words)\nprint(sentence)\n# Output: The quick brown fox", "prediction": "def sentence(words):\n    sentence = ' '.join(words)\n    return sentence\n\nprint(sentence(words))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print out only the even numbers from a list of numbers.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n", "label": "for num in list: \n    if (num % 2 == 0):\n        print(num, end = ' ')", "prediction": "for num in list:\n    if num % 2 == 0:\n        print(num)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGPT-model, create a Python program for shuffeling the elements of an array.\n\n### Input:\n\n\n", "label": "import random\n\ndef shuffle(arr):\n  for i in range(len(arr)):\n    j = random.randint(0, len(arr)-1)\n    arr[i], arr[j] = arr[j], arr[i]\n \n  return arr", "prediction": "```python\nimport random\ndef shuffle_array(arr):\n    n = len(arr)\n    for i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that scrapes product prices from an Amazon page. The script should parse through the HTML of the page and extract the price of the product and the currency it is denominated in.\n\n### Input:\nhttps://www.amazon.com/gp/product/B076H6PW2F\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl= 'https://www.amazon.com/gp/product/B076H6PW2F'\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\npage = requests.get(url, headers=headers)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nprice = soup.find(id=\"priceblock_ourprice\").get_text()\n\nsplit_price = price.split()\n\ncurrency = split_price[0]\namount = split_price[1]\n\nprint(f\"Price: {currency} {amount}\")", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.amazon.com"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if two strings are isomorphic.\n\n### Input:\ns1 = \"foo\", s2 = \"app\"\n\n", "label": "def is_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    s1_dict = dict()\n    for i, char in enumerate(s1):\n        if char in s1_dict:\n            if s1_dict[char] != s2[i]:\n                return False\n        else:\n            s1_dict[char] = s2[i]\n\n    return True", "prediction": "def is_isomorphic(s1, s2):\n    if len(s1) != len(s2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following code from JavaScript to Python\n\n### Input:\nfunction add(a, b){\n    return a + b;\n}\n\n", "label": "# Translate the following function from JavaScript to Python\ndef add(a, b):\n    return a + b", "prediction": "def add(a, b):\n    return a + b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to calculate the square of any given number.\n\n### Input:\nnum = 5\n\n", "label": "\"\"\"\nCalculate the square of a given number\n\"\"\"\n\ndef square_num(num):\n    return num * num\n\nif __name__==\"__main__\":\n    num = 5\n    square = square_num(num)\n    print(\"Square of \"+str(num)+\" is \"+str(square))", "prediction": "def square(num):\n    return num * num\n\nprint(square(num))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to replace a given text segment with another one.\n\n### Input:\n\"Roses are red, violets are blue.\"\nreplace_word=\"blue\"\nreplace_with=\"red\"\n\n", "label": "def replace_word(txt, replace_word, replace_with): \n    words = txt.split(\" \") \n    for i in range(0, len(words)): \n        if (words[i] == replace_word): \n            words[i] = replace_with\n    return \" \".join(words)\n\ns = \"Roses are red, violets are blue.\"\nprint(replace_word(s, \"blue\", \"red\")) # Roses are red, violets are red.", "prediction": "def replace_word(text, replace_word, replace_with):\n    return text.replace(replace_word, replace"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to get the nth Fibonacci number\n\n### Input:\n\n\n", "label": "def get_fibonacci_number(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that replaces all words containing 3 or more consecutive vowels with \"*\".\n\n### Input:\n\"entertainment\"\n\n", "label": "import re\n\ndef replaceConsecutiveVowels(word): \n    regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) \n    return regex.sub(\"*\", word)\n\nword = \"entertainment\"\n\nprint(replaceConsecutiveVowels(word)) # Output: *", "prediction": "### Output:\n\"ent*rt*in*\"\n\n### Explanation:\nThe word \"entertainment\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to check if a linked list is palindrome or not.\n\n### Input:\nnodelist: 3, 5, 6, 6, 5, 3\n\n", "label": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node \n  \n    def reverseList(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n  \n    def compareLists(self, head1, head2): \n        while(head1 and head2): \n            if head1.data != head2.data: \n                return 0\n            head1 = head1.next\n            head2 = head2.next\n        if (head1 and not head2) or (head2 and not head1): \n            return 0\n        return 1\n  \n    def checkPalindrome(self): \n        slow_ptr = self.head \n        fast_ptr = self.head \n        count = 0\n        while(fast_ptr is not None and fast_ptr.next is not None): \n            fast_ptr = fast_ptr.next.next\n            slow_ptr = slow_ptr.next\n            count+=1\n        second_half = self.reverseList() \n        isPalindrome = self.compareLists(self.head, second_half) \n        \n        self.reverseList() \n        if isPalindrome: \n            return True\n        else: \n            return False\n  \nllist = LinkedList() \nllist.push(3)\nllist.push(5)\nllist.push(6)\nllist.push(6)\nllist.push(5)\nllist.push(3)\nllist.checkPalindrome()  # Output: True", "prediction": "### Output:\nTrue"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to generate a random 10 questions mathematics test.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\n# list of operations used for generating questions\nOPERATIONS = ['+', '-', '*', '/']\n\n# function to generate a random number between 1 and 10\ndef generate_number():\n return random.randint(1, 10)\n\n# function to generate a random two-operand mathematics question\ndef generate_question():\n num1 = generate_number()\n num2 = generate_number()\n op = random.choice(OPERATIONS)\n \n quest = f'{num1} {op} {num2} = '\n \n return quest\n\n# function to generate 10 random mathematics questions\ndef generate_test():\n questions = []\n \n for _ in range(10):\n questions.append(generate_question())\n \n return questions\n\n# generating a 10 questions mathematics test\ntest = generate_test()\n\nfor question in test:\n print(question)", "prediction": "### Output:\nimport random\nimport math\nimport time\nimport os\nimport sys\nimport random"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the Fibonacci series up to given number\n\n### Input:\n\n\n", "label": "def fibonacci(num): \n  x, y = 0, 1\n  while x < num:\n    print(x)\n    x, y = y, x + y\n\nfibonacci(20)", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the most common letter in the given string.\n\n### Input:\nstr = \"hello world\"\n\n", "label": "str = \"hello world\"\n\nfrom collections import Counter\n\ndef most_common_letter(str):\n    letters_count = Counter(str).most_common()\n    return letters_count[0][0]\n\nprint(most_common_letter(str))", "prediction": "def most_common_letter(str):\n    return max(set(str), key=str.count)\n\nprint(most_common"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that checks if a number is prime or not.\n\n### Input:\n\n\n", "label": "def is_prime(n):\n    '''\n    Function to check if the given number is a prime\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True", "prediction": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a deep learning algorithm in Python to classify emails as spam or not spam.\n\n### Input:\n\n\n", "label": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\ndef create_spam_classifier():\n model = Sequential()\n model.add(Dense(128, activation='relu', input_shape=(20,)))\n model.add(Dropout(0.5))\n model.add(Dense(1, activation='sigmoid'))\n \n model.compile(\n optimizer='adam',\n loss='binary_crossentropy',\n metrics=['accuracy']\n )\n\n return model\n\nif __name__ == \"__main__\":\n model = create_spam_classifier()", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a new list with only odd numbers.\n\n### Input:\n[1,2,3,4,5,6,7,8,9]\n\n", "label": "def get_odd_numbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums\n\nnums = [1,2,3,4,5,6,7,8,9]\nprint(get_odd_numbers(nums))", "prediction": "def odd_numbers(list):\n    odd = []\n    for i in list:\n        if i % "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided.\n\n### Input:\nHello\n\n", "label": "user_input = input(\"User: \")\n\nif user_input == \"Hello\":\n print(\"Chatbot: Hi there!\")\nelse:\n print(\"Chatbot: I'm not sure what you mean, please try again.\")", "prediction": "### Output:\nHello, how are you today?"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that stores information about books (title, author and year). It should allow you to add, delete and search for books.\n\n### Input:\nNot applicable\n\n", "label": "class Book:\n def __init__(self, title, author, year):\n self.title = title\n self.author = author\n self.year = year\n\n def __str__(self):\n return f'{self.title} by {self.author} ({self.year})'\n\nclass BookDB:\n def __init__(self):\n self.books = []\n\n def add_book(self, book):\n self.books.append(book)\n\n def delete_book(self, title):\n self.books = [book for book in self.books if book.title != title]\n\n def search_book(self, title):\n for book in self.books:\n if book.title == title:\n return book\n\n return None", "prediction": "### Output:\ndef add_book(title, author, year):\n    book = {'title': title,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called \"CreatePlayer\" with various methods such as \"find_gold,\" \"find_potions,\" \"find_weapon,\" \"buy_potions,\" \"use_potion,\" \"list_inventory,\" \"low_health,\" \"set_health,\" \"take_damage,\" \"deal_damage,\" \"gain_xp,\" \"buy_weapon,\" and \"set_current_weapon.\" The class should have various attributes such as \"health,\" \"xp,\" \"potions,\" \"gold,\" \"weapons,\" \"name,\" \"steps,\" \"damage_dealt,\" \"current_weapon,\" \"dragon_attack,\" \"basilisk_attack,\" \"has_sword,\" \"has_pistol,\" \"has_rifle,\" \"run_away,\" \"has_key,\" and \"turns.\" The methods should perform various actions such as adding gold, potions, and weapons to the player's inventory, allowing the player to purchase potions and weapons, allowing the player to use potions and weapons, allowing the player to view their inventory and change their current weapon, and allowing the player to take damage and gain XP.\n\n### Input:\n\n\n", "label": "#!/usr/bin/python2\n#\n#~~Player Functions~~\n\nfrom superRandom import superRandint, superChoice\nfrom time import sleep\nimport actions\nimport monsters\n\nclass CreatePlayer(object):\n  \n    def __init__(self, name):\n        self.health = 125\n        self.xp = 0 #TODO: use gained XP to gain levels\n        self.potions = 0\n        self.gold = 0\n        self.weapons = [\"dagger\"]\n        self.name = name\n        self.steps = 0\n        self.damage_dealt = 12 #not needed\n        self.current_weapon = \"dagger\"\n        self.dragon_attack = False\n        self.basilisk_attack = False\n        self.has_sword = False\n        self.has_pistol = False\n        self.has_rifle = False\n        self.run_away = 0\n        self.has_key = False\n\tself.turns = 0\n        \n    def __repr__(self):\n        return (\"\\nName: %s\\nHealth: %d\\nXP: %d\\nPotions: \"\n                \"%d\\nGold: %d\\nWeapons: %s\\nSteps: %d\\nCurr\"\n                \"ent Weapon: %s\\nDragon Attack: %s\\nBasili\"\n                \"skAttack: %s\\nHas Sword: %s\\nHas Pistol: \"\n                \"%s\\nHas Rifle: %s\\nTimes Run Away: %d\\nHa\"\n                \"s Key: %s\\nTurns: %s\" % (self.name,self.health,self.xp,\n                    self.potions,self.gold,self.weapons,\n                    self.steps,self.current_weapon,\n                    self.dragon_attack,self.basilisk_attack,\n                    self.has_sword,self.has_pistol,self.has_rifle,\n                    self.run_away,self.has_key,self.turns)\n                )\n\n    def find_gold(self):\n        amount = superRandint(1,25)\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_gold_debug(self,amount):\n        self.gold += amount\n        print \"\\nYou found %d gold coins, which brings you to a total of %d coins!\" % (amount, self.gold)\n        sleep(2)\n        return self\n    \n    def find_potions(self):\n        self.potions += 1\n        print \"\\nYou found a health potion! You now have %d potions in your inventory.\" % self.potions\n        sleep(2)\n        return self\n    \n    def find_weapon(self):\n        #TODO: add more weapons\n        weapons = [\"sword\",\"pistol\",\"rifle\"]\n        found = superChoice(weapons)\n        print \"\\nYou found a %s!\" % found\n        if found == \"sword\":\n            self.has_sword = True\n        elif found == \"pistol\":\n            self.has_pistol = True\n        else:\n            self.has_rifle = True\n        return self     \n    \n    def buy_potions(self):\n        print \"\\nGold: %d\" % self.gold\n        print \"Each potion costs 20 gold pieces and restores 25 HP.\"\n        amount = raw_input(\"\\nHow many would you like to purchase? \")\n        cost = int(amount) * 20\n        if self.gold >= int(cost):\n            self.gold = self.gold - int(cost)\n            self.potions += int(amount)\n            print \"\\n%d potions have been added to your inventory.\" % int(amount)\n            sleep(2)\n            return self\n        else:\n            print \"\\nSorry you don't have enough gold for %d potions!\" % int(amount)\n            sleep(2)\n            actions.visit_shop(self)\n    \n    def use_potion(self):\n        if self.potions > 0 and self.potions < 2:\n            self.potions -= 1\n            self.health += 25\n            print \"\\nYour health is now at %d\" % self.health\n        elif self.potions > 1:\n            print \"\\nYou currently have %d potions\" % self.potions\n            amount = int(raw_input(\"\\nHow many? \"))\n            raise_health = amount * 25\n            self.health += raise_health\n            self.potions -= amount\n            print \"\\nYour health is now at %d\" % self.health\n        else:\n            print \"\\nSorry you don't have any more potions!\"\n        sleep(2)\n        return self\n        \n    def list_inventory(self):\n        actions.clearscreen()\n        print (\"\\nName: %s\\n\"\n                \"Exp. Points: %d\\n\"\n                \"Potions Held: %d\\n\"\n                \"Gold: %d pieces\\n\"\n                \"Current Weapon: %s\" %(self.name, self.xp,\n                    self.potions, self.gold, self.current_weapon)\n                )\n        \n        if self.has_pistol is True and \"pistol\" not in self.weapons:\n            self.weapons.append(\"pistol\")\n        elif self.has_rifle is True and \"rifle\" not in self.weapons:\n            self.weapons.append(\"rifle\")\n        elif self.has_sword is True and \"sword\" not in self.weapons:\n            self.weapons.append(\"sword\") \n        print \"Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons)\n        sleep(4)\n        \n    def low_health(self):\n        if self.health <= 60 and self.potions > 0:\n            print \"\\n*****DANGER*****\\n\"\n            choice = raw_input(\"\\nYour health is currently at %d, a\"\n                    \"nd you currently have %d potions in your inven\"\n                    \"tory. \\nWould you like to use one? \" % (self.health,self.potions)\n                    )\n            choice.lower()\n            if choice == 'y' or choice == 'yes':\n                self.use_potion()\n                return self\n            else:\n                print \"\\nOk tough guy.\"\n                sleep(2)\n                return self\n    \n    def set_health(self, newHealth):\n        self.health = newHealth\n        print \"\\nHealth set to %d\" % self.health\n        sleep(2)\n        return self\n    \n    def take_damage(self, damage):\n        self.health -= damage\n        print \"\\nYour health is now at %d\" % self.health\n        if self.health < 0:\n            print \"\\nYou were slain! Maybe you should carry more health potions with you next time!\\n\"\n            exit(0)\n        sleep(2)\n        return self\n    \n    def deal_damage(self,Monster):\n        if self.current_weapon == \"sword\":\n            damage_dealt = superRandint(13,30)\n        elif self.current_weapon == \"pistol\":\n            damage_dealt = superRandint(31,60)\n        elif self.current_weapon == \"rifle\":\n            damage_dealt = superRandint(61,120)\n        else: \n            damage_dealt = superRandint(1,12)\n        \n        Monster.take_damage(damage_dealt,self)\n        \n    def gain_xp(self,monster_name):\n        if monster_name == \"Dragon\":\n            gained = superRandint(40,150)\n        elif monster_name == \"Gremlin\":\n            gained = superRandint(1,35)\n        elif monster_name == \"Demon\":\n            gained = superRandint(15,50)\n        elif monster_name == \"Zombie\":\n            gained = superRandint(16,75)\n        else:\n            gained = superRandint(1,30)\n        self.xp += gained\n        print \"\\nYou gained %d XP!\" % gained\n        return self\n\n    def buy_weapon(self):\n        print \"\\nS)word:   25 Gold\"\n        print \"P)istol:  60 Gold\"\n        print \"R)ifle:   120 Gold\"\n        choice = raw_input(\"\\nWhich one would you like to purchase? \").lower()\n        if choice == 's'and self.gold >= 25:\n            self.gold -= 25\n            self.has_sword = True \n            print \"\\nA sword has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'p' and self.gold >= 60:\n            self.gold -= 60\n            self.has_pistol = True\n            print \"\\nA pistol has been added to your inventory.\"\n            sleep(2)\n        elif choice == 'r' and self.gold >= 120:\n            self.gold -= 120\n            self.has_rifle = True\n            print \"\\nA rifle has been added to your inventory.\"\n            sleep(2)\n        else:\n            print \"\\nSorry you don't have enough gold for that purchase.\"\n            sleep(2)\n            actions.visit_shop(self)\n        return (self)\n    \n    def set_current_weapon(self): \n        print \"\\nCurrent Weapon: \" + self.current_weapon\n        #doesn't show correct weapons after a new weapon is found\n        #even if weapon is in inventory, method itself works perfectly.\n        print \"Available Weapons: %s\" % \", \".join(str(weapon) for weapon in self.weapons) \n        choice = raw_input(\"\\nUse weapon: \").lower()\n        if choice == \"sword\" and self.has_sword is True:\n            self.current_weapon = \"sword\"\n        elif choice == \"pistol\" and self.has_pistol is True:\n            self.current_weapon = \"pistol\"\n        elif choice == \"rifle\" and self.has_rifle is True:\n            self.current_weapon = \"rifle\"\n        elif choice == \"dagger\":\n            self.current_weapon = \"dagger\"\n        else:\n            print \"\\nSorry you don't currently have that weapon in your inventory.\"\n        print \"\\nCurrent weapon has been changed to: %s\" % self.current_weapon\n        sleep(2)\n        return self\n", "prediction": "class CreatePlayer:\n    def __init__(self, name, health, xp, potions, gold"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given string to all capital letters using an algorithm and Python.\n\n### Input:\n\n\n", "label": "def convert_to_upper(string):\n    \"\"\"Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.\"\"\"\n    result = ''\n    for char in string:\n        result += chr(ord(char) - 32)\n    return result\n\nprint(convert_to_upper('Hello world!'))", "prediction": "def convert_to_uppercase(string):\n    return string.upper()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the Fibonacci sequence as a list of integers in Python\n\n### Input:\n\n\n", "label": "def fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a natural language processing (NLP) program in Python to classify words into five categories\n\n### Input:\nNot applicable\n\n", "label": "import nltk\nfrom nltk.classify import maxent\nfrom nltk.tokenize import word_tokenize\n\n# define the categories\nCATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other']\n\n# generate training data\ntraining_data = [\n    (\"That's an interesting book.\", {'category': 'noun'}),\n    (\"Can I borrow it?\", {'category': 'verb'}),\n    (\"It's really amazing.\", {'category': 'adjective'}),\n    (\"I'm learning a lot.\", {'category': 'adverb'}),\n    (\"It's blue.\", {'category': 'other'})\n]\n\n# create a feature extractor\ndef extract_features(sentence):\n words = word_tokenize(sentence)\n features = {}\n for w in words:\n features[w.lower()] = True\n return features\n\n# train the classifier\nclassifier = maxent.MaxentClassifier.train(\ntraining_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES\n)\n\n# classify a sentence\nsentence = \"It's yellow.\"\nfeatures = extract_features(sentence)\nlabel = classifier.classify(features)\n\n# print the result\nprint(label) # other", "prediction": "### Output:\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to generate a random password string of length 8, consisting of upper and lower case characters, special characters and digits.\n\n### Input:\n\n\n", "label": "import random\nimport string\n\ndef generate_password_string(length):\n    # Generate a random password string of length 8, consisting of upper and lower case characters, special characters and digits\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(generate_password_string(8))", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to optimize a given set of objects for a given goal.\n\n### Input:\nObjects: A, B, C, D \nGoal: Maximize value\n\n", "label": "def optimize(objects, goal):\n max_value = -float(\"inf\")\n best_config = None\n\n for config in generate_configs(objects):\n  value = evaluate_config(config)\n  if value > max_value:\n   max_value = value\n   best_config = config\n  \n return best_config\n\ndef generate_configs(objects):\n # Generate all possible combinations of the objects\n \ndef evaluate_config(config):\n # Evaluate the value of the configuration for the given goal", "prediction": "def optimize(objects, goal):\n    # Sort objects by value\n    objects.sort(key=lambda x:"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to encrypt a message using RSA encryption.\n\n### Input:\n\n\n", "label": "from Crypto.PublicKey import RSA\ndef encrypt(message):\n    #Generate public and private keys\n    key = RSA.generate(1024)\n    public_key = key.publickey()\n  \n    #Encrypt the message with the public key\n    encrypted_message = public_key.encrypt(message, 32)\n    return encrypted_message", "prediction": "def encrypt_message(message, public_key):\n    \"\"\"\n    Encrypts a message using RSA encryption.\n\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that automates the process of password validation.\n\n### Input:\n\n\n", "label": "def password_validation(password):\n  if(len(password) < 8):\n    return False\n  elif not any(char.isdigit() for char in password):\n    return False\n  elif not any(char.isupper() for char in password):\n    return False\n  elif not any(char.islower() for char in password):\n    return False\n  else:\n    return True", "prediction": "def validate_password(password):\n    \"\"\"Validates a password by checking if it meets the following criteria:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to fill missing values in a given dataset.\n\n### Input:\nDataset with missing values\n\n", "label": "def fill_missing_values(data):\n    for column in data.columns:\n        if data[column].isnull().any():\n            mean = data[column].mean()\n            data[column] = data[column].fillna(mean)\n    return data", "prediction": "### Output:\nPython program to fill missing values in a given dataset."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a random password string with length 20 that contains all the characters in the string.\n\n### Input:\n\n\n", "label": "import random \n  \ndef generate_password(length): \n    password_str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\"\n    password =  \"\".join(random.sample(password_str,length )) \n    return password\n\n# Driver Code \nlength = 20\nprint(generate_password(length))", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python for encrypting a given string with a given key.\n\n### Input:\nKey: \"mykey123\"\nString: \"My secret message\"\n\n", "label": "import base64\nfrom Crypto.Cipher import AES\n\ndef encrypt(key, message):\n cipher = AES.new(key.encode(), AES.MODE_ECB)\n padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())\n encrypted = cipher.encrypt(padded_msg)\n encoded = base64.b64encode(encrypted)\n return encoded.decode()\n\nencrypt('mykey123', 'My secret message')", "prediction": "def encrypt(key, string):\n    cipher = \"\"\n    for char in string:\n        if char.is"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm for checking whether a given string contains only unique characters.\n\n### Input:\n\n\n", "label": "def string_unique(string):\n    if len(string) > 256:\n        return False\n    else:\n        my_set = set()\n        for character in string:\n            if character in my_set:\n                return False\n            else:\n                my_set.add(character)\n    return True", "prediction": "def is_unique(string):\n    if len(string) > 128:\n        return False\n\n    char"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print all numbers from N to 1 in reverse order.\n\n### Input:\n\n\n", "label": "def reverse_print(n):\n    for i in range(n, 0, -1):\n        print(i)\n\nn = 5\nreverse_print(n)", "prediction": "def print_numbers(n):\n    for i in range(n, 0, -1):\n        print"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to determine whether a given array A[1...N] can be partitioned such that the sum of elements in both partitions is equal.\n\n### Input:\nArray: [1, 5, 11, 5]\n\n", "label": "def partition_equal(arr):\n   total = sum(arr) \n   if total % 2 != 0: \n      return False \n   half = total//2 \n   n = len(arr) \n   dp = [[False for _ in range(half+1)] for _ in range(n+1)] \n   for i in range(n+1): \n      dp[i][0] = True \n   for j in range(1,half+1): \n      dp[0][j] = False \n   for i in range(1, n+1): \n      for j in range(1, half+1): \n         if arr[i-1] <= j:\n            dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \n         else:\n            dp[i][j] = dp[i-1][j] \n   return dp[n][half]", "prediction": "### Output:\nTrue"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for handling exceptions.\n\n### Input:\n\n\n", "label": "class CustomException(Exception):\n    def __init__(self, message):\n        self.message = message\n    def __str__(self):\n        return self.message\n\ndef divide(x, y):\n    try:\n        result = x // y\n    except ZeroDivisionError:\n        raise CustomException(\"Division by zero is not allowed\")\n    else:\n        return result", "prediction": "class ExceptionHandler:\n    def __init__(self, exception):\n        self.exception = exception\n\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two lists x and y, write a python program to return a list that contains the elements which are common to both lists.\n\n### Input:\nx = [1, 2, 3, 4], y = [2, 3, 4, 5]\n\n", "label": "def common_elements(x, y):\n    common = []\n    for i in x:\n        if i in y:\n            common.append(i)\n    return common", "prediction": "### Output:\n[2, 3, 4]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to generate the Fibonacci series until n.\n\n### Input:\n\n\n", "label": "def Fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input Given\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n): \n   c = a + b \n   a = b \n   b = c \n return b", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this Java code sample to Python.\n\n### Input:\npublic int sumOfArray(int[] array) {\n    int sum = 0; \n    for (int i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n}\n\n", "label": "def sum_of_array(array):\n    sum = 0 \n    for i in range(len(array)):\n        sum += array[i]\n    return sum", "prediction": "def sum_of_array(array):\n    sum = 0\n    for i in range(len(array)):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python that collects data from specific pages.\n\n### Input:\nhttps://en.wikipedia.org/wiki/Python_(programming_language)\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Python_(programming_language)\"\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.content)\n\n# get page title\ntitle = soup.find('h1', attrs={'id': 'firstHeading'}).text\n\n# get all div nodes with class\ndivs = soup.find_all('div', class_='mw-body-content')\n\n# get all links\nlinks = []\nfor div in divs:\n links.extend(div.find_all('a'))\n\n# print title and links\nprint(\"Page title: {}\".format(title))\nfor link in links:\n print(\"Link: {}\".format(link['href']))", "prediction": "https://en.wikipedia.org/wiki/Python_(programming_language)#History\n\nhttps://en.wikipedia.org/wiki"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that merges two unsorted linked lists.\n\n### Input:\n\n\n", "label": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef merge(head1, head2): \n    # Base cases \n    if head1 is None: \n        return head2  \n    if head2 is None: \n        return head1 \n  \n    mergedHead = None\n    if head1.data <= head2.data: \n        mergedHead = head1 \n        mergedHead.next = merge(head1.next, head2) \n    else: \n        mergedHead = head2\n        mergedHead.next = merge(head1, head2.next) \n  \n    return mergedHead", "prediction": "def merge_lists(list1, list2):\n    merged_list = []\n    while list1 and list"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given string in a sentence case.\n\n### Input:\nTHIS IS A STRING.\n\n", "label": "CaseString = \"THIS IS A STRING.\"\n\ndef sentence_case(CaseString):\n    return CaseString.capitalize()\n\nprint(sentence_case(CaseString))", "prediction": "def sentence_case(string):\n    return string.title()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm for linear search in Python.\n\n### Input:\nList: [1, 3, 8, 10, 15, 20, 25]\nNumber to search: 15\n\n", "label": "def linear_search(list, n):\n  i = 0\n  while i < len(list):\n    if list[i] == n:\n      return i\n    i = i+1\n  return -1\n\nlist = [1, 3, 8, 10, 15, 20, 25]\nn = 15\nindex = linear_search(list, n)\nprint(\"Number found at index:\", index)", "prediction": "def linear_search(list, number):\n    for i in range(len(list)):\n        if list[i]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this Python code to JavaScript code.\n\n### Input:\narr = [3, 4, 5 ,2 ,6, 8, 1]\n\n", "label": "let arr = [3, 4, 5, 2, 6, 8, 1];\n\nfunction bubbleSort(arr) {\n  let swapped;\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}", "prediction": "def find_max(arr):\n    max = arr[0]\n    for i in range(1,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0.\n\n### Input:\n[1,-2,3,4,-5]\n\n", "label": "import numpy as np\n\n# Get the input array\narr = [1,-2,3,4,-5]\n\n# Optimize the array so that the sum of elements is maximized\n# and all the elements are greater than 0\nnew_arr = np.max(arr,0)\n\n# Print the optimized array\nprint(\"Optimized Array : \",*new_arr)", "prediction": "### Output:\n[3,4]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to print the nth Fibonacci number.\n\n### Input:\n6\n\n", "label": "\"\"\"\nPython script to print the nth Fibonacci number\n\"\"\"\n\ndef fibonacci(num):\n    a, b = 0, 1\n    for _ in range(num):\n        a, b = b, a+b\n    return a\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The Fibonacci number at position {0} is {1}\".format(num, fibonacci(num)))", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that classifies the sentiment in a given sentence.\n\n### Input:\n\n\n", "label": "# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')", "prediction": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes three strings as parameters and concats them into one string.\n\n### Input:\n\n\n", "label": "def concat_strings(str1, str2, str3):\n  return str1 + str2 + str3", "prediction": "def concat_strings(str1, str2, str3):\n    return str1 + str2 +"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the number of odd and even numbers in a given array.\n\n### Input:\narr = [8, 5, 6, 3, 9]\n\n", "label": "arr = [8, 5, 6, 3, 9]\n\nodd = 0\neven = 0\n\nfor num in arr: \n    if num % 2 == 0: \n        even += 1\n    else: \n        odd += 1\n\nprint(\"Number of odd numbers in the array: \", odd)\nprint(\"Number of even numbers in the array: \", even)", "prediction": "def odd_even(arr):\n    odd = 0\n    even = 0\n    for i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a python program to join two strings x and y, and then print the resulting combined string.\n\n### Input:\nx = \"Hello\"; y = \"World\"\n\n", "label": "x = \"Hello\"\ny = \"World\"\n\nresult = x + y\nprint(result)", "prediction": "def join_strings(x, y):\n    return x + y\n\nprint(join_strings(x, y))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for a program that checks if two strings are palindromes.\n\n### Input:\nInput strings: \u201cradar\u201d, \u201cdad\u201d\n\n", "label": "def is_palindrome(str1, str2):\n # Reverse str1\n reverse_str1 = str1[::-1]\n\n # Check if str1 is the same as the reversed version of str2\n if reverse_str1 == str2:\n return True\n else:\n return False\n\n# Sample input\nstr1 = 'radar'\nstr2 = 'dad'\n\n# Check if the strings are palindromes\nprint(is_palindrome(str1, str2)) # Output: True", "prediction": "def is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"rad"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate all permutations of a given list.\n\n### Input:\n[1,2,3]\n\n", "label": "def permutations(input_list):\n if len(input_list) == 0:\n yield []\n else:\n for i in range(len(input_list)):\n first_el = [input_list[i]]\n remainder_list = input_list[:i] + input_list[i+1:]\n for perm in permutations(remainder_list):\n yield first_el + perm", "prediction": "def permutations(lst):\n    if len(lst) == 1:\n        return [lst]\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python program to remove all leading and trailing whitespace characters.\n\n### Input:\ntext = \"  This  is a text string   \"\n\n", "label": "text = text.strip()", "prediction": "### Output:\nThis is a text string"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the amount of words in a short text.\n\n### Input:\n\n\n", "label": "def calculate_words_in_text(text):\n    words = text.split(\" \")\n    return len(words)", "prediction": "def count_words(text):\n    return len(text.split())\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that converts a list of numbers into a dictionary, where the key is the number and the value is the corresponding difference between two immediate numbers in the list.\n\n### Input:\n[1, 2, 4, 7, 11]\n\n", "label": "def diff_in_list(input_list):\n    \"\"\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\"\"\"\n    \n    output_dict = {}\n  \n    # Iterate over the list and create a dictionary with the \n    # input number as key and the difference between\n    # two immediate numbers as value\n    for i in range(len(input_list) - 1):\n        output_dict[input_list[i]] = input_list[i + 1] - input_list[i]\n    \n    return output_dict\n    \n# Sample Input\ninput_list = [1, 2, 4, 7, 11]\n\n# Print the output\nprint(diff_in_list(input_list))", "prediction": "### Output:\n{1: 1, 2: 2, 4: 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python which takes two lists of strings as input and merges the two lists into a single list with unique elements.\n\n### Input:\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\n", "label": "def merge_list(list1, list2):\n    merged_list = list1 + list2\n    final_list = list(dict.fromkeys(merged_list))\n    return final_list\n\nlist1 = [\"apple\",\"orange\",\"banana\"]\nlist2 = [\"cherry\",\"pineapple\",\"apple\"]\n\nresult = merge_list(list1, list2)\nprint(result) # Output: [\"apple\", \"orange\", \"banana\", \"cherry\", \"pineapple\"]", "prediction": "def merge_unique(list1, list2):\n    return list(set(list1 + list2))\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two integers and returns the larger with the smaller one as its divisor.\n\n### Input:\nInput integers: 10, 20\n\n", "label": "def get_larger_number_divisible_by_smaller(num1, num2):\n  max_num = max(num1, num2)\n  min_num = min(num1, num2)\n\n  return max_num if max_num % min_num == 0 else None\n\nresult = get_larger_number_divisible_by_smaller(10, 20)\nprint(result) # 20", "prediction": "def larger_divisor(a, b):\n    if a > b:\n        return a, b\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.\n\n### Input:\n\n\n", "label": "import string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in a list of values and a target value, and finds the closest value in the list to the target value.\n\n### Input:\nlist_values = [-5, -2, 2, 4, 7, 9, 11] \ntarget_value = 5\n\n", "label": "def find_closest_value(list_values, target_value):\n closest_value = None\n min_diff = float('inf')\n for value in list_values:\n diff = abs(target_value - value)\n if diff < min_diff:\n min_diff = diff\n closest_value = value\n return closest_value\n\nprint(find_closest_value(list_values, target_value)) # Output: 4", "prediction": "def find_closest_value(list_values, target_value):\n    closest_value = list_values[0]\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to accept student information like name, age, course and print it.\n\n### Input:\nName: John Doe\nAge: 23\nCourse: Data Science\n\n", "label": "name = \"John Doe\"\nage = 23\ncourse = \"Data Science\"\n\nprint(\"Name: \" + name)\nprint(\"Age: \" + str(age))\nprint(\"Course: \" + course)", "prediction": "def student_info(name, age, course):\n    print(\"Name:\", name)\n    print(\"Age"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to implement a basic calculator in Python. The program should accept two numbers as input and print the result of the selected operation.\n\n### Input:\nNumbers: 3 and 5\nOperation: Addition\n\n", "label": "#Program to implement a basic calculator\n\n#Define a function to perform the operation\ndef calculate(num1, num2, operation):\n    if operation == 'add':\n        return num1 + num2\n    elif operation == 'subtract':\n        return num1 - num2\n    elif operation == 'multiply':\n        return num1 * num2\n    elif operation == 'divide':\n        return num1 / num2\n\n#Take the numbers and operation as input\nnum1 = int(input('Enter first number: '))\nnum2 = int(input('Enter second number: '))\noperation = input('Select an operation (add, subtract, multiply, divide): ')\n\n#Call the function to perform the operation\nresult = calculate(num1, num2, operation)\n\n#Print the result\nprint('Result:',result)", "prediction": "### Output:\nThe result of the addition is 8."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect the occurrence of a given string in another large string.\n\n### Input:\nString 1: \"This is a test.\"\nString 2: \"test\"\n\n", "label": "def str_find(str1, str2):\n    return str1.find(str2) != -1\n\nstr_find(\"This is a test.\", \"test\")", "prediction": "### Output:\nThe string \"test\" occurs 1 time in the string \"This is a test"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to filter out elements in a list that are divisible by 3.\n\n### Input:\n[9, 8, 10, 27, 12, 15]\n\n", "label": "numbers = [9, 8, 10, 27, 12, 15]\n\ndef filter_div_by_3(numbers):\n    return [num for num in numbers if num % 3 != 0]\n\nfiltered_numbers = filter_div_by_3(numbers)\nprint(filtered_numbers)", "prediction": "def divisible_by_three(lst):\n    return [x for x in lst if x % 3 =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two dimensional array and transposes it.\n\n### Input:\n[[1,2,3],[4,5,6]]\n\n", "label": "def transpose_matrix(matrix):\n    transposed_matrix = []\n    for i in range(len(matrix[0])):\n        row = []\n        for j in range(len(matrix)):\n            row.append(matrix[j][i])\n        transposed_matrix.append(row)\n    return transposed_matrix\n\nmy_matrix =[[1,2,3],[4,5,6]]\ntransposed_matrix = transpose_matrix(my_matrix)\nprint(transposed_matrix)", "prediction": "def transpose(arr):\n    return list(map(list, zip(*arr)))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the elements of a matrix in spiral form\n\n### Input:\n\n\n", "label": "def spiralPrint(m, n, a) :\n    k = 0; l = 0\n\n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n        \n    while (k < m and l < n) : \n    \n        # Print the first row from  the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n    \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n    \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1", "prediction": "def spiralPrint(matrix):\n    # Write your code here\n    n = len(matrix)\n    m"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search through a provided list of words and replace any occurrences of a particular letter with a hyphen.\n\n### Input:\nwords = [\"apple\", \"banana\", \"grape\", \"pear\"]\nletter = \"a\"\n\n", "label": "def replaceLetter(words, letter):\n\tnew_words = []\n\tfor word in words:\n\t\tnew_word = word.replace(letter, \"-\")\n\t\tnew_words.append(new_word)\n\n\treturn new_words\n\nwords = [\"apple\", \"banana\", \"grape\", \"pear\"]\nletter = \"a\"\n\nresult = replaceLetter(words, letter)\nprint(result) #['-pple', 'b-n-n-', 'gr-pe', 'pe-r']", "prediction": "def replace_letter(words, letter):\n    for word in words:\n        if letter in word:\n           "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to verify that an email address is valid.\n\n### Input:\n\n\n", "label": "import re \n  \n# function to validate an Email \ndef validate_email(email): \n      \n    # make a regular expression \n    # for validating an Email \n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if (re.search(regex, email)): \n        print(\"Valid Email\")  \n    else: \n        print(\"Invalid Email\")  \n  \nif __name__ == \"__main__\":      \n    # enter the email  \n    email = \"test@example.com\"\n      \n    validate_email(email)", "prediction": "def is_valid_email(email):\n    if '@' in email and '.' in email:\n        return True"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a module for generating random strings in Python.\n\n### Input:\nNot applicable\n\n", "label": "import random\nimport string\n\ndef generate_random_string(length):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(length))", "prediction": "### Output:\ndef random_string(length):\n    import random\n    import string\n    return ''.join"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine whether or not a given string is a palindrome.\n\n### Input:\n\"racecar\"\n\n", "label": "def isPalindrome(s):\n\n # remove whitespaces\n s = ''.join(s.split())\n\n # reverse string\n rev = s[::-1]\n\n # compare\n if rev == s:\n return True\n return False\n\nif isPalindrome(\"racecar\"):\n print('String is a palindrome')\nelse:\n print('String is not a palindrome')", "prediction": "def isPalindrome(s):\n    return s == s[::-1]\n\nprint(isPalindrome(\"racecar\"))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to split a given text into sentences.\n\n### Input:\n\n\n", "label": "import nltk\nfrom nltk.tokenize import sent_tokenize\n\ndef split_into_sentences(text):\n    sentences = sent_tokenize(text)\n    return sentences", "prediction": "def split_text(text):\n    sentences = []\n    for sentence in text.split(\".\"):\n        sentences.append"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of codes to store product data in Python.\n\n### Input:\n<Product information:\nproduct code (string), product name (string), quantity (integer)>\n\n", "label": "product_data = [\n    ('code', 'str'),\n    ('name', 'str'),\n    ('quantity', 'int')\n]", "prediction": "def product_info(product_code, product_name, quantity):\n    product_info = {\n        \"product_code"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the mean, median, and mode of a given numeric array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n", "label": "def calculate_mean_median_mode(arr):\n#calculate mean\n mean = sum(arr) / len(arr)\n \n#calculate median\n arr.sort()\n mid = len(arr) // 2\n if len(arr) % 2 == 0:\n median = (arr[mid] + arr[mid + 1]) / 2\n else:\n median = arr[mid + 1]\n \n#calculate mode\n frequencies = {}\n for i in arr:\n if i in frequencies:\n frequencies[i] += 1\n else:\n frequencies[i] = 1\n mode = max(frequencies, key=frequencies.get)\n \n return mean, median, mode", "prediction": "def mean_median_mode(arr):\n    mean = sum(arr) / len(arr)\n    median = arr"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes two integers as input and prints the least common multiple of the two numbers.\n\n### Input:\na = 15\nb = 20\n\n", "label": "def lcm(a, b):\n    \"\"\"\n    Finds the least common multiple of two integers.\n    \"\"\"\n    # Create a list of multiples of the larger integer\n    multiple_list = [n*b for n in range(1, a+1)]\n    \n    # Iterate through the list and find the smallest multiple that is divisible by the second integer\n    for n in multiple_list:\n        if n % a == 0:\n            return n\n\nif __name__ == '__main__':\n    a = 15\n    b = 20\n    result = lcm(a, b)\n    print(\"The least common multiple of %d and %d is %d.\" % (a, b, result))", "prediction": "### Output:\nThe least common multiple of 15 and 20 is 60."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a while loop to print the numbers from 0 to 10 in Python.\n\n### Input:\n\n\n", "label": "# Initialise the counter\ni = 0\n\n# Use a while loop to print numbers from 0 to 10\nwhile i <= 10:\n    print(i)\n    i += 1", "prediction": "def print_numbers():\n    i = 0\n    while i <= 10:\n        print(i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the midpoint between two 3-dimensional points using Python.\n\n### Input:\npoint1 = [35.0, 43.0, 81.0]\npoint2 = [82.0, 54.0, 19.0]\n\n", "label": "def midpoint3D(point1, point2): \n    x_mid = (point1[0] + point2[0]) / 2\n    y_mid = (point1[1] + point2[1]) / 2\n    z_mid = (point1[2] + point2[2]) / 2\n    return [x_mid, y_mid, z_mid]\n\npoint1 = [35.0, 43.0, 81.0]\npoint2 = [82.0, 54.0, 19.0]\nmidpoint = midpoint3D(point1, point2)\nprint(midpoint) # [58.5, 48.5, 50.0]", "prediction": "def midpoint(point1, point2):\n    return [(point1[0] + point2["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to compare two strings and output true if one string is a permutation of another.\n\n### Input:\nString 1: abc\nString 2: cba\n\n", "label": "def is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2))", "prediction": "def is_permutation(str1, str2):\n    if len(str1) != len(str2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to create an even number generator.\n\n### Input:\n\n\n", "label": "def even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1", "prediction": "def even_number_generator():\n    for i in range(0, 100, 2):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the area of a given trapezoid.\n\n### Input:\nbase1 = 2\nbase2 = 4\nheight = 3\n\n", "label": "def area_trapezoid(base1, base2, height):\n return (base1 + base2) * (height / 2)\n \nprint(area_trapezoid(2, 4, 3)) # Output: 9.0", "prediction": "def area_of_trapezoid(base1, base2, height):\n    return (base1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize the Python in-built module to print the calendar for the given month.\n\n### Input:\nMonth: 5\nYear: 2021\n\n", "label": "# import the module\nimport calendar\n\n# print the calendar \nprint(calendar.month(2021, 5))", "prediction": "### Output:\nMay 2021\nMo Tu We Th Fr Sa Su\n1  2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function that prints out the longest sequence of increasing numbers from the given array of numbers.\n\n### Input:\n[5, 3, 4, 8, 6, 7]\n\n", "label": "def printLongestIncreasingSequence(arr):\n  # Set the maximum length to 0\n  maxLength = 0\n\n  # Iterate over all the elements of the given array\n  for i in range(len(arr)):\n    # Set currentLength to 1\n    currentLength = 1\n\n    # Iterate over all the subsequent elements of the array\n    for j in range(i + 1, len(arr)):\n      # If there is an increasing sequence of numbers, increment the currentLength\n      if arr[j] - arr[j - 1] == 1:\n        currentLength += 1\n      else:\n        break\n\n    # Check if the currentLength is greater than the maxLength\n    if currentLength > maxLength:\n      maxLength = currentLength\n\n  # Print the longest sequence of increasing numbers\n  for i in range(maxLength):\n    print(arr[i], end=\" \")\n  print()\n\n# Tests \nprintLongestIncreasingSequence([5, 3, 4, 8, 6, 7])", "prediction": "### Output:\n[3, 4, 8, 6, 7]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a post request in python with the given parameters.\n\n### Input:\nAPI: https://api.endpoint.com\nHeaders: {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}\nParameters: {'name': 'John', 'age': 25}\n\n", "label": "import requests\n\nurl = 'https://api.endpoint.com'\nheaders = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'}\nparameters = {'name': 'John', 'age': 25}\n\nresponse = requests.post(url, headers=headers, json=parameters)", "prediction": "### Output:\nimport requests\nimport json\n\nurl = 'https://api.endpoint.com'\nheaders ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse natural language processing to create a sentiment analysis model in Python using the NLTK library.\n\n### Input:\nNot applicable\n\n", "label": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Initializing the sentiment analyser\nsia = SentimentIntensityAnalyzer()\n\n# Defining the sentiment analysis function\ndef sentiment_analyzer(text):\n    score = sia.polarity_scores(text)\n    neg = score['neg']\n    pos = score['pos']\n    if pos > neg:\n        print('Positive sentiment')\n    elif pos < neg:\n        print('Negative sentiment')\n    else:\n        print('Neutral sentiment')\n\n# Testing the sentiment analysis function\nsentiment_analyzer(\"That movie was great!\")", "prediction": "### Output:\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nsia = Sent"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web service using the Flask framework and Python. This service should have an API endpoint to accept POST requests with JSON input. The endpoint should take in a JSON input of numbers and send back the sum of the numbers in the response.\n\n### Input:\n[1, 2, 3]\n\n", "label": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/sum_numbers', methods=['POST'])\ndef sum_numbers():\n data = request.get_json()\n numbers = data.get('numbers', [])\n total = 0\n for n in numbers:\n total += n\n return jsonify({'sum': total})\n\nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\n6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store the number of occurrences of each character of the given string.\n\n### Input:\nString = \u201cabracadabra\u201d\n\n", "label": "str_dict = {i:list(str).count(i) for i in set(str)}", "prediction": "def count_occurrences(string):\n    char_count = {}\n    for char in string:\n        if char"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to sort a given list.\n\n### Input:\nlist = [5, 4, 9, 2, 1]\n\n", "label": "list.sort()\nprint(list)", "prediction": "def sort_list(list):\n    list.sort()\n    return list\n\nprint(sort_list(list))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to reverse the digits of an integer.\n\n### Input:\nn = 123\n\n", "label": "def reverse_int(n):\n    rev = 0\n    while n > 0:\n        rem = n % 10\n        rev = rev * 10 + rem\n        n = n // 10\n    return rev\n\nn = 123\nprint(reverse_int(n))", "prediction": "def reverse(n):\n    rev = 0\n    while n > 0:\n        rev ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python function to find the longest common subsequence of two given strings\n\n### Input:\nString 1 = \"abcefg\"\nString 2 = \"adgf\"\n\n", "label": "def LongestCommonSubsequence(string1, string2):\n    n = len(string1)\n    m = len(string2)\n    dp = [[None]*(m+1) for i in range(n+1)] \n\n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0 : \n                dp[i][j] = 0\n            elif string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1]+1\n            else: \n                dp[i][j] = max(dp[i-1][j] , dp[i][j-1]) \n    return dp[n][m]", "prediction": "def lcs(X, Y):\n    m = len(X)\n    n = len(Y)\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, construct a python dictionary of all the words with their length as the value.\n\n### Input:\nwords = [\"apple\", \"strawberry\", \"coffee\"]\n\n", "label": "word_lengths = {\n    \"apple\": 5,\n    \"strawberry\": 10,\n    \"coffee\": 6\n}", "prediction": "### Output:\n{'apple': 5, 'strawberry': 9, 'coffee':"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will generate a random password of length 10 that will contain at least one lowercase letter, one uppercase letter, one digit, one special character (e.g. @, #, &, etc.).\n\n### Input:\nNot applicable\n\n", "label": "import random\nimport string\n\ndef generate_password():\n    password = ''\n    characters = string.ascii_letters + string.digits + string.punctuation\n    for i in range(10):\n        password += random.choice(characters)\n    if not any(c.islower() for c in password):\n        password = generate_password()\n    if not any(c.isupper() for c in password):\n        password = generate_password()\n    if not any(c.isdigit() for c in password):\n        password = generate_password()\n    return password\n\nprint(generate_password())", "prediction": "### Output:\nimport random\nimport string\n\ndef generate_password(length):\n    password = []\n    for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python method that given a string, it finds the longest palindromic substring and prints it.\n\n### Input:\nstr = \"forgeeksskeeg\"\n\n", "label": "def longestPalindrome(str): \n  maxLength = 1\n  \n  start = 0 \n  length = len(str) \n  \n  low = 0\n  high = 0\n  \n  for i in range(1, length): \n    low = i - 1\n    high = i \n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n  \n    low = i - 1\n    high = i + 1\n    \n    while low >= 0 and high < length and str[low] == str[high]: \n        if high - low + 1 > maxLength: \n            start = low \n            maxLength = high - low + 1\n        low -= 1\n        high += 1\n            \n  print(\"Longest Palindrome : \", str[start:start + maxLength])        \n      \nlongestPalindrome(\"forgeeksskeeg\")", "prediction": "def longestPalindrome(self, s: str) -> str:\n    n = len(s)\n    if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to calculate the edit distance between two given strings.\n\n### Input:\n\n\n", "label": "def edit_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "prediction": "def edit_distance(s1, s2):\n    if len(s1) < len(s2):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to get the third largest element in a given row.\n\n### Input:\n[12, 13, 13, 45, 22, 99]\n\n", "label": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]", "prediction": "### Output:\n45"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to find the RMS (root mean square) of a list of numbers.\n\n### Input:\n\n\n", "label": "def rms(lst):\n sum_sq = 0\n for n in lst:\n  sum_sq += n*n\n return (sum_sq/len(lst))**0.5", "prediction": "def rms(numbers):\n    return sqrt(sum(x**2 for x in numbers) / len(numbers))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify all words in the given paragraph.\n\n### Input:\nparagraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\n", "label": "paragraph = \"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\"\n\nwords = paragraph.split() \nprint(words)\n# [\"Thomas\", \"Jefferson\", \"was\", \"an\", \"American\", \"statesman,\", \"diplomat,\", \"lawyer,\", \"architect,\", \"philosopher\", \"and\", \"Founding\", \"Father\", \"who\", \"served\", \"as\", \"the\", \"third\", \"president\", \"of\", \"the\", \"United\", \"States\", \"from\", \"1801\", \"to\", \"1809.\"]", "prediction": "def identify_words(paragraph):\n    words = paragraph.split()\n    return words\n\nprint(identify_words"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter a list of words by their length.\n\n### Input:\nword_list = [\"apple\", \"banana\", \"pear\", \"grape\", \"mango\"]\n\n", "label": "def filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list\n\nresult = filter_by_length(word_list, 5)\nprint(result)", "prediction": "def filter_words(word_list, length):\n    return [word for word in word_list if len(word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a piece of code in Python to split a string on a certain delimiter?\n\n### Input:\nstring = \"Hello,how,are,you\"\n\n", "label": "my_list = string.split(\",\")", "prediction": "def split_string(string, delimiter):\n    return string.split(delimiter)\n\nprint(split_string(string, \",\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to remove duplicate values in the given array.\n\n### Input:\narr = [1, 2, 4, 2, 5, 4]\n\n", "label": "arr = [1, 2, 4, 5]\n \nunique_arr = []\n \nfor element in arr:\n    if element not in unique_arr:\n        unique_arr.append(element)\n \nprint(unique_arr) # [1, 2, 4, 5]", "prediction": "def remove_duplicates(arr):\n    unique = []\n    for num in arr:\n        if num not in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given code and make it run faster.\n\n### Input:\n\n\n", "label": "def optimize_code(code):\n    optimized_code = \"\"\n    lines = code.splitlines()\n    indentation_level = 0\n\n    for line in lines:\n        # Remove redundant white space and apply proper indentation\n        optimized_code += \" \" * indentation_level + line.strip() + \"\\n\"\n\n        # Increment/Decrement indentation level \n        if line.endswith(\":\"):\n            indentation_level += 4\n        else:\n            if line[0] not in [\"#\", \"\"]:\n                indentation_level -= 4\n        indentation_level = max(indentation_level, 0) # prevent it going below 0\n\n    return optimized_code", "prediction": "def optimize_code(code):\n    \"\"\"Optimize the given code and make it run faster.\"\"\"\n    #"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to group values according to given conditions.\n\n### Input:\ngroup1 = [1, 2, 3, 4] \ngroup2 = [5, 6, 7, 8] \ncondition = lambda x: x > 5\n\n", "label": "group1 = [1, 2, 3, 4] \ngroup2 = [5, 6, 7, 8] \ncondition = lambda x: x > 5\n\ngroup_1 = list(filter(condition, group1))\ngroup_2 = list(filter(condition, group2))\n\nprint(group_1)\nprint(group_2)", "prediction": "def group_by_condition(group1, group2, condition):\n    result = []\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to clean a dataset containing stock market data for a company. The script should remove superfluous columns, normalize the values, and check for missing data.\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd\n\n# Read in dataset \ndata = pd.read_csv('dataset.csv')\n\n# Remove any superfluous columns\ndata = data.drop(columns=['Unnamed', 'column'])\n\n# Normalize values \ndata['price'] = data['price'].apply(lambda x: x / max(data['price']))\n\n# Check for missing values\ndata = data.dropna()\n\n# Save cleaned dataset \ndata.to_csv('cleaned_dataset.csv', index=False)", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn import preprocessing\n\n# Load the dataset\ndf ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python to print out all the numbers from 1 to 10.\n\n### Input:\n\n\n", "label": "for num in range(1,11):\n    print(num)", "prediction": "for i in range(1, 11):\n    print(i)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the mean absolute error between two datasets.\n\n### Input:\n\n\n", "label": "def mean_absolute_error(y_true, y_pred):\n    return np.mean(np.abs(y_true - y_pred))", "prediction": "def mean_absolute_error(y_true, y_pred):\n    return np.mean(np.abs(y_true - y"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that takes in data points in time-series and returns the average of the data points for the given period.\n\n### Input:\n[1, 3, 4, 5, 3, 9, 6]\n\n", "label": "def average_of_period(arr):\n    return sum(arr) / len(arr)\n\nresult = average_of_period([1, 3, 4, 5, 3, 9, 6])\nprint(result)", "prediction": "def average(data, period):\n    return sum(data[period:]) / len(data[period:])\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to represent a deck of cards in a card game.\n\n### Input:\n\n\n", "label": "class Deck:\n    \n    #constructor\n    def __init__(self):\n        self.cards = []\n\n    #function to create a deck of playing cards\n    def create_deck(self):\n        suits = [\"C\", \"S\", \"H\", \"D\"]\n        ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n\n        for suit in suits:\n            for rank in ranks:\n                card = (rank, suit)\n                self.cards.append(card)\n\n     #function to draw a card from the deck\n    def draw_card(self):\n        if self.cards:\n            return self.cards.pop()\n        else:\n            return None", "prediction": "class Deck:\n    def __init__(self):\n        self.cards = []\n        for suit in ['"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct python script to identify the output of a given expression.\n\n### Input:\nexpression: (4 + 2) * 3\n\n", "label": "a = (4 + 2) * 3\nprint(a)", "prediction": "### Output:\nprint((4 + 2) * 3)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a set of Python classes for a game application. The classes should include a main Character class with fields for name, health, and inventory, and a Monster class with fields for name, health, and type (e.g. dragon, ogre, goblin).\n\n### Input:\nNot applicable\n\n", "label": "class Character:\n def __init__(self, name, health=100):\n self.name = name\n self.health = health\n self.inventory = []\n\n def add_item(self, item):\n self.inventory.append(item)\n\n def remove_item(self, item):\n self.inventory.remove(item)\n\nclass Monster:\n def __init__(self, name, health=100, type=\"Monster\"):\n self.name = name\n self.health = health\n self.type = type\n\n def attack(self, character):\n pass", "prediction": "### Output:\nclass Character:\n    def __init__(self, name, health, inventory):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a test suite in Python to test a class or function.\n\n### Input:\n\n\n", "label": "import unittest \n\nclass TestMyClassOrFunction(unittest.TestCase):\n\n    def test_something(self):\n        # Setup \n        # Code to set up a value to test \n        \n        # Exercise \n        # Code for the function to test \n        result = function_to_test(*args) \n        \n        # Verify\n        self.assertEqual(result, expected_result) \n\nif __name__ == \"__main__\":\n    unittest.main()", "prediction": "def test_class_or_function():\n    # Arrange\n    class_or_function = ClassOrFunction()\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the first letter of an array of words and return the longest word\n\n### Input:\n['Hello', 'world', 'Python']\n\n", "label": "\"\"\"\nFind the first letter of an array of words and return the longest word\n\"\"\"\n\ndef find_first_letter_longest_word(words):\n    longest = ''\n    first_letter = words[0][0]\n    for word in words:\n        if word[0] == first_letter and len(word) > len(longest):\n            longest = word\n    return longest\n\nif __name__ == '__main__':\n    words = ['Hello', 'world', 'Python']\n    print(find_first_letter_longest_word(words))", "prediction": "def first_letter(words):\n    return max(words, key=len)\n\nprint(first_letter(['Hello', '"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-crawler in Python to extract links from a web page.\n\n### Input:\nWeb page URL: http://www.example.com\n\n", "label": "import urllib.request \nfrom bs4 import BeautifulSoup\n\n#Providing the url as an argument to urlopen() \nurl = \"http://www.example.com\"\nhtml = urllib.request.urlopen(url).read() \nsoup = BeautifulSoup(html, features = 'html.parser') \n\n# extracting links from the web page \nlinks = [] \nfor link in soup.findAll('a'): \n    links.append(link.get('href')) \n\nprint(links)", "prediction": "def get_links(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, '"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that sorts the elements of a given list.\n\n### Input:\n[5, 7, 2, 3, 4, 1]\n\n", "label": "def sort_list(numbers):\n    numbers.sort()\n    return numbers\n\nresult = sort_list([5, 7, 2, 3, 4, 1])\nprint(result)", "prediction": "def sort_list(list):\n    list.sort()\n    return list\n\nprint(sort_list([5, "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way to shuffle a python list of integers\n\n### Input:\nmy_list = [1,2,3,4,5]\n\n", "label": "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nmy_list = [1,2,3,4,5]\nshuffled_list = shuffle_list(my_list)\nprint(shuffled_list)", "prediction": "def shuffle_list(my_list):\n    import random\n    random.shuffle(my_list)\n    return my_list"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to find the most common word in a sentence\n\n### Input:\n\n\n", "label": "def frequency(sentence):\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    \n    most_common_word, frequency = max(frequency.items(), key=lambda x: x[1])\n    return most_common_word, frequency", "prediction": "def most_common_word(sentence):\n    words = sentence.split()\n    return max(set(words), key="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.\n\n### Input:\n\n\n", "label": "# define a function to take in two numbers\ndef adder(num1, num2):\n    return num1 + num2\n\n# prompt the user to enter the two numbers\nnum1 = float(input(\"Enter number 1: \"))\nnum2 = float(input(\"Enter number 2: \"))\n\n# print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", adder(num1, num2))", "prediction": "def sum_of_two_numbers():\n    num1 = int(input(\"Enter the first number: \"))\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the greatest common factor (GCF) of two numbers.\n\n### Input:\nNumber 1: 15 \nNumber 2: 25\n\n", "label": "def gcf(m, n):\n    while m != 0:\n        m, n = n % m, m \n    return n\n\nprint(gcf(15, 25))", "prediction": "def gcf(a, b):\n    if a == 0:\n        return b\n    return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a number from the user and prints whether the number is prime or not.\n\n### Input:\n\n\n", "label": "def is_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n    \nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(\"The number is a prime number.\")\n    else:\n        print(\"The number is not a prime number.\")", "prediction": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most frequent element in a python list?\n\n### Input:\n[2, 3, 3, 5, 5, 5, 7, 8, 8]\n\n", "label": "def find_most_frequent(lst):\n    max_count = 0\n    most_frequent = None\n    count_dict = {}\n    for elem in lst:\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        else:\n            count_dict[elem] += 1\n            \n        if count_dict[elem] > max_count:\n            most_frequent = elem\n            max_count = count_dict[elem]\n            \n    return most_frequent, max_count", "prediction": "### Output:\n5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to print \"Hello World\" in a loop 10 times.\n\n### Input:\nfor i in range(5):\n    print(\"Hello World\")\n\n", "label": "for i in range(10):\n    print(\"Hello World\")", "prediction": "### Output:\nfor i in range(10):\n    print(\"Hello World\")"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to count the number of strings where the string length is 2 or more and the first and last characters are the same.\n\n### Input:\n['abc', 'xyz', 'aba', '1221']\n\n", "label": "# Define a function to count the strings\ndef count_strings(lst):\n count = 0\n \n # Iterate through the list\n for s in lst:\n \n # Check if string length is greater than 2 and first and last character is same\n if len(s) >= 2 and s[0] == s[-1]:\n count += 1\n \n return count\n \n# Driver Code\nlst = ['abc', 'xyz', 'aba', '1221']\nprint(count_strings(lst))", "prediction": "### Output:\n2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to make it more concise and easier to understand.\n\n### Input:\ndef concat_items(items):\n    result = \"\"\n    for item in items:\n        result = result + item\n    return result\n\n", "label": "def concat_items(items):\n    # Use join() to join the elements in the given list with an empty string\n    return \"\".join(items)", "prediction": "def concat_items(items):\n    return \"\".join(items)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a greedy algorithm in Python to complete a given optimization task.\n\n### Input:\n\n\n", "label": "def greedy_solution(arr):\n    arr.sort()\n    cur_max = arr[0]\n    result = [cur_max]\n    for i in range(1, len(arr)):\n        if arr[i] > cur_max + 1:\n            cur_max = arr[i]\n            result.append(cur_max)\n    return result", "prediction": "def greedy_algorithm(input):\n    # Initialize variables\n    max_value = 0\n    current_value"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nA number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not.\n\n### Input:\n21\n\n", "label": "def is_abundant(num):\n    divisor_sum = 0\n    for i in range(1, int(num/2)+1):\n        if num % i == 0:\n            divisor_sum += i\n\n    return divisor_sum > num\n\nnum = 21\n\nif is_abundant(num):\n    print(f\"{num} is abundant\")\nelse:\n    print(f\"{num} is not abundant\")", "prediction": "### Output:\n21 is an abundant number."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Supplier model with a name, type, stock management, module identifier, and module data fields. The model should implement the ModuleInterface and ShuupModel. It should also have methods to get orderability errors, stock statuses, suppliable products, and adjust/update stock. Finally, define a SupplierLogEntry model using the define_log_model function.\n\n### Input:\n\n\n", "label": "# -*- coding: utf-8 -*-\n# This file is part of Shuup.\n#\n# Copyright (c) 2012-2016, Shoop Ltd. All rights reserved.\n#\n# This source code is licensed under the AGPLv3 license found in the\n# LICENSE file in the root directory of this source tree.\nfrom django.db import models\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.utils.translation import ugettext_lazy as _\nfrom enumfields import Enum, EnumIntegerField\nfrom jsonfield import JSONField\n\nfrom shuup.core.fields import InternalIdentifierField\nfrom shuup.core.modules import ModuleInterface\nfrom shuup.utils.analog import define_log_model\n\nfrom ._base import ShuupModel\n\n\nclass SupplierType(Enum):\n    INTERNAL = 1\n    EXTERNAL = 2\n\n    class Labels:\n        INTERNAL = _('internal')\n        EXTERNAL = _('external')\n\n\n@python_2_unicode_compatible\nclass Supplier(ModuleInterface, ShuupModel):\n    default_module_spec = \"shuup.core.suppliers:BaseSupplierModule\"\n    module_provides_key = \"supplier_module\"\n\n    identifier = InternalIdentifierField(unique=True)\n    name = models.CharField(verbose_name=_(\"name\"), max_length=64)\n    type = EnumIntegerField(SupplierType, verbose_name=_(\"supplier type\"), default=SupplierType.INTERNAL)\n    stock_managed = models.BooleanField(verbose_name=_(\"stock managed\"), default=False)\n    module_identifier = models.CharField(max_length=64, blank=True, verbose_name=_('module'))\n    module_data = JSONField(blank=True, null=True, verbose_name=_(\"module data\"))\n\n    def __str__(self):\n        return self.name\n\n    def get_orderability_errors(self, shop_product, quantity, customer):\n        \"\"\"\n        :param shop_product: Shop Product\n        :type shop_product: shuup.core.models.ShopProduct\n        :param quantity: Quantity to order\n        :type quantity: decimal.Decimal\n        :param contect: Ordering contact.\n        :type contect: shuup.core.models.Contact\n        :rtype: iterable[ValidationError]\n        \"\"\"\n        return self.module.get_orderability_errors(shop_product=shop_product, quantity=quantity, customer=customer)\n\n    def get_stock_statuses(self, product_ids):\n        \"\"\"\n        :param product_ids: Iterable of product IDs\n        :return: Dict of {product_id: ProductStockStatus}\n        :rtype: dict[int, shuup.core.stocks.ProductStockStatus]\n        \"\"\"\n        return self.module.get_stock_statuses(product_ids)\n\n    def get_stock_status(self, product_id):\n        \"\"\"\n        :param product_id: Product ID\n        :type product_id: int\n        :rtype: shuup.core.stocks.ProductStockStatus\n        \"\"\"\n        return self.module.get_stock_status(product_id)\n\n    def get_suppliable_products(self, shop, customer):\n        \"\"\"\n        :param shop: Shop to check for suppliability\n        :type shop: shuup.core.models.Shop\n        :param customer: Customer contact to check for suppliability\n        :type customer: shuup.core.models.Contact\n        :rtype: list[int]\n        \"\"\"\n        return [\n            shop_product.pk\n            for shop_product\n            in self.shop_products.filter(shop=shop)\n            if shop_product.is_orderable(self, customer, shop_product.minimum_purchase_quantity)\n        ]\n\n    def adjust_stock(self, product_id, delta, created_by=None, type=None):\n        from shuup.core.suppliers.base import StockAdjustmentType\n        adjustment_type = type or StockAdjustmentType.INVENTORY\n        return self.module.adjust_stock(product_id, delta, created_by=created_by, type=adjustment_type)\n\n    def update_stock(self, product_id):\n        return self.module.update_stock(product_id)\n\n    def update_stocks(self, product_ids):\n        return self.module.update_stocks(product_ids)\n\n\nSupplierLogEntry = define_log_model(Supplier)\n", "prediction": "class Supplier(models.Model, ModuleInterface, ShuupModel):\n    name = models.CharField(max_length"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list using Selection Sort.\n\n### Input:\n[3, 8, 5, 4, 1, 9, 6]\n\n", "label": "# Selection Sort in Python \ndef selectionSort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n\n# Test program\narr = [3, 8, 5, 4, 1, 9, 6]\nselectionSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "prediction": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate total electricity bill\n\n### Input:\nOne-off membership fee: $25.00\nNight rate(17 p.m - 7 am): $0.20 per kWh\nStandard rate: $0.30 per kWh\nTotal electricity used: 350 kWh\n\n", "label": "def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh):\n    one_off_fee = one_off\n    night_rate_fee = night_rate * total_kwh\n    standard_rate_fee = standard_rate * total_kwh\n    return one_off_fee + night_rate_fee + standard_rate_fee\n\none_off = 25.00\nnight_rate = 0.20\nstandard_rate = 0.30\ntotal_kwh = 350.00\n\nprint(\"Total electricity bill: $\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh)))", "prediction": "### Output:\nTotal electricity bill: $105.00"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to generate a random password.\n\n### Input:\n\n\n", "label": "\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)", "prediction": "def generate_password():\n    import random\n    import string\n    length = 8\n    password"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to collect data from Amazon. The script should extract product category, title, price, and rating from the Amazon home page.\n\n### Input:\nNot applicable\n\n", "label": "from bs4 import BeautifulSoup\nimport requests\n\n# specify url\nurl = 'https://www.amazon.com/'\n\n# query the website and return the html to the variable 'page'\npage = requests.get(url)\n\n# parse the html using beautiful soup and store in variable `soup`\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# select all products\nproducts = soup.find_all(class_='s-result-item')\n\n# iterate through each product\nfor product in products:\n category = product.find('h3').text\n title = product.find(attrs={'class':'a-size-medium a-color-base a-text-normal'}).text\n price = product.find(attrs={'class':'a-price-whole'}).text\n rating = product.find(attrs={'class':'a-icon-alt'}).text\n\n# print results\nprint('Category:', category);\nprint('Title:', title);\nprint('Price:', price);\nprint('Rating:', rating);", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Define the"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python class that captures person information\n\n### Input:\nName, Age, Gender, Nationality\n\n", "label": "class Person:\n    def __init__(self, name, age, gender, nationality):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.nationality = nationality\n \n    def __str__(self):\n        return 'Name: {}\\nAge: {}\\nGender: {}\\nNationality: {}'.format(\n            self.name, self.age, self.gender, self.nationality)", "prediction": "### Output:\nclass Person:\n    def __init__(self, name, age, gender, nationality"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python program below to add an if condition to determine if an input number is odd or even.\n\n### Input:\ndef odd_or_even(number):\n    # your code here\n\n", "label": "def odd_or_even(number):\n    # your code here\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "prediction": "if __name__ == '__main__':\n    number = int(input())\n    print(odd_or_even"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to optimize the given objective function.\n\n### Input:\nObjective Function: 3x2 + 8x + 7\n\n", "label": "def optimize_function(x):\n    return 3*x**2 + 8*x + 7\n\ndef objective_function(x):\n    return optimize_function(x)\n\ndef optimize():\n    optimal_x = 0\n    min_val = objective_function(optimal_x)\n\n    for x in range(1, 1000):\n        current_val = objective_function(x)\n        if current_val < min_val:\n            min_val = current_val\n            optimal_x = x\n\n    return optimal_x", "prediction": "def objective_function(x):\n    return 3*x**2 + 8*x + 7\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to convert a list of positive integers to a comma-separated string.\n\n### Input:\n[1, 2, 3, 4]\n\n", "label": "def convert_list_to_string(list): \n  string = \"\"\n  for num in list:\n    string += str(num) + \",\"\n  return string\n\nprint(convert_list_to_string([1, 2, 3, 4]))\n\n# Output: \"1,2,3,4,\"", "prediction": "### Output:\n1,2,3,4"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert an array of strings to an array of floats.\n\n### Input:\narr = [\"1.2\", \"2.3\", \"3.4\", \"4.5\"]\n\n", "label": "def string_to_float(arr):\n    return [float(x) for x in arr]", "prediction": "### Output:\n[1.2, 2.3, 3.4, 4"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to optimize a function based on the mean squared error metric.\n\n### Input:\ndef f(weights):\n cost = 0\n for i in range(len(weights)):\n cost += weights[i]**2\n return cost\n\n", "label": "import gradientDescent as GD\n\ndef optimize(weights):\n cost, gradient = GD.cost_function(f, weights)\n optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001)\n optimizer.run(cost, gradient)\n return optimizer.weights", "prediction": "def optimize(weights):\n return minimize(f, weights, method='nelder-mead')\n\nweights = ["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that sorts a roster of students by their grade.\n\n### Input:\nA roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]\n\n", "label": "def sort_by_grade(roster):\n    sorted_roster = sorted(roster, key=lambda x: x[1])\n    return sorted_roster\n\nif __name__ == \"__main__\":\n    roster = [(\"Person 1\", 75), (\"Person 2\", 82), (\"Person 3\", 95), (\"Person 4\", 76),\n              (\"Person 5\", 65), (\"Person 6\", 70), (\"Person 7\", 82), (\"Person 8\", 93),\n              (\"Person 9\", 68), (\"Person 10\",80)]\n    print(sort_by_grade(roster))", "prediction": "def sort_roster(roster):\n    return sorted(roster, key=lambda x: x[1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to insert and delete elements into a doubly linked list.\n\n### Input:\n\n\n", "label": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n        self.prev = None\n\nclass Doubly_Linked_List: \n  \n    def __init__(self): \n        self.head = None\n  \n    def insert(self, data): \n        new_node = Node(data) \n        if not self.head: \n            self.head = new_node \n        else: \n            new_node.next = self.head \n            self.head.prev = new_node \n            self.head = new_node\n\n    def delete(self, del_node): \n        if not self.head: \n            return None\n        if self.head == del_node: \n            self.head = self.head.next\n            self.head.prev = None\n        elif del_node.next: \n            del_node.next.prev = del_node.prev \n            del_node.prev.next = del_node.next \n        else: \n            del_node.prev.next = None", "prediction": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the average age of a group of people.\n\n### Input:\n[{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}]\n\n", "label": "people = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age / len(people)\n\nprint(\"Average age: {}\".format(average_age))", "prediction": "### Output:\nThe average age of the group is 28.67 years old."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a web scraper in Python that downloads some content from website www.example.com\n\n### Input:\n\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http://www.example.com').text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape the content\ncontent = soup.p\n\n# Save the content in a text file\nwith open('content.txt', 'w') as file:\n    file.write(content)", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_content(url):\n    page = requests.get(url"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate the following expression in Python.\n\n### Input:\n(4 + 6) * 5 - 8\n\n", "label": "44", "prediction": "### Output:\n28"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes a number as input and returns the factorial of the number.\n\n### Input:\n\n\n", "label": "def factorial(num):\n\tif num == 1 or num == 0:\n\t\treturn 1\n\telse:\n\t\treturn num * factorial(num-1)", "prediction": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a dictionary that keeps count of how many times each word appears in a given sentence.\n\n### Input:\n\"the quick brown fox jumps over the lazy dog\"\n\n", "label": "\"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence))", "prediction": "### Output:\n{'the': 2, 'quick': 1, 'brown': 1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to sum all the values of a dictionary.\n\n### Input:\ndictionary = { 'a': 1, 'b': 2, 'c': 3 }\n\n", "label": "def sum_dict(dict):\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\ndictionary = { 'a': 1, 'b': 2, 'c': 3 }\nprint(sum_dict(dictionary)) # 6", "prediction": "def sum_values(dictionary):\n    total = 0\n    for key in dictionary:\n        total +="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of objects and a property of each object. Can you create a Python program to output the value of the property of the first and last object?\n\n### Input:\n[\n { \"name\": \"Alice\" , \"age\": 24 },\n { \"name\": \"Bob\" , \"age\": 29 },\n { \"name\": \"Charlie\" , \"age\": 28 }\n]\n\n", "label": "nameFirst = 'Alice'\nnameLast = 'Charlie'\nageFirst = 24\nageLast = 28", "prediction": "### Output:\nAlice, Charlie"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the number of elements in a given array before the return value is -1.\n\n### Input:\nArray = [2, 3, -1, 5, 4, 7]\n\n", "label": "def countElements(Array): \n    count = 0\n    for i in Array: \n        if i != -1: \n            count = count + 1\n        else: \n            break\n    return count", "prediction": "### Output:\nThe number of elements in the array before the return value is -1 is 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to invert the keys and values of a dictionary in Python.\n\n### Input:\n{\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n}\n\n", "label": "def invert_dictionary(input_dict):\n    output_dict = {}\n    for key, value in input_dict.items():\n        output_dict[value] = key\n    return output_dict\n\ninverted_dict = invert_dictionary({\n    \"apple\": 3,\n    \"banana\": 4,\n    \"carrot\": 2\n})\n\nprint(inverted_dict) # {3: 'apple', 4: 'banana', 2: 'carrot'}", "prediction": "### Output:\n{\n    3: \"apple\",\n    4: \"banana\",\n    "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class hierarchy for an automobile system in Python.\n\n### Input:\nNot applicable\n\n", "label": "class Automobile:\n def __init__(self):\npass\n\nclass Car(Automobile):\n def __init__(self, make, model, color):\n self.make = make\n self.model = model\n self.color = color\n\nclass Truck(Automobile):\n def __init__(self, make, model, cargo_capacity):\n self.make = make\n self.model = model\n self.cargo_capacity = cargo_capacity\n\nclass SUV(Car, Truck):\n def __init__(self, make, model, color, cargo_capacity):\n super().__init__(make, model, color)\n self.cargo_capacity = cargo_capacity", "prediction": "### Output:\nclass Car:\n    def __init__(self, make, model, year):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Selenium script in Python to automate the login process in a given website.\n\n### Input:\nTarget website: www.example.com\n\n", "label": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http://www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close()", "prediction": "import time\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to classify data\n\n### Input:\nClassify the given dataset [5, 10, 25, 11, 14, 20] into two categories - numbers below 15 and numbers above 15.\n\n", "label": "def classify_number_data(data):\n    numbers_below_15 = []\n    numbers_above_15 = []\n\n    for number in data:\n        if number <= 15:\n            numbers_below_15.append(number)\n        else:\n            numbers_above_15.append(number)\n    \n    return numbers_below_15, numbers_above_15", "prediction": "### Output:\ndef classify_data(dataset):\n    for i in dataset:\n        if i < 15"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of 8 characters in Python\n\n### Input:\n\n\n", "label": "import random\nimport string\n\nlength = 8\n\nchars = string.ascii_letters + string.digits + string.punctuation\npassword = ''.join(random.choice(chars) for _ in range(length))\n\nprint(password)", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a list of integerNums and returns a new list with elements which are divisible by 3.\n\n### Input:\n[3,4,6,9,10]\n\n", "label": "def divisible_by_3(intNums):\n    result = []\n    for i in intNums:\n        if i % 3 == 0:\n            result.append(i)\n    return result\n\nintNums = [3,4,6,9,10]\nprint(divisible_by_3(intNums)) # Output: [3, 6, 9]", "prediction": "### Output:\n[3,6,9]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that finds the occurrences of 'cat' in a given sentence.\n\n### Input:\nSentence: \u201cThe cat sat on the mat.\u201d\n\n", "label": "def find_occurrences(sentence):\n    # Empty list to store indices of occurrence\n    indices = []\n\n    # get length of sentence\n    l = len(sentence)\n \n    # iterate to go through the sentence\n    for i in range(l):\n        # if at any point a substring from i to i+3 is equal to \"cat\"\n        if sentence[i:i+3] == \"cat\":\n            # add i to list of indices\n            indices.append(i)\n \n    # return the list of indices\n    return indices\n\noccurrences = find_occurrences(\"The cat sat on the mat.\")\nprint(\"Indices of occurrences:\", occurrences)", "prediction": "def find_cat(sentence):\n    count = 0\n    for word in sentence.split():\n        if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of all the values in a dictionary\n\n### Input:\nd = {'a': 10, 'b': 20, 'c':30}\n\n", "label": "def sum_values(d):\n    sum = 0\n    for value in d.values():\n        sum += value\n    return sum\n\ntotal = sum_values(d)\nprint(total) # 60", "prediction": "def sum_values(d):\n    return sum(d.values())\n\nprint(sum_values(d))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code snippet below in Python so that it takes advantage of list comprehension.\n\n### Input:\nitems = [1, 2, 3, 4, 5]\nnew_items = []\nfor item in items:\n    new_items.append(item**2)\n\n", "label": "items = [1, 2, 3, 4, 5]\nnew_items = [item**2 for item in items]", "prediction": "### Output:\nitems = [1, 2, 3, 4, 5]\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program to make a simple quiz game. The program should ask 3 questions and when all of the questions have been answered it should provide feedback depending on the number of correct answers.\n\n### Input:\nquestion_1_text = \"What color is the sky?\"\nquestion_1_possible_answers = [\"blue\", \"green\", \"red\"]\nquestion_1_correct_answer = \"blue\"\n\nquestion_2_text = \"What shape is the Earth?\"\nquestion_2_possible_answers = [\"square\", \"sphere\", \"triangle\"]\nquestion_2_correct_answer = \"sphere\"\n\nquestion_3_text = \"What is the capital of France?\"\nquestion_3_possible_answers = [\"Paris\", \"London\", \"Madrid\"]\nquestion_3_correct_answer = \"Paris\"\n\n", "label": "questions = [\n {\n 'question': question_1_text,\n 'possible_answers': question_1_possible_answers,\n 'correct_answer': question_1_correct_answer\n },\n {\n 'question': question_2_text,\n 'possible_answers': question_2_possible_answers,\n 'correct_answer': question_2_correct_answer\n },\n {\n  'question': question_3_text,\n  'possible_answers': question_3_possible_answers,\n  'correct_answer': question_3_correct_answer\n }\n]\n\ncorrect_answers = 0\n\nfor question in questions:\n print(question['question'])\n for answer in question['possible_answers']:\n print(answer)\n user_answer = input('Your answer: ')\n if user_answer == question['correct_answer']:\n correct_answers += 1\n\nif correct_answers == 3:\n print('You got all 3 questions right!')\nelif correct_answers == 2:\n print('You got 2 questions right!')\nelif correct_answers == 1:\n print('You got 1 question right!')\nelse:\n print('You got no questions right!')", "prediction": "def quiz():\n    score = 0\n    for question in [question_1_text, question"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a dictionary by key\n\n### Input:\n\n\n", "label": "def sort_dict_by_key(sample):\n    # Create a sorted list of keys\n    sorted_keys = sorted(sample.keys())\n    # Iterate over the sorted sequence\n    for key in sorted_keys:\n        # Generate key-value pair\n        print (key, sample[key])\n\nsample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4}\nsort_dict_by_key(sample)", "prediction": "def sort_dict_by_key(d):\n    return dict(sorted(d.items(), key=lambda item: item["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that returns the maximum value between two numbers in Python.\n\n### Input:\n\n\n", "label": "def get_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "prediction": "def max_num(a, b):\n    if a > b:\n        return a\n    else:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes in two numbers and prints out the first number divided by the second number.\n\n### Input:\n3, 5\n\n", "label": "def divide(a,b):\n    return a/b\n\nresult = divide(3,5)\nprint(result)", "prediction": "def divide(a, b):\n    return a / b\n\nprint(divide(3, 5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list of powers of x for any given x.\n\n### Input:\nx = 2\n\n", "label": "def power_list(x):\n    return [x**i for i in range(16)]", "prediction": "def powers(x):\n    return [x**i for i in range(10)]\n\nprint(powers"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that will determine the closeness of a given color to a target color.\n\n### Input:\n\n\n", "label": "import colorsys\n\ndef get_closeness_to_target(source_rgb, target_rgb):\n    \"\"\"\n    Compute the closeness of a given color to a target color\n    \"\"\"\n    source_hls = colorsys.rgb_to_hls(*source_rgb)\n    target_hls = colorsys.rgb_to_hls(*target_rgb)\n\n    # Compute Euclidean distance between the two color's attributes\n    h_dist = (source_hls[0] - target_hls[0])**2\n    l_dist = (source_hls[1] - target_hls[1])**2\n    s_dist = (source_hls[2] - target_hls[2])**2\n\n    closeness = (h_dist + l_dist + s_dist)**0.5\n    return closeness", "prediction": "def color_closeness(color, target):\n    \"\"\"\n    This function determines the closeness of a"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the area of a triangle using its three sides.\n\n### Input:\nSide One: 3\nSide Two: 4\nSide Three: 5\n\n", "label": "def triangleArea(a, b, c):\n # Calculate the semi-perimeter of the triangle\n s = (a + b + c) / 2\n \n # Calculate the area using Heron's formula\n area = (s*(s - a)*(s - b)*(s - c))**0.5\n \n return area\n\ntriangleArea(3,4,5) # 6.0", "prediction": "def area_of_triangle(side_one, side_two, side_three):\n    s = (side_one +"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes two integers as parameters, and return the greater of the two numbers.\n\n### Input:\n\n\n", "label": "def greater_of_two_numbers(int1, int2):\n    if int1 > int2:\n        return int1\n    else:\n        return int2", "prediction": "def greater(a, b):\n    if a > b:\n        return a\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program that searches for all prime numbers from 2 to n.\n\n### Input:\ndef find_all_primes(n):\n primes = []\n for i in range(2,n+1):\n is_prime = True\n for j in range(2,i):\n if i % j == 0:\n is_prime = False\n break\n if is_prime:\n primes.append(i)\n return primes\n\n", "label": "def find_all_primes(n):\n primes = []\n for i in range(2,n+1):\n if all(i % j != 0 for j in range(2, i)):\n primes.append(i)\n return primes\n\n//Time Complexity: \n// Worst Case: O(n2),\n// Best Case: O(nlog n),\n// Average Case: O(nlog n).", "prediction": "def find_all_primes(n):\n primes = []\n for i in range(2,n+1):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all elements of a given list except largest and smallest element.\n\n### Input:\nnumbers = [3, 4, 6, 2, 8, 9, 1]\n\n", "label": "def get_min_max(numbers):\n max_num = max(numbers)\n min_num = min(numbers)\n new_list = []\n for i in numbers:\n  if i == max_num or i == min_num:\n   new_list.append(i)\n return new_list", "prediction": "def remove_all(numbers):\n    numbers.sort()\n    numbers.pop(1)\n    return numbers\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write an algorithm in Python to check if a given variable is palindrome?\n\n### Input:\n\n\n", "label": "def is_palindrome(variable):\n  var = variable.lower()\n  rev_var = var[::-1]\n  if (var == rev_var):\n    return True\n  else:\n    return False", "prediction": "def is_palindrome(s):\n    return s == s[::-1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following piece of code in Python, that calculates the sum of two variables.\n\n### Input:\nint x = 2;\nint y = 4;\nint sum = x + y;\n\n", "label": "x = 2\ny = 4\n\nsum = x + y\nprint(sum) # 6", "prediction": "### Output:\nx = 2\ny = 4\nsum = x + y"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that uses a library of your choice to parse a HTML table into a list of objects.\n\n### Input:\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Location</th>\n  </tr>\n  <tr>\n    <td>Jane Doe</td>\n    <td>22</td>\n    <td>Paris</td>\n  </tr>\n  <tr>\n    <td>John Smith</td>\n    <td>25</td>\n    <td>London</td>\n  </tr>\n</table>\n\n", "label": "import bs4\nfrom bs4 import BeautifulSoup\n\nhtml = '''<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Location</th>\n  </tr>\n  <tr>\n    <td>Jane Doe</td>\n    <td>22</td>\n    <td>Paris</td>\n  </tr>\n  <tr>\n    <td>John Smith</td>\n    <td>25</td>\n    <td>London</td>\n  </tr>\n</table>'''\n\nsoup = BeautifulSoup(html, 'html.parser')\ntable = soup.find('table')\nth = table.find_all('th')\nheaders = [i.text for i in th]\n\ndata = []\nfor tr in table.find_all('tr'):\n  tds = tr.find_all('td')\n  row = [i.text for i in tds]\n  if row:\n    data.append(dict(zip(headers, row)))\n\nprint(data)", "prediction": "### Output:\n[\n  {\n    \"name\": \"Jane Doe\",\n    \"age\": 22"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify text elements in a Python program into function names and variable names.\n\n### Input:\ndef hello_world():\n    print(\"Hello World!\")\n\n", "label": "Function Name: hello_world\n\nVariable Name: None", "prediction": "def hello_world():\n    print(\"Hello World!\")"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON string, write a Python program that prints out the values for each key.\n\n### Input:\n{\"FirstName\": \"John\", \"LastName\": \"Smith\"}\n\n", "label": "import json\n\ndata_string = '{\"FirstName\": \"John\", \"LastName\": \"Smith\"}'\ndata = json.loads(data_string)\n\nfor key, value in data.items(): \n    print(\"{} = {}\".format(key, value))", "prediction": "### Output:\nJohn\nSmith"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the area of a triangle given its base and height.\n\n### Input:\n\n\n", "label": "def triangle_area(base, height):\n  return (base * height) / 2", "prediction": "def area_of_triangle(base, height):\n    return (base * height) / 2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to design a game of tic-tac-toe.\n\n### Input:\nN/A\n\n", "label": "# Create Tic-Tac-Toe game\n\n# Initialize board\nboard = ['-' for x in range(9)]\n\n# Function to choose marker\ndef chose_marker():\n    marker = ''\n\n    while marker != 'X' and marker != 'O':\n        marker = input('Player 1 - Do you want to be X or O? ').upper()\n\n    if marker == 'X':\n        return ('X', 'O')\n    else:\n        return ('O', 'X')\n\n# Function to display board\ndef display_board():\n    print('   |   |')\n    print(' ' + board[0] + ' | ' + board[1] + ' | ' + board[2])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[3] + ' | ' + board[4] + ' | ' + board[5])\n    print('   |   |')\n    print('-----------')\n    print('   |   |')\n    print(' ' + board[6] + ' | ' + board[7] + ' | ' + board[8])\n    print('   |   |')\n\n# Function to check if the game is won\ndef win_check(mark):\n    return ((board[0] == mark and board[1] == mark and board[2] == mark) or\n    (board[3] == mark and board[4] == mark and board[5] == mark) or \n    (board[6] == mark and board[7] == mark and board[8] == mark) or\n    (board[0] == mark and board[3] == mark and board[6] == mark) or \n    (board[1] == mark and board[4] == mark and board[7] == mark) or \n    (board[2] == mark and board[5] == mark and board[8] == mark) or\n    (board[0] == mark and board[4] == mark and board[8] == mark) or \n    (board[2] == mark and board[4] == mark and board[6] == mark))\n\n# Function to check if board is full\ndef is_board_full():\n    if '-' in board:\n        return False\n    else:\n        return True\n\n# Function to take player inputs\ndef take_input(mark):\n    position = 0\n\n    while position not in range(1,10) or board[position-1] != '-':\n        position = int(input('Choose your position (1-9): '))\n    \n    board[position-1] = mark\n\n# Main function\ndef play_game():\n    print('Welcome to tic-tac-toe!')\n\n    # initialize the board and player markers\n    board_init()\n\n    player_marker, bot_marker = choose_marker()\n    turn = 'Player 1'\n    over = False\n\n    while not over:\n        if turn == 'Player 1':\n\n            # Display board\n            display_board()\n\n            # Take player 1 input\n            take_input(player_marker)\n\n            # Check if player won\n            if win_check(player_marker):\n                display_board()\n                print('Congratulations! You won!')\n                over = True\n            else:\n                if is_board_full():\n                    display_board()\n                    print('The game is a draw!')\n                    break\n                else:\n                    turn = 'Player 2'\n\n        else:\n            # Take player 2 input\n            take_input(bot_marker)\n\n            # Check if bot won\n            if win_check(bot_marker):\n                display_board()\n                print('Player 2 has won!')\n                over = True\n            else:\n                if is_board_full():\n                    display_board()\n                    print('The game is a draw!')\n                    break\n                else:\n                    turn = 'Player 1'\n\n#Main function\nplay_game()", "prediction": "### Output:\nimport random\nimport time\nimport os\nimport sys\nimport math\nimport random"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic ticket reservation system using Python dictionaries.\n\n### Input:\n\n\n", "label": "# Create a dictionary to store ticket information\ntickets = {}\n\n# Function to book ticket\ndef book_ticket(name, ticket_type, ticket_price):\n\t# Check if the ticket exists\n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] -= 1\n        tickets[ticket_type]['ticket_holders'].append(name)\n    else:\n        tickets[ticket_type] = {\n            'availability': 10 - 1,\n            'price': ticket_price,\n            'ticket_holders': [name]\n        }\n\n# Function to cancel ticket\ndef cancel_ticket(name, ticket_type): \n    if ticket_type in tickets:\n        tickets[ticket_type]['availability'] += 1\n        tickets[ticket_type]['ticket_holders'].remove(name)", "prediction": "def ticket_reservation_system():\n    \"\"\"\n    This function creates a basic ticket reservation system using Python dictionaries.\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code snippet to create a function for predicting the most likely outcome of a classification task.\n\n### Input:\nNot applicable\n\n", "label": "def predict(X_test):\n    predictions = []\n    for test_sample in X_test:\n        predictions.append(most_likely_outcome(test_sample))\n        \n    return predictions\n\ndef most_likely_outcome(test_sample):\n    probabilities = model.predict_proba(test_sample)\n    max_prob = 0.0\n    index = -1\n    for i in range(len(probabilities)):\n        if probabilities[i] > max_prob:\n            max_prob = probabilities[i]\n            index = i\n    \n    return index", "prediction": "### Output:\ndef predict_outcome(data):\n    # Import necessary libraries\n    import pandas as pd"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of integers and returns the sum of the even numbers in the list.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n", "label": "def sum_even_integers(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total\n\nprint(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12", "prediction": "def sum_even_numbers(numbers):\n    \"\"\"Return the sum of the even numbers in the list.\"\"\"\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random list containing n numbers from 0 to n-1.\n\n### Input:\n\n\n", "label": "import random\n\ndef generate_random_list(n):\n return random.sample(range(n), n)", "prediction": "def random_list(n):\n    return [random.randint(0, n-1) for _ in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python which can sort an array of numbers in ascending order.\n\n### Input:\n\n\n", "label": "def insertion_sort(arr): \n    #Iterationg through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        \n        while j >= 0 and arr[j] > key: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr", "prediction": "def sort_array(arr):\n    for i in range(len(arr)):\n        for j in range(i+"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to divide a given list into n equal lists.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\n", "label": "# Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]]", "prediction": "### Output:\n[[1, 2, 3], [4, 5], [6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the most common word in the given string.\n\n### Input:\nstring = \"This is a sample sentence to find the most common word\"\n\n", "label": "def most_common_word(string):\n    string_list = string.split()\n    word_dict = {}\n    for word in string_list:\n        word_dict[word] = word_dict.get(word, 0) + 1\n    max_count = 0\n    most_common_word = None\n    for word, count in word_dict.items():\n        if count > max_count:\n            max_count = count\n            most_common_word = word\n    return most_common_word\n\nprint(most_common_word(string))\n# Output: the", "prediction": "def most_common_word(string):\n    words = string.split()\n    counts = {}\n    for word in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python dictionary using the given lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n", "label": "{1: 4, 2: 5, 3: 6}", "prediction": "### Output:\ndict1 = {1: 4, 2: 5, 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the most common words in a given text. Input should be given as a string and output should be a list of words in descending order of frequency.\n\n### Input:\ntext = 'This is a text to find the most common words in the given text. The output should be a list of words in descending order of frequency'\n\n", "label": "from collections import Counter\n\ndef find_most_common_words(text):\n words = text.split()\n counter = Counter(words)\n return counter.most_common()\n\nprint(find_most_common_words(text))\n\n# Output: [('a', 2), ('the', 2), ('in', 2), ('of', 2), ('most', 1), ('This', 1), ('is', 1), ('text', 1), ('find', 1), ('common', 1), ('words', 1), ('given', 1), ('output', 1), ('should', 1), ('be', 1), ('list', 1), ('descending', 1), ('order', 1), ('frequency', 1)]", "prediction": "def most_common_words(text):\n    words = text.split()\n    word_count = {}\n    for word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string which humans can read, write a Python program to create a list that contains all the words in the string in reverse order\n\n### Input:\ninput_string = \"I love to write code\"\n\n", "label": "input_words = input_string.split()\noutput_words = [word[::-1] for word in input_words]\nprint(output_words)", "prediction": "def reverse_words(input_string):\n    return input_string.split()[::-1]\n\nprint(reverse_words(input_string"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a string as an argument and returns a string with all characters sorted in alphabetical order.\n\n### Input:\n\n\n", "label": "def sort_string(string):\n sorted_string = sorted(string)\n return ''.join(sorted_string)", "prediction": "def sort_string(string):\n    return \"\".join(sorted(string))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of 10 integers in Python.\n\n### Input:\n\n\n", "label": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "prediction": "def create_array():\n    return [1, 2, 3, 4, 5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hashmap data structure in Python that stores keys and values.\n\n### Input:\n\n\n", "label": "my_dict = {}\n\n# Adding key-value pairs\nmy_dict['a'] = 'apple'\nmy_dict['b'] = 'banana'\nmy_dict['c'] = 'cat'\n\n# Retrieving values\napple = my_dict['a']\nbanana = my_dict['b']\ncat = my_dict['c']\n\nprint(apple, banana, cat)", "prediction": "def create_hashmap():\n    return dict()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to check whether a telephone number is valid or not based on its length and the presence of a '9' as the second character.\n\n### Input:\ntelephone_number = '370641'\n\n", "label": "def check_telephone_number(telephone_number):\n    is_valid = False\n \n    if len(telephone_number) == 6 and telephone_number[1] == '9':\n        is_valid = True\n    return is_valid\n\nif __name__ == '__main__':\n    telephone_number = '370641'\n    is_valid = check_telephone_number(telephone_number)\n    print(is_valid)", "prediction": "def check_telephone_number(telephone_number):\n    if len(telephone_number) == 7 and"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 4 character long string in Python.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\ndef random_string(string_length=4):\n letters = string.ascii_lowercase\n return ''.join(random.choice(letters) for i in range(string_length))\n\nrandom_string()", "prediction": "### Output:\nimport random\nprint(\"\".join(random.choices(string.ascii_uppercase + string.digits"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Algorithm into Python code.\n\nInput: two numbers\n\nAlgorithm:\n1. Check if the two numbers are equal.\n2. If true, return 0.\n3. Else check the which is higher.\n4. Return 1 if the first number is higher than the second one.\n5. Return -1 otherwise.\n\n### Input:\nnum1 : 5\nnum2 : 10\n\n", "label": "def compare_numbers(num1, num2):\n if num1 == num2:\n  return 0\n elif num1 > num2:\n  return 1\n else:\n  return -1\n\nnum1 = 5\nnum2 = 10\nresult = compare_numbers(num1, num2)\n\nprint(result)", "prediction": "def compare(num1, num2):\nif num1 == num2:\nreturn 0\nelif"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm that sorts a list of strings alphabetically in Python.\n\n### Input:\n[\"list\", \"of\", \"unsorted\", \"strings\"]\n\n", "label": "def sortAlphabetically(stringList):\n  sortedList = sorted(stringList)\n  return sortedList\n\nunsortedList = [\"list\", \"of\", \"unsorted\", \"strings\"]\nsortedList = sortAlphabetically(unsortedList)\n\nprint(sortedList)", "prediction": "def sort_strings(strings):\n    return sorted(strings)\n\nprint(sort_strings([\"list\", \"of\", \""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print the name and age of all customers in a list.\n\n### Input:\ncustomers = [\n {'name': 'John', 'age': 25},\n {'name': 'Bob', 'age': 40},\n {'name': 'Alice', 'age': 10},\n {'name': 'Mark', 'age': 35},\n]\n\n", "label": "for customer in customers:\n  print(f\"Name: {customer['name']}, Age: {customer['age']}\")", "prediction": "for customer in customers:\n print(customer['name'], customer['age'])"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that consists of a class with a method to compute the average of the elements in a list.\n\n### Input:\n[3,4,5,6,7]\n\n", "label": "\"\"\"\nPython program with a class to compute the average of the elements in a list\n\"\"\"\n\nclass AverageCalculator():\n    def __init__(self, numbers):\n        self.numbers = numbers\n        \n    def get_average(self):\n        total = 0\n        \n        for number in self.numbers:\n            total += number\n        \n        return total/len(self.numbers)\n        \nif __name__ == '__main__':\n    numbers = [3, 4, 5, 6, 7]\n    average_calculator = AverageCalculator(numbers)\n    print(average_calculator.get_average()) # 5.0", "prediction": "def average(list):\n    sum = 0\n    for i in list:\n        sum += i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect cycle in a linked list using Floyd's Cycle Detection Algorithm.\n\n### Input:\n\n\n", "label": "def detect_cycle(head): \n    slow_p = head \n    fast_p = head \n    while(slow_p and fast_p and fast_p.next) : \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p : \n            return True\n    return False", "prediction": "def detect_cycle(head):\n    slow = head\n    fast = head\n    while fast and fast"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Django script to create a new Django project with an app called 'users'.\n\n### Input:\n<no input>\n\n", "label": "# Create the project\ndjango-admin startproject mysite\n\n# Move to the project directory\ncd mysite\n\n# Create the users app\npython manage.py startapp users\n\n# Update the settings\nvi  mysite/settings.py\n\n# Add 'users' to the 'INSTALLED_APPS' list\nINSTALLED_APPS = [\n    ...\n    'users',\n]\n\n# Create the database\npython manage.py migrate\n\n# Create the models\nvi  users/models.py\n\n# Add the User model\nclass User(models.Model):\n    username = models.CharField(max_length=50)\n    email = models.EmailField()\n    name = models.CharField(max_length=50)\n\n# Create the admin user\npython manage.py createsuperuser\n\n# Run the server\npython manage.py runserver", "prediction": "### Output:\n```python\nfrom django.conf import settings\nfrom django.core.management import execute_from_command"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which will take a list of numbers as input and return a list but with each value doubled.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n", "label": "def double_list(lst):\n    new_list = []\n    for num in lst:\n        new_list.append(num * 2)\n    return new_list\n\nmy_list = [1, 2, 3, 4, 5]\n\ndouble_list(my_list) #[2, 4, 6, 8, 10]", "prediction": "### Output:\n[2, 4, 6, 8, 10]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the performance of this Python function by adding caching or other techniques.\n\n### Input:\ndef add_two_numbers(n1, n2):\n return n1 + n2\n\n", "label": "import functools\n\n@functools.lru_cache(maxsize=None)\ndef add_two_numbers(n1, n2):\n return n1 + n2", "prediction": "def add_two_numbers(n1, n2):\n if n1 in cache:\n return cache[n1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.\n\n### Input:\n10\n\n", "label": "def fibonacci(n):\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr[:n+1]\n\nprint(fibonacci(10))", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to multiply two given lists containing integers of the same size.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n", "label": "# Create a new list with the elements of both lists \nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Multipliy each element of 2 lists and store in the 3rd list \nlist3 = [] \nfor x, y in zip(list1, list2): \n    list3.append(x*y) \n\n# Print the result \nprint(list3)\n\n# Output \n[4, 10, 18]", "prediction": "def multiply_list(list1, list2):\n    return [x * y for x, y in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of strings using the length of the strings instead of alphabetically.\n\n### Input:\n\n\n", "label": "def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list", "prediction": "def sort_by_length(strings):\n    return sorted(strings, key=len)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge two dictionaries into one using Python.\n\n### Input:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\n", "label": "def merge_dictionaries(dict1, dict2):\n    res = {**dict1, **dict2} \n    return res\n\nprint(merge_dictionaries(dict1, dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "prediction": "dict1.update(dict2)\nprint(dict1)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python code to remove all the duplicated elements from a list.\n\n### Input:\n\n\n", "label": "def remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list", "prediction": "def remove_duplicates(my_list):\n    \"\"\"Remove all the duplicated elements from a list.\"\"\"\n    unique_elements"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that takes two sorted lists as input and merges them\n\n### Input:\nlist1 = [2, 5, 7]\nlist2 = [3, 4, 6]\n\n", "label": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    \n    while len(list1) > 0 and len(list2) > 0:\n        if list1[0] < list2[0]:\n            merged_list.append(list1[0])\n            list1.pop(0)\n        else:\n            merged_list.append(list2[0])\n            list2.pop(0)\n    \n    if len(list1) > 0:\n        merged_list += list1\n    else:\n        merged_list += list2\n    \n    return merged_list\n\nmerged_list = merge_sorted_lists(list1, list2)\nprint(merged_list)", "prediction": "def merge(list1, list2):\n    merged_list = []\n    i = 0\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the maximum size of a subset such that no three elements in the subset are in arithmetic progression.\n\n### Input:\n[1,2,4,7,8,11,14,15]\n\n", "label": "def findMaxSubset(arr): \n    n = len(arr) \n    dp = [[True for i in range(n)] for i in range(n)] \n  \n    for l in range(n - 2, 0, -1): \n        for i in range(n - l): \n            j = l + i \n            if (arr[j]-arr[i] == arr[j-1] - arr[i+1]): \n                dp[i][j] = False \n            else: \n                flag = True\n                for x in range(i,j): \n                    if (dp[i][x] == False and dp[x+1][j] == False): \n                        flag=False\n                        maxLength = max(maxLength, (x-i+1)) \n  \n    return maxLength \n  \narr = [1, 2, 4, 7, 8, 11, 14, 15] \nprint(findMaxSubset(arr)) \n\n##\n5. Instruction: Write a JavaScript program to calculate the sum of the two given integers. If the two values are same, then return triple their sum.\n5. Input:\n2, 3\n5. Output:\nfunction calculateSum(a, b) {\n let sum = a + b;\n if (a === b) {\n sum *= 3;\n }\n return sum;\n}\n\nlet result = calculateSum(2, 3);\nconsole.log(result);", "prediction": "def maxSubsetSumNoThreeInArithmeticProgression(arr):\n    n = len(arr)\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function ``squareSum`` in python which will take a list of numbers as arguments and calculate their sum of squares.\n\n### Input:\nnumbers=[1, 2, 3, 4, 5]\n\n", "label": "def squareSum(numbers):\n    sum_of_squares = 0\n    for num in numbers:\n        sum_of_squares += num**2\n    return sum_of_squares", "prediction": "def squareSum(numbers):\n    sum = 0\n    for number in numbers:\n        sum +="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a trading strategy using Python to maximize profits while minimizing risks.\n\n### Input:\n\n\n", "label": "def trading_strategy(portfolio):\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0Function to design a trading strategy using Python to maximize profits while minimizing risks\n\n\u00a0\u00a0\u00a0\u00a0Arguments:\n\u00a0\u00a0\u00a0\u00a0portfolio -- current portfolio of the trader\n\n\u00a0\u00a0\u00a0\u00a0Returns:\n\u00a0\u00a0\u00a0\u00a0new_portfolio -- new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\n\u00a0\u00a0\u00a0\u00a0# Initialize the new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0new_portfolio = portfolio.copy()\n \n\u00a0\u00a0\u00a0\u00a0# Loop through all the stocks in the portfolio\n\u00a0\u00a0\u00a0\u00a0for stock in portfolio:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the current price of the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price = get_price(stock)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the risk of buying the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0risk = get_risk(stock)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the expected return of buying the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return_expected = get_expected_return(stock, price)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the risk/reward ratio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0risk_reward = return_expected/risk\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# If the risk/reward ratio is greater than 1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# then buy the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if risk_reward > 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Calculate the amount to buy\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0amount = calculate_amount_to_buy(portfolio, price, risk)\n coy\u0013\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Buy the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_portfolio = buy_stock(new_portfolio, stock, amount)\n \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Else, sell the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Sell the stock\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_portfolio = sell_stock(new_portfolio, stock)\n\n\u00a0\u00a0\u00a0\u00a0# return the new and improved portfolio\n\u00a0\u00a0\u00a0\u00a0return new_portfolio", "prediction": "def trading_strategy(data):\n    \"\"\"\n    This function takes in a pandas dataframe and returns a trading strategy"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to fetch the first character of a given string in Python.\n\n### Input:\n\n\n", "label": "string = 'example'\n\nfirst_char = string[0]\n\nprint(first_char)", "prediction": "def first_char(string):\n    return string[0]\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate documentation in HTML format for a given Python solution.\n\n### Input:\nSolution:\ndef add_item(item_list, new_item):\n item_list.append(new_item)\n return\n\n", "label": "def generate_html_doc(solution):\n html = \"<html>\\n<head>\\n<title>Python Documentation</title>\\n</head>\\n<body>\\n\\n<h1>Solution</h1>\\n\\\n<pre>\\n\"\n html += solution + \"\\n</pre>\\n\\n</body>\\n</html>\"\n return html", "prediction": "def remove_item(item_list, item_to_remove):\n item_list.remove(item_to_remove)\n return\n\ndef"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the minimum number of steps required to make all array elements equal.\n\n### Input:\narr = [2, 3, 6, 8]\n\n", "label": "def min_steps(arr):\n    min_step = 0\n    min_val = min(arr)\n    for i in range(len(arr)):\n        min_step += arr[i] - min_val \n    \n    return min_step", "prediction": "def minSteps(arr):\n    n = len(arr)\n    minEle = min(arr)\n    steps"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to create a class which creates an empty dictionary with the given keys.\n\n### Input:\n\"name, age\"\n\n", "label": "class EmptyDictionary:\n    def __init__(self, keys):\n        self.keys = [k.strip() for k in keys.split(\",\")]\n        self.dictionary = {k: None for k in self.keys}\n            \n    def get_dictionary(self):\n        return self.dictionary", "prediction": "### Output:\nclass CreateDictionary:\n    def __init__(self, keys):\n        self.keys ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an algorithm in Python for predicting the price of a stock given historical data and the current market conditions.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# load the dataset\ndataset = pd.read_csv('stock_data.csv')\n\n# Exploratory data analysis\ndataset.describe()\n\nsns.heatmap(dataset.corr(), annot=True)\n\n# Create feature and target variables\nX = dataset.iloc[:, 1:-1]\ny = dataset.iloc[:, -1]\n\n# Split the data into train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)\n\n# Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# Train model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# Test the model\ny_pred = regressor.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)", "prediction": "### Output:\ndef predict_stock_price(historical_data, current_market_conditions):\n    # Calculate the average"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the number of possible permutations of a string using the following Python function.\n\n### Input:\nword = \"helloworld\"\n\n", "label": "def factorial(string): \n   len_string = len(string) \n   permutations = 1\n   for i in range(1, len_string + 1): \n      permutations *= i \n   return permutations \n\nresult = factorial(word) \nprint(result)", "prediction": "def permutations(word):\n    if len(word) == 1:\n        return [word]\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to return the nth-largest element from a binary search tree.\n\n### Input:\n\n\n", "label": "def nth_largest(root, n):\n if root is None or n <= 0:\n return -1\n \n stack = []\n while root or stack:\n while root:\n stack.append(root)\n root = root.right\n node = stack.pop()\n n -= 1\n \n if n == 0:\n break\n root = node.left\n \n return node.data", "prediction": "def nth_largest_element(self, n):\n    if n > self.size:\n        return None\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate the first N Fibonacci numbers.\n\n### Input:\nN = 10\n\n", "label": "def fibonacci_numbers(n):\n result = []\n a, b = 0, 1\n while a < n:\n result.append(a)\n a, b = b, a+b\n return result\n\nn = 10\nfibonacci = fibonacci_numbers(n)\n\nprint(fibonacci)\n\n# Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    for i in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, use the re module to remove the HTML tags from a given string.\n\n### Input:\nString: <b>This is a bold string</b>\n\n", "label": "import re\n\nstring = \"<b>This is a bold string</b>\"\n\nclean_string = re.sub(r'<[^>]*>', '', string)\n\nprint(clean_string)", "prediction": "### Output:\nThis is a bold string"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game of rock, paper, scissors against the computer by creating a python program that randomly chooses from the three choices.\n\n### Input:\n\n\n", "label": "from random import randint\n\ndef rock_paper_scissors():\n    moves = [\"rock\", \"paper\", \"scissors\"]\n    player_move = input(\"Choose rock, paper, or scissors: \")\n    comp_move = moves[randint(0,2)]\n    print(f\"Computer's move is {comp_move}\")\n    if (player_move == comp_move):\n        print(\"It's a tie!\")\n    elif (player_move == \"rock\" and comp_move == \"scissors\"): \n        print(\"You win!\")\n    elif (player_move == \"rock\" and comp_move == \"paper\"): \n        print(\"Computer wins!\")\n    elif (player_move == \"paper\" and comp_move == \"scissors\"): \n        print(\"Computer wins!\")\n    elif (player_move == \"paper\" and comp_move == \"rock\"): \n        print(\"You win!\")\n    elif (player_move == \"scissors\" and comp_move == \"rock\"): \n        print(\"Computer wins!\")\n    elif (player_move == \"scissors\" and comp_move == \"paper\"): \n        print(\"You win!\")", "prediction": "import random\nimport time\n\ndef game():\n    print(\"Welcome to the game of rock, paper"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to get a list of the top 20 Reddit posts from a given subreddit.\n\n### Input:\n\n\n", "label": "import requests\nimport json\n\n# Get the response from reddit\nurl = \"https://www.reddit.com/r/dataisbeautiful/top/.json\"\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\"}\nresponse = requests.get(url, headers=headers, allow_redirects=False)\ndata = json.loads(response.text)\n\n# Get the list of the top 20 posts\npost_list = data['data']['children']\ntop_20_posts = [post['data']['title'] for post in post_list[:20]]\n\nprint(top_20_posts)", "prediction": "import praw\nimport pandas as pd\nfrom datetime import datetime\n\ndef get_top_posts(subreddit,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python which takes in a string and returns the number of vowels it has.\n\n### Input:\nstring=\"hello world\"\n\n", "label": "def countVowels(string):\n    \n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for char in string:\n        if char in vowels:\n            count += 1\n    \n    return count", "prediction": "def count_vowels(string):\n    vowels = \"aeiou\"\n    count = 0\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python that calculates the total surface area of a cube.\n\n### Input:\n\n\n", "label": "def cube_surface_area(side):\n    \"\"\" \n    Calculate and return the total surface area of a cube \n    given the side length.\n    \"\"\"\n    return 6 * side**2", "prediction": "def cube_surface_area(side):\n    return 6 * side ** 2\n\nside = float(input"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that can receive a list of integers and return a list of tuples with consecutive numbers.\n\n### Input:\n[1, 2, 3, 7, 8, 9, 10]\n\n", "label": "def get_consecutive(arr):\n    result = []\n    i = 0\n    while i < len(arr):\n        s = i\n        while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1):\n            i += 1\n        result.append((arr[s], arr[i]))\n        i += 1\n    return result\n\n# Test \narr = [1, 2, 3, 7, 8, 9, 10]\nprint(get_consecutive(arr))\n# Output [(1, 3), (7, 10)]", "prediction": "### Output:\n[(1, 2), (3, 7), (8, 9"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to traverse a directory and its subdirectories.\n\n### Input:\n\n\n", "label": "\"\"\"\nWrite a Python script to traverse a directory and its subdirectories.\n\"\"\"\n\nimport os\n\ndef list_files(start_path):\n    for root, dirs, files in os.walk(start_path):\n        for name in files:\n            print(os.path.join(root, name))\n\nif __name__ == '__main__':\n    start_path = '.'\n    list_files(start_path)", "prediction": "import os\nfor root, dirs, files in os.walk('/path/to/directory'):\n    for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to classify the age of a human using Machine Learning.\n\n### Input:\ndata = [[25, 5, 4], [27, 8, 4], [25, 6, 2], [30, 6.5, 5], [24, 4, 2], [21, 1, 1], [35, 9, 3], [18, 3, 3]]\n\n", "label": "# Load data\ndata = np.array(data)\n\n# Labels\nlabels = np.array([0, 1, 0, 1, 0, 0, 1, 0])\n\n# Create training and testing data\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)\n\n# Train the model\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test)\n\n# Print accuracy\nprint(\"Accuracy: {}\".format(accuracy_score(y_test, y_pred)))", "prediction": "def classify_age(age):\n    if age[0] < 25:\n        return \"Young\"\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that takes an array of integers as input and creates a new array with the integers sorted in ascending order.\n\n### Input:\n\n\n", "label": "def sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nsort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "prediction": "def sort_array(arr):\n    sorted_arr = []\n    for i in range(len(arr)):\n        for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to get the length of a given string.\n\n### Input:\nHow are you?\n\n", "label": "def get_string_length(str):\n    return len(str)\n\nget_string_length(\"How are you?\")", "prediction": "def get_length(string):\n    return len(string)\n\nprint(get_length(\"How are you?\"))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that has one method for adding two numbers and another method for subtracting two numbers.\n\n### Input:\n\n\n", "label": "class Numbers:\n   \n    def __init__(self):\n        pass\n   \n    def add(self, a, b):\n        return a + b\n   \n    def subtract(self, a, b):\n        return a - b", "prediction": "class Calculator:\n    def add(self, a, b):\n        return a + b\n\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to reverse a given array by swapping the elements.\n\n### Input:\nReversing array [1, 2, 3]\n\n", "label": "def reverse_array(arr): \n      \n    # Initialize start and end index \n        start = 0\n        end = len(arr) - 1\n  \n    # Loop over the array \n    while start < end: \n  \n        # Swap the elements at start and end \n        arr[start], arr[end] = arr[end], arr[start]  \n          \n        # Update start and end index \n        start += 1\n        end -= 1\n  \n# Driver code \narr = [1, 2, 3] \n  \nreverse_array(arr) \n  \n# Print our modified array   \nprint(arr)", "prediction": "def reverseArray(arr):\n    n = len(arr)\n    for i in range(n // 2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to create a GUI calculator using Python and Tkinter.\n\n### Input:\n\n\n", "label": "\"\"\"\nThis code creates a GUI calculator using Python and Tkinter.\n\nStep 1: Create a main window using tkinter.\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Calculator\")\nroot.geometry(\"400x500\")\n\nStep 2: Add all the necessary buttons for the calculator.\n\n# Create all button widgets\nbtn_zero = tk.Button(root, text=\"0\", bg=\"black\", fg=\"white\")\nbtn_one = tk.Button(root, text=\"1\", bg=\"black\", fg=\"white\")\nbtn_two = tk.Button(root, text=\"2\", bg=\"black\", fg=\"white\")\nbtn_three = tk.Button(root, text=\"3\", bg=\"black\", fg=\"white\")\nbtn_four = tk.Button(root, text=\"4\", bg=\"black\", fg=\"white\")\nbtn_five = tk.Button(root, text=\"5\", bg=\"black\", fg=\"white\")\nbtn_six = tk.Button(root, text=\"6\", bg=\"black\", fg=\"white\")\nbtn_seven = tk.Button(root, text=\"7\", bg=\"black\", fg=\"white\")\nbtn_eight = tk.Button(root, text=\"8\", bg=\"black\", fg=\"white\")\nbtn_nine = tk.Button(root, text=\"9\", bg=\"black\", fg=\"white\")\nbtn_decimal = tk.Button(root, text=\".\", bg=\"black\", fg=\"white\")\nbtn_clear = tk.Button(root, text=\"Clear\", bg=\"black\", fg=\"white\")\nbtn_plus = tk.Button(root, text=\"+\", bg=\"black\", fg=\"white\")\nbtn_minus = tk.Button(root, text=\"-\", bg=\"black\", fg=\"white\")\nbtn_multiply = tk.Button(root, text=\"*\", bg=\"black\", fg=\"white\")\nbtn_divide = tk.Button(root, text=\"/\", bg=\"black\", fg=\"white\")\nbtn_equals = tk.Button(root, text=\"=\", bg=\"black\", fg=\"white\")\n\nStep 3: Use a grid layout to position all the widgets on the screen.\n\n# Use grid layout to position all buttons\nbtn_zero.grid(row=4, column=1)\nbtn_one.grid(row=3, column=0)\nbtn_two.grid(row=3, column=1)\nbtn_three.grid(row=3, column=2)\nbtn_four.grid(row=2, column=0)\nbtn_five.grid(row=2, column=1)\nbtn_six.grid(row=2, column=2)\nbtn_seven.grid(row=1, column=0)\nbtn_eight.grid(row=1, column=1)\nbtn_nine.grid(row=1, column=2)\nbtn_decimal.grid(row=4, column=0)\nbtn_clear.grid(row=4, column=2)\nbtn_plus.grid(row=5, column=0)\nbtn_minus.grid(row=5, column=1)\nbtn_multiply.grid(row=5, column=2)\nbtn_divide.grid(row=6, column=0)\nbtn_equals.grid(row=6, column=1, columnspan=2)\n\nStep 4: Add functionality to the calculator.\n\n# Function to calculate result\ndef calculate():\n    \n    # Get the user input\n    user_input = text_input.get()\n\n    # Try and evaluate the user input\n    try:\n        result = eval(user_input)\n        text_input.delete(0, \"end\")\n        text_input.insert(0, result)\n    except:\n        pass\n\n# Create a text entry box for input\ntext_input = tk.Entry(root, width=50, bg=\"white\")\ntext_input.grid(row=0, column=0, columnspan=4)\n\n# Add command to all button widgets\nbtn_zero.config(command=lambda: text_input.insert(tk.END, \"0\"))\nbtn_one.config(command=lambda: text_input.insert(tk.END, \"1\"))\nbtn_two.config(command=lambda: text_input.insert(tk.END, \"2\"))\nbtn_three.config(command=lambda: text_input.insert(tk.END, \"3\"))\nbtn_four.config(command=lambda: text_input.insert(tk.END, \"4\"))\nbtn_five.config(command=lambda: text_input.insert(tk.END, \"5\"))\nbtn_six.config(command=lambda: text_input.insert(tk.END, \"6\"))\nbtn_seven.config(command=lambda: text_input.insert(tk.END, \"7\"))\nbtn_eight.config(command=lambda: text_input.insert(tk.END, \"8\"))\nbtn_nine.config(command=lambda: text_input.insert(tk.END, \"9\"))\nbtn_decimal.config(command=lambda: text_input.insert(tk.END, \".\"))\nbtn_clear.config(command=lambda: text_input.delete(0, tk.END))\nbtn_plus.config(command=lambda: text_input.insert(tk.END, \"+\"))\nbtn_minus.config(command=lambda: text_input.insert(tk.END, \"-\"))\nbtn_multiply.config(command=lambda: text_input.insert(tk.END, \"*\"))\nbtn_divide.config(command=lambda: text_input.insert(tk.END, \"/\"))\nbtn_equals.config(command=calculate)\n\n# Mainloop\nroot.mainloop()\n\"\"\"", "prediction": "import tkinter as tk\nfrom tkinter import *\nfrom tkinter import ttk\nfrom tkinter import messagebox\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the following Python program to validate a phone number.\n\n### Input:\nimport re\n\nphone = \"404-999-9999\"\n\npattern = r\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n\nresult = re.match(pattern, phone)\n\nif result:\n print(\"Valid phone number\")\nelse:\n print(\"Invalid phone number\")\n\n", "label": "import re\n\nphone = \"404-999-9999\"\n\npattern = r\"^[0-9]{3}-[0-9]{3}-[0-9]{4}$\"\n\nresult = re.match(pattern, phone)\n\nif result and len(phone) == 12:\n print(\"Valid phone number\")\nelse:\n print(\"Invalid phone number\")", "prediction": "### Output:\nValid phone number"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.\n\n### Input:\nnums = [1, 2, 3, 4, 5]\n\n", "label": "def square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]", "prediction": "### Output:\n[(0, 1), (1, 4), (2, 9"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a REST API with Python and Flask. The API should include the following endpoints: POST /users, GET /users/{userId}, GET /users/{userId}/posts, POST /posts\n\n### Input:\nNot applicable\n\n", "label": "# Importing libraries\nimport flask\nfrom flask import Flask, request, jsonify\n\n# Creating the application instance\napp = Flask(__name__)\n\n# A list to store users data temporarily\nusers = []\n\n@app.route('/users', methods=['POST'])\ndef add_user():\n data = request.get_json()\n users.append(data)\n return jsonify({'message': 'User added successfully'})\n\n@app.route('/users/<userId>', methods=['GET'])\ndef get_user(userId):\n user = [user for user in users if user['userId'] == userId]\n if len(user) == 0:\n return jsonify({'message': 'No user found'})\n return jsonify({'user': user[0]})\n\n@app.route('/users/<userId>/posts', methods=['GET'])\ndef get_user_posts(userId):\n posts = [post for post in posts if post['userId'] == userId]\n return jsonify({'posts': posts})\n\n@app.route('/posts', methods=['POST'])\ndef add_post():\n data = request.get_json()\n posts.append(data)\n return jsonify({'message': 'Post added successfully'})\n\n# Driver code \nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python which takes a list of strings as input and prints out the number of strings with a length equal to 3.\n\n### Input:\n['word', 'cat', 'bat', 'car', 'apple', 'dog']\n\n", "label": "def count_length_3(words):\n    count = 0\n    for word in words:\n        if len(word) == 3:\n            count += 1\n    print(count)\n\ncount_length_3(['word', 'cat', 'bat', 'car', 'apple', 'dog'])", "prediction": "### Output:\n3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API in Python with Flask to register and authenticate user.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport uuid\nimport hashlib\n\napp = Flask(__name__)\n\n@app.route('/register', methods=['POST'])\ndef register():\n # Get form data\n data = request.get_json()\n public_id = str(uuid.uuid4())\n username = data['username']\n password = data['password']\n hashed_password = hashlib.sha256(password.encode()).hexdigest()\n \n # Create new user\n user = User(public_id, username, hashed_password)\n db.session.add(user)\n db.session.commit()\n \n return jsonify({'public_id': public_id})\n\n@app.route('/authenticate', methods=['POST'])\ndef authenticate():\n data = request.get_json()\n username = data['username']\n password = data['password']\n \n user = User.query.filter_by(username=username).first()\n \n if user and hashlib.sha256(password.encode()).hexdigest() == user.password:\n  return jsonify({'public_id': user.public_id})\n\nif name == 'main':\n app.run(debug=True)", "prediction": "### Output:\nimport flask\nfrom flask import Flask, render_template, request, redirect, url_for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to accept two numbers from the user and swap them using a variable.\n\n### Input:\n\n\n", "label": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\ntemp = num1\nnum1 = num2\nnum2 = temp\n\nprint(\"After swapping:\")\nprint(\"First number:\", num1)\nprint(\"Second number:\", num2)", "prediction": "def swap(a, b):\n    a, b = b, a\n    return a, b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network model in Python to classify colors into red, green and blue.\n\n### Input:\n\n\n", "label": "#import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#create a dataset\ndata = np.array([[255, 0, 0], [0, 255, 0], [0, 0, 255]])\nlabels = np.array(['red', 'green', 'blue'])\n\n#encode target labels\nencoder = LabelEncoder()\nencoded_labels = encoder.fit_transform(labels)\n\n#split dataset into 80% train and 20% test\nx_train, x_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2)\n\n#set parameters\ninput_dim = 3\noutput_dim = 3\nbatch_size = 10\nepochs = 10\n\n#build a sequential model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=input_dim))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n#compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n\n#train and evaluate the model\nmodel.fit(x_train, y_train, batch_size=batch_size, epochs=epochs)\nscore = model.evaluate(x_test, y_test, batch_size=batch_size)", "prediction": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to scrape the homepage of a website.\n\n### Input:\n\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Scraping code goes here\n# e.g. page_title = soup.find('h1').contents", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page(url):\n    page = requests.get(url"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the square root of a number without using the square root function.\n\n### Input:\n25\n\n", "label": "# A function to calculate the Square Root of a number using \n# the babylonian method \ndef sqrt(n): \n\t\n\t# We are using n itself as initial approximation \n\t# This can definitely be improved \n\tx = n \n\ty = 1\n\t\n\t# e decides the accuracy level \n\te = 0.000001\n\t\n\twhile(x - y > e): \n\t\tx = (x + y)/2\n\t\ty = n/x \n\n\treturn x \n\n# Driver Program \nnum = 25\nprint(sqrt(num))", "prediction": "### Output:\n5.0"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program for the following task: given a set of values, output the count of the mode of the set.\n\n### Input:\n\n\n", "label": "def get_mode_count(list_of_values):\n    count_dict = dict()\n    max_count = 0 \n    for value in list_of_values:\n        if value in count_dict:\n            count_dict[value] += 1\n        else:\n            count_dict[value] = 1\n \n        max_count = max(max_count, count_dict[value])\n    \n    mode_count = 0\n    for key in count_dict:\n        if count_dict[key] == max_count:\n            mode_count += 1\n\n    return mode_count", "prediction": "def mode(values):\n    counts = {}\n    for value in values:\n        if value in counts:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning classifier using the scikit-learn library in Python that predicts whether someone is a male or female using features like height and age.\n\n### Input:\n\n\n", "label": "from sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# define features (height, age) and labels (gender)\nX = [[180, 25], [170, 27], [150, 40], [145, 37], [177, 23]]\ny = ['male', 'female', 'female', 'male', 'female']\n\n# create model \nsvm_model = svm.SVC(gamma='auto', decision_function_shape='ovo')\nknn_model = KNeighborsClassifier(n_neighbors=5)\n\n# train and predict\nsvm_model.fit(X, y)\npred = svm_model.predict([[160, 32]])\nknn_model.fit(X, y)\npred_knn = knn_model.predict([[160, 32]])\n\nprint(pred)\nprint(pred_knn)", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python file and import the following modules: math, PIL.Image, PIL.ImageDraw, django.http.HttpResponse, django.http.Http404, and django.shortcuts.render_to_response. Define a variable named \"google_dist\" and set it equal to 20037508.34. Define a function named \"leaflet_polygon_options\" that takes a \"boundary\" argument. Inside the function, count the number of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and store it in a variable named \"n\". Return a dictionary with keys \"fill\" and \"outline\" and values that are the result of calling the \"leaflet_colour\" function with the \"n\" argument and (0,0,0,170), respectively. Define a function named \"leaflet_popup\" that takes a \"boundary\" argument. Inside the function, create a list of tuples named \"party_list\" where each tuple has a Party object and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to the Party object. Use a list comprehension to generate the Party objects by filtering the Party model for objects that have a leaflet__leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument, then sort the resulting queryset by the \"name\" attribute, and remove duplicates using the \"distinct\" method. Append to the \"party_list\" a tuple with a dictionary with a \"name\" key and \"Uncategorised\" value and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the \"boundary\" argument and a publisher_party attribute equal to None if there are any such Leaflet objects. Return a tuple with a string \"boundaries/leaflets.html\" and a dictionary with keys \"constituency\" and \"party_list\" and values equal to the \"boundary.constituency\" attribute and the \"party_list\" variable, respectively. Define a function named \"leaflet_colour\" that takes an \"n\" argument. Inside the function, calculate a logarithm of \"n+1\" with base 2 and store it in a variable named \"r\". Return a tuple of four integers that are the result of applying mathematical operations to \"r\" and constants. Define a function named \"leaflet_keyvalues\" that returns a list of integers. Define a dictionary named \"maps\" with a key \"leaflets\" and a value that is a dictionary with keys \"polygon_options\", \"template\", \"colour\", and \"keyvalues\" and values that are the \"leaflet_polygon_options\" function, a tuple with a string \"boundaries/leaflets.html\" and the \"leaflet_popup\" function, the \"leaflet_colour\" function, and the \"leaflet_keyvalues\" function, respectively. Define a function named \"getDBzoom\" that takes a \"z\" argument. Inside the function, check if the integer value of \"z\" is greater than 10. If it is, return 10. Otherwise, return the integer value of \"z\". Define a function named \"view_key\" that takes a \"request\", \"mapname\", \"n\", \"x\", and \"y\" arguments. Inside the function, create an Image object with RGBA mode and dimensions equal to \"x\" and \"y\" arguments, and a color that is the result of calling the \"colour\" function of the \"maps[mapname]\" dictionary with the integer value of \"n\" argument. Create an HttpResponse object with \"image/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"view_map\" that takes a \"request\" and \"mapname\" arguments. Inside the function, import the \"settings\" module from the \"django.conf\" package. Return a render_to_response function with a string \"boundaries/map.html\" and a dictionary with keys \"MEDIA_URL\", \"mapname\", and \"keyvalues\" and values that are the \"settings.MEDIA_URL\" attribute, the \"mapname\" argument, and the \"keyvalues\" attribute of the \"maps[mapname]\" dictionary, respectively. Define a function named \"tile\" that takes a \"request\", \"mapname\", \"tz\", \"tx\", \"ty\", \"tilex\", and \"tiley\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the west, south, east, and north coordinates of the tile using the \"getTileRect\" function with \"tx\", \"ty\", and \"tz\" arguments. Calculate the \"zoom\" variable as 2 to the power of the float value of \"tz\" argument. Create an Image object with RGBA mode and dimensions equal to (256, 256) and a color that is a tuple of four integers that represent a transparent color. Create an ImageDraw object with the Image object. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the integer value of \"tz\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to \"dbz\" variable and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, get the \"polygon_options\" attribute of the \"options\" dictionary by calling the \"polygon_options\" function with the Boundary object as an argument. Evaluate the \"boundary\" attribute of the Boundary object and store it in a variable named \"coords\". Create an empty list named \"l\". Iterate over the \"coords\" variable and for each tuple of coordinates, calculate the \"x\" and \"y\" variables using mathematical operations and append a tuple of two integers to the \"l\" list. Draw a polygon with the \"l\" list and the \"polygon_options\" attribute of the \"options\" dictionary using the ImageDraw object. Delete the ImageDraw object. Create an HttpResponse object with \"image/png\" mimetype. Save the Image object to the HttpResponse object with \"PNG\" format and return the HttpResponse object. Define a function named \"popup\" that takes a \"request\", \"mapname\", \"x\", \"y\", and \"z\" arguments. Inside the function, get the \"options\" attribute of the \"maps[str(mapname)]\" dictionary. Calculate the \"x\" and \"y\" variables as float values of \"x\" and \"y\" arguments, respectively. Calculate the \"dbz\" variable as the result of calling the \"getDBzoom\" function with the \"z\" argument. Filter the Boundary model for objects that have a \"zoom\" attribute equal to the integer value of \"dbz\" argument and \"south\", \"north\", \"east\", and \"west\" attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, evaluate the \"boundary\" attribute and store it in a variable named \"coords\". Create a boolean variable named \"inside\" and set it to False. Iterate over the \"coords\" variable and for each pair of consecutive tuples of coordinates, check if the \"y\" variable is between the \"vy0\" and \"vy1\" variables of the tuples and if the \"x\" variable is less than a certain value calculated using mathematical operations. If the conditions are satisfied, toggle the \"inside\" variable. If the \"inside\" variable is True, return a render_to_response function with arguments that are the result of calling the \"template\" attribute of the \"options\" dictionary with the Boundary object as an argument. Raise an Http404 exception if the \"inside\" variable is False after iterating over all the objects. Define a function named \"to_google\" that takes \"x\" and \"tilesAtThisZoom\" arguments. Inside the function, calculate a certain value using mathematical operations and return it. Define a function named \"getTileRect\" that takes \"xt\", \"yt\", and \"zoomt\" arguments. Inside the function, calculate the \"zoom\", \"x\", and \"y\" variables as integer values of \"zoomt\", \"xt\", and \"yt\" arguments, respectively. Calculate the \"tilesAtThisZoom\" variable as 2 to the power of \"zoom\" variable. Calculate the west, south, east, and north coordinates of the tile using the \"to_google\" function with \"x\", \"tilesAtThisZoom\" arguments and certain mathematical operations. Return a tuple of four float values that represent the west, south, east, and north coordinates of the tile.\n\n### Input:\n\n\n", "label": "import math\n\nfrom PIL import Image, ImageDraw\nfrom django.http import HttpResponse, Http404\nfrom django.shortcuts import render_to_response\n\nfrom boundaries.models import Boundary\nfrom parties.models import Party\nfrom leaflets.models import Leaflet\n\ngoogle_dist = 20037508.34\n\ndef leaflet_polygon_options(boundary):\n    n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count()\n    return {\"fill\": leaflet_colour(n), \"outline\": (0,0,0,170)}\n\ndef leaflet_popup(boundary):\n    party_list = [(\n        p, Leaflet.objects.filter(\n            leafletconstituency__constituency__boundary=boundary,\n                                          publisher_party = p))\n          for p  in Party.objects.filter(\n              leaflet__leafletconstituency__constituency__boundary=boundary)\\\n              .distinct().order_by('name')]\n    unclassified_leaflets = Leaflet.objects.filter(\n        leafletconstituency__constituency__boundary=boundary,\n        publisher_party = None)\n    if unclassified_leaflets:\n        party_list = party_list + [({\"name\": \"Uncategorised\"}, unclassified_leaflets)]\n    return \"boundaries/leaflets.html\", {\"constituency\": boundary.constituency,\n                             \"party_list\": party_list\n                             }\n\ndef leaflet_colour(n):\n    r = math.log((n+1), 2)\n    return  (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32))\n\ndef leaflet_keyvalues():\n    return [0,2,5,10,20,50,100,200]\n\n\nmaps = {\"leaflets\": {\"polygon_options\": leaflet_polygon_options,\n                     \"template\": leaflet_popup,\n                     \"colour\": leaflet_colour,\n                     \"keyvalues\": leaflet_keyvalues()}\n        }\n\ndef getDBzoom(z):\n    if int(z) > 10:\n        return 10\n    else:\n        return int(z)\n\ndef view_key(request, mapname=None, n=None, x=None, y=None):\n    image = Image.new(\"RGBA\", (int(x), int(y)), maps[mapname][\"colour\"](int(n)))\n    response = HttpResponse(mimetype=\"image/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef view_map(request, mapname):\n    from django.conf import settings\n    return render_to_response(\"boundaries/map.html\", {\"MEDIA_URL\":settings.MEDIA_URL, \"mapname\": mapname, \"keyvalues\":maps[mapname][\"keyvalues\"]})\n\ndef tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256):\n    options = maps[str(mapname)]\n    west, south, east, north = getTileRect(tx, ty, tz)\n    zoom = 2 ** float(tz)\n    tx = float(tx)\n    ty = float(ty)\n    image = Image.new(\"RGBA\", (256, 256), (0, 0, 0, 0))\n    draw = ImageDraw.Draw(image)\n    dbz = getDBzoom(tz)\n\n    boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east)\n    for boundary in boundaries_within:\n        polygon_options = options[\"polygon_options\"](boundary)\n        coords = eval(boundary.boundary)\n        l = []\n        for lng, lat in coords:\n            x = 256 * (lng - west) / (east - west)\n            y = 256 * (lat - north) / (south - north)\n            l.append((int(x), int(y)))\n        draw.polygon(l, **polygon_options)\n    del draw\n    response = HttpResponse(mimetype=\"image/png\")\n    image.save(response, \"PNG\")\n    return response\n\ndef popup(request, mapname, x=None, y=None, z=None):\n    options = maps[str(mapname)]\n    x = float(x)\n    y = float(y)\n    dbz = getDBzoom(z)\n    possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x)\n    for boundary in possible_boundaries:\n        coords = eval(boundary.boundary)\n        inside = False\n        for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]):\n            if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) / (vy1-vy0) + vx0):\n                inside = not(inside)\n        if inside:\n            return render_to_response(*options[\"template\"](boundary))\n    raise Http404\n\ndef to_google(x, tilesAtThisZoom):\n  return google_dist * (1 - 2 * float(x) / tilesAtThisZoom)\n\ndef getTileRect(xt, yt, zoomt):\n           zoom = int(zoomt)\n           x = int(xt)\n           y = int(yt)\n           tilesAtThisZoom = 2 ** zoom\n\n           return (-to_google(x, tilesAtThisZoom),\n                   to_google(y + 1, tilesAtThisZoom),\n                   -to_google(x + 1, tilesAtThisZoom),\n                   to_google(y, tilesAtThisZoom))\n", "prediction": "def create_python_file():\n    import math\n    from PIL import Image, ImageDraw\n    from"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that matches regular expression pattern.\n\n### Input:\npattern = \"\\d+\"\ntext = \"I have 3 cats and 5 dogs\"\n\n", "label": "import re\n\ndef regex_match(pattern, text):\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return matches", "prediction": "import re\ndef match_pattern(pattern, text):\n    return re.match(pattern, text)\n\nprint(match"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to write the Fibonacci series in Python\n\n### Input:\n\n\n", "label": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\")\n    elif n == 0: \n        return a # when n is 0\n    elif n == 1: \n        return b # when n is 1 \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "prediction": "def fibo(n):\n    if n == 0:\n        return 0\n    elif n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that shuffles an array of integers.\n\n### Input:\n[1, 5, 9, 4, 2]\n\n", "label": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr \n\nmy_arr = [1, 5, 9, 4, 2]\n\nprint(shuffle(my_arr))", "prediction": "def shuffle(arr):\n    import random\n    random.shuffle(arr)\n    return arr\n\nprint(shuffle"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes an array of integers and returns a new array with each element multiplied by its index.\n\n### Input:\n[6, 3, 10, 4]\n\n", "label": "def multiply_by_index(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= i\n    return numbers", "prediction": "### Output:\n[0, 3, 20, 12]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python class for a shopping cart.\n\n### Input:\nNo input\n\n", "label": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    \n    def add_item(self, item):\n        self.items.append(item)\n    \n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item)\n    \n    def get_total_amount(self):\n        total_amount = 0\n        for item in self.items:\n            total_amount += item.price\n        return total_amount", "prediction": "### Output:\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to check whether two sequences are equal or not.\n\n### Input:\nseq_1: [1, 2, 3, 4]\nseq_2: [1, 4, 3, 2]\n\n", "label": "def is_equal(seq_1, seq_2):\n  return sorted(seq_1) == sorted(seq_2)", "prediction": "def check_equal(seq_1, seq_2):\n    if len(seq_1) != len"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you modify the previous program in python to generate random passwords with length 10 and include a symbol?\n\n### Input:\n\n\n", "label": "import string, random\n\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\ndef generate_password():\n\t\n\tpassword = \"\"\n\n\tfor i in range(10):\n\t\tpassword += random.choice(characters)\n\n\treturn password\n\nprint(generate_password())", "prediction": "import random\nimport string\n\ndef generate_password(length, symbols):\n    password = ''.join(random.choice"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python web scraper so that it only scrapes text between two HTML tags, and excludes text before or after those tags.\n\n### Input:\n`<h1>This is a title</h1>Some text before the tags<p>This should be scraped</p>Some text after the tags`\n\n", "label": "import re\n\ndef scrape_tags(text):\n regex = r\"<h1>(.*?)</h1>(.*?)<p>(.*?)</p>\"\n result = re.findall(regex, text)\n\n if result:\n return result[0][2]\n else:\n return None\n\ntext = '<h1>This is a title</h1>Some text before the tags<p>This should be scraped</p>Some text after the tags'\nprint(scrape_tags(text)) # This should be scraped", "prediction": "### Output:\n`This should be scraped`"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a graphical user interface (GUI) in Python that displays a text box and two buttons. When the first button is pressed, the text in the box should be changed to 'Hello World!'. When the second button is pressed, a message box should appear with the following text: 'This is a message box.'\n\n### Input:\nNot applicable\n\n", "label": "import tkinter as tk\nimport tkinter.messagebox as tkmsg\n\ndef hello_world():\n text_box.config(text='Hello World!')\n\ndef message_box():\n tkmsg.showinfo(title='Message Box', message='This is a message box.')\n\nwindow = tk.Tk()\nwindow.title('Hello World App')\n\ntext_box = tk.Label(window)\ntext_box.pack(padx=20, pady=20)\n\nbtn_1 = tk.Button(window, text='Change Text', command=hello_world)\nbtn_1.pack(padx=20, pady=20)\n\nbtn_2 = tk.Button(window, text='Show Message', command=message_box)\nbtn_2.pack(padx=20, pady=20)\n\nwindow.mainloop()", "prediction": "### Output:\nimport tkinter as tk\nfrom tkinter import messagebox\n\ndef change_text():\n    text_box"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to send an email using the Gmail SMTP service.\n\n### Input:\n\n\n", "label": "import smtplib\n\nsender_email = \"sender@gmail.com\"\nreceiver_email = \"receiver@example.com\"\npassword = 'password'\n\nmessage = \"\"\"\\\nSubject: Hi There\n\nThis is an email to test the Gmail SMTP service.\n\"\"\"\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()\n\nserver.login(sender_email, password)\nserver.sendmail(sender_email, receiver_email, message)\n\nserver.quit()", "prediction": "import smtplib\nfrom email.mime.text import MIMEText\n\ndef send_email(to, subject, content"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two strings and returns the Levenshtein distance between them.\n\n### Input:\n\n\n", "label": "def levenshteinDistance(str1, str2): \n    m = len(str1) \n    n = len(str2) \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n# base cases \n    for i in range(m + 1): \n        dp[i][0] = i \n    for j in range(n + 1): \n        dp[0][j] = j\n  \n    # fill the dp table \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],        # Insert \n                                   dp[i - 1][j],        # Remove \n                                   dp[i - 1][j - 1])    # Replace \n  \n    return dp[m][n]", "prediction": "def levenshtein_distance(s1, s2):\n    if len(s1) < len"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two integers as inputs and prints the largest number of them.\n\n### Input:\nFirst Integer: 12\nSecond Integer: 44\n\n", "label": "num1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")", "prediction": "### Output:\n44"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify an animal as either a mammal or a reptile based on a set of five features\n\n### Input:\nfeatures = [0,1,1,0,1]\n\nMammals: 0 Warm blooded, 1 Fur/hair, 1 Eat meat, 0 Cold blooded, 1 Lay eggs \n\nReptiles: 0 Cold blooded, 1 Scaly skin, 1 Dig underground, 1 Eat plants, 0 Quadruped\n\n", "label": "mammal_score = 0\nreptile_score = 0\n\nif features[0] == 0:\n    mammal_score += 1\nif features[1] == 1:\n    mammal_score += 1\nif features[2] == 1:\n    mammal_score += 1 \nif features[3] == 1:\n    reptile_score += 1\nif features[4] == 0:\n    reptile_score += 1\n\nif mammal_score > reptile_score:\n    animal_class = \"Mammal\"\nelse:\n    animal_class = \"Reptile\"\n\nprint(animal_class)", "prediction": "def classify_animal(features):\n    if features[0] == 1 and features[1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text classification system with Python and Scikit-Learn that classifies a given text as either \"positive\" or \"negative\".\n\n### Input:\nNot applicable\n\n", "label": "# Import libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Input corpus\ncorpus = [\n    'This is a positive text',\n    'This is a negative text',\n    'This is another positive text',\n    'This is another negative text',\n]\n\nlabels = [1, 0, 1, 0]\n\n# Convert corpus into vectors \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(corpus)\n\n# Train classifier\nclassifier = LogisticRegression()\nclassifier.fit(X, labels)\n\n# Classify new text\ntext = 'This is a text to classify'\nX = vectorizer.transform([text])\n\nprediction = classifier.predict(X)\nif prediction[0] == 1:\n    print('Classified as Positive')\nelse:\n    print('Classified as Negative')", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the largest palindrome number from a list of numbers.\n\n### Input:\nExample list of numbers [4, 12, 25, 98, 9989]\n\n", "label": "def is_palindrome(n):\n return str(n) == str(n)[::-1]\n\ndef largest_palindrome(nums):\n largest = 0\n for n in nums:\n if is_palindrome(n):\n largest = max(n, largest)\n return largest\n\nnums = [4, 12, 25, 98, 9989]\nlargest = largest_palindrome(nums)\nprint(f'Largest palindrome from the list is {largest}')", "prediction": "def palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef largest_palindrome"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the total price of a grocery list given a list of items and their prices.\n\n### Input:\n[\n    [apple, 2.00], \n    [banana, 4.00], \n    [bread, 3.50], \n    [orange, 1.50]\n]\n\n", "label": "items = [\n    ['apple', 2.00], \n    ['banana', 4.00], \n    ['bread', 3.50], \n    ['orange', 1.50]\n]\n\ntotal = 0\n\nfor item in items:\n    total += item[1]\n\nprint(\"The total price of the grocery list is:\", total)", "prediction": "def calculate_total(grocery_list):\n    total = 0\n    for item, price in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a code to securely hash a given string in Python?\n\n### Input:\n\n\n", "label": "import hashlib\n \ndef secure_hash(string):\n return hashlib.sha256(string.encode()).hexdigest()", "prediction": "def hash_string(s):\n    import hashlib\n    return hashlib.sha256(s.encode()).hexdigest()\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for classifying an array of numbers into one of three classes (low, medium, or high).\n\n### Input:\nExample array: [-5, 0, 2, 10, 15]\n\n", "label": "def classify(arr):\n output = []\n for n in arr:\n if n < 0:\n output.append('low')\n elif n < 5:\n output.append('medium')\n else:\n output.append('high')\n return output\n\n# Example Usage\nexample_array = [-5, 0, 2, 10, 15]\nresult = classify(example_array)\nprint(result) # ['low', 'medium', 'medium', 'high', 'high']", "prediction": "def classify(numbers):\n    low = 0\n    medium = 0\n    high = "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of distinct values from an array of integers using a python program.\n\n### Input:\n[50, 20, 30, 40, 10]\n\n", "label": "unique_list = list(set([50, 20, 30, 40, 10]))\nprint(unique_list)", "prediction": "### Output:\n[10, 20, 30, 40, 50]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function that takes a list of strings and returns the string concatenation of them.\n\n### Input:\n[\"Hello\", \"World\", \"How\", \"are\", \"you\"]\n\n", "label": "def concatenateString(list):\n    result = \"\"\n    for item in list:\n        result += item\n    return result\n \nprint(concatenateString([\"Hello\", \"World\", \"How\", \"are\", \"you\"]))", "prediction": "### Output:\n\"Hello World How are you\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to classify animals.\n\n### Input:\n\n\n", "label": "#import libraries \nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.datasets import load_iris \nfrom sklearn.model_selection import train_test_split \n  \n#import dataset \ndata = load_iris() \n  \n#divide the data into independent and dependent variables \nX = data.data \ny = data.target \n  \n# Split the data into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) \n  \n#Define the model \nmodel = RandomForestClassifier(n_estimators=100) \n  \n#Train the model \nmodel.fit(X_train, y_train) \n  \n# Test the model \nmodel.score(X_test, y_test)", "prediction": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Logistic"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that creates a player window for a Spotify client. It imports several modules and defines a class for the player window. It also defines several functions for controlling the Spotify client, getting information about the current track, and updating the player window with this information. To use this script, run the main() function.\n\n### Input:\n\n\n", "label": "# https://docs.python.org/2.7/\nimport os\nimport sys\nimport urllib\nimport urlparse\n# http://mirrors.kodi.tv/docs/python-docs/\n\nimport xbmcaddon\nimport xbmcgui\nimport xbmcplugin\n# http://docs.python-requests.org/en/latest/\nimport requests\nfrom threading import Thread\nimport time\n\n\n\nclass PlayerWindow(xbmcgui.WindowXML):\n    LABEL_ARTIST = 802\n    LABEL_TITEL = 801\n    LABEL_ALBUM = 803\n    IMG_ALBUM = 800\n    SLIDER_VOL = 815\n    BUTTON_SHUFFLE = 817\n    BUTTON_SHUFFLE_ACT = 818\n    \n    BUTTON_REPEAT = 819\n    BUTTON_REPEAT_ACT = 819\n    \n    BUTTON_BACK = 809\n    BUTTON_PLAY = 811\n    BUTTON_PAUSE = 812\n    BUTTON_FOR = 813\n    BUTTON_VOL_UP = 816\n    BUTTON_VOL_DOWN = 814\n    def __init__(self, *args, **kwargs): \n        self.isRunning = True\n\n        self.volume = 100\n\n        \n\n\n    def onAction(self , action):\n        ACTION_PREVIOUS_MENU = 10\n        ACTION_NAV_BACK = 92\n        ACTION_UP = 3\n        ACTION_DOWN = 4\n        ACTION_LEFT = 1\n        ACTION_RIGHT = 2\n        ACTION_MIDDLE = 7\n        \n        ACTION_PAUSE = 12\n        ACTION_STOP = 13\n        ACTION_NEXT_ITEM = 14\n        ACTION_PREV_ITEM = 15\n        \n        ACTION_FORWARD = 16\n        ACTION_REWIND = 17\n        ACTION_PLAYER_FORWARD = 77\n        ACTION_PLAYER_REWIND = 78\n\n        ACTION_PLAYER_PLAY = 79\n        ACTION_VOLUME_UP = 88\n        ACTION_VOLUME_DOWN = 89\n        ACTION_MUTE = 91\n        \n        ACTION_PAGE_UP = 5 \n        ACTION_PAGE_DOWN = 6  \n\n        \n\n        \n        #ids = str(action.getId())\n        \n        #xbmc.log(ids)\n        \n        if (action == ACTION_PREVIOUS_MENU) or (action == ACTION_NAV_BACK):\n            xbmcgui.Window(10000).setProperty(\"spotify-closed-by-user\",\"true\")\n            self.isRunning = False\n            self.close()\n            \n\n        if (action == ACTION_LEFT) or (action == ACTION_RIGHT):\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            volume = self.volSlider.getPercent()\n            setVol(volume)\n                \n        if(action == ACTION_PLAYER_PLAY) or (action == ACTION_PAUSE):\n            if(self.playing):\n                getSite(pause)\n                \n            else:\n                getSite(play)\n                \n                \n                \n        if (action == ACTION_VOLUME_UP):\n            self.volume = self.volume + 3\n            if(self.volume > 100):\n                self.volume = 100\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n                \n        if (action == ACTION_VOLUME_DOWN):\n            self.volume = self.volume- 3\n            if(self.volume < 0):\n                self.volume = 0\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n        \n        if (action == ACTION_FORWARD) or (action == ACTION_PLAYER_FORWARD) or (action == ACTION_NEXT_ITEM) or (action == ACTION_PAGE_UP):\n            getSite(next)\n            \n        if (action == ACTION_REWIND) or (action == ACTION_PLAYER_REWIND) or (action == ACTION_PREV_ITEM) or (action == ACTION_PAGE_DOWN):\n            getSite(prev)\n            \n        if(action == ACTION_STOP):\n            getSite(pause)\n            \n            \n            \n    def onClick(self, controlID):\n                \n        if (controlID == self.BUTTON_PAUSE) or (controlID == self.BUTTON_PLAY):\n            if(self.playing):\n                getSite(pause)                \n            else:\n                getSite(play)      \n                \n        if (controlID == self.BUTTON_VOL_UP):\n            self.volume = self.volume + 3\n            if(self.volume > 100):\n                self.volume = 100\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n                \n        if (controlID == self.BUTTON_VOL_DOWN):\n            self.volume = self.volume- 3\n            if(self.volume < 0):\n                self.volume = 0\n            setVol(self.volume)\n            self.volSlider = self.getControl(self.SLIDER_VOL)\n            self.volSlider.setPercent(self.volume)\n        \n        if (controlID == self.BUTTON_FOR):\n            getSite(next)\n            \n        if (controlID == self.BUTTON_BACK):\n            getSite(prev)\n            \n    \n    def updateLabels(self, information):\n        self.albumCover = self.getControl(self.IMG_ALBUM)\n        self.titleLabel = self.getControl(self.LABEL_TITEL)\n        self.artistLabel = self.getControl(self.LABEL_ARTIST)\n        self.albumName = self.getControl(self.LABEL_ALBUM)\n        self.volSlider = self.getControl(self.SLIDER_VOL)\n    \n    \n        self.playing = information['playing']\n\n        \n        self.titleLabel.setLabel(information['track_name'])\n        self.albumName.setLabel(information['album_name'])\n        self.artistLabel.setLabel( information['artist_name'])\n        self.albumCover.setImage(information['cover_url'])\n        self.volume = int(information['volume'])/655.35\n        self.volSlider.setPercent(self.volume)\n        \n        self.getControl(self.BUTTON_PLAY).setVisible(not self.playing)\n        self.getControl(self.BUTTON_SHUFFLE).setVisible(not information['shuffle'])\n        self.getControl(self.BUTTON_REPEAT).setVisible(not information['repeat'])\n\n\ndef getSite(url):\n    #try...\n    rq = requests.get(url)\n    #handle\n    return rq\n\ndef getInfo():\n    information = getSite(info).json()\n    \n    statusInfo = getSite(status).json()\n    \n    \n    playing = statusInfo['playing']\n    shuffleInfo = statusInfo['shuffle']\n    repeatInfo = statusInfo['repeat']\n    \n    coverURL = \"http://o.scdn.co/160/\"+information['cover_uri'].split(':')[-1]\n    information['cover_url'] = coverURL\n    information['playing'] = playing\n    information['shuffle'] = shuffleInfo\n    information['repeat'] = repeatInfo\n    \n    return information\n\ndef downloadCover(url):\n    urllib.urlretrieve(url,'/tmp/spotAlCov.png')\n\ndef setVol(value):\n    value = int(round(value* 655.35))\n    jsonPost = {'value': value}\n    requests.post(volume,data=jsonPost)\n\ndef updateInfo(name,window):\n    screensaverDelay = 30\n    screensaverCount = 0\n    updateInterval = 2\n    \n    while True:\n        try:\n            window.getControl(800)\n            break\n        except Exception:            \n            xbmc.log(\"Error: can't find Window, try again\")\n            time.sleep(1) # maybe fix for can't find window id's\n\n\n    while window.isRunning and (not xbmc.abortRequested):\n        information = getInfo()\n        window.updateLabels(information)\n        time.sleep(updateInterval)\n        screensaverCount = screensaverCount + updateInterval\n        \n        if(screensaverCount>screensaverDelay) and information['playing']:\n            #wakeup from screensaver by simulating a button activity\n            json_query = xbmc.executeJSONRPC('{\"jsonrpc\": \"2.0\", \"method\": \"Input.ContextMenu\", \"id\": 1}')\n            screensaverCount = 0\n\ndef main():\n    pw = PlayerWindow(\"player.xml\",CWD)\n\n    \n    #xbmcgui.Window( 10000 )\n\n    t1 = Thread(target=updateInfo,args=(\"1\",pw))\n    t1.setDaemon( True)\n    t1.start()\n    \n    xbmcgui.Window(10000).setProperty(\"spotify-showing\", \"true\")\n    \n    pw.doModal()\n    xbmcgui.Window(10000).clearProperty(\"spotify-showing\")\n    del t1\n    del pw\n    \n\n\n    \n\nif __name__ == '__main__':\n    page = 'http://127.0.0.1:4000'\n    apiPlayback = '/api/playback'\n    \n    play = page+apiPlayback+'/play'\n    pause = page+apiPlayback+'/pause'\n    prev = page+apiPlayback+'/prev'\n    next = page+apiPlayback+'/next'\n    volume = page+apiPlayback+'/volume'\n    shuffle =  page+apiPlayback+'/shuffle'\n    repeat =  page+apiPlayback+'/repeat'\n    \n    \n    info = page+'/api/info/metadata'\n    status = page+'/api/info/status'\n    \n    \n    ADDON = xbmcaddon.Addon(id='plugin.audio.example')\n    CWD = ADDON.getAddonInfo('path').decode(\"utf-8\")\n\n\n\n    main()\n", "prediction": "```python\nimport sys\nimport os\nimport time\nimport threading\nimport webbrowser\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to define a fraction and include methods to add and subtract fractions.\n\n### Input:\n\n\n", "label": "class Fraction:\n\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def __add__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 + num2\n        return Fraction(numerator, denom)\n\n    def __sub__(self, other):\n        denom = self.denominator * other.denominator\n        num1 = self.numerator * other.denominator\n        num2 = other.numerator * self.denominator\n        numerator = num1 - num2\n        return Fraction(numerator, denom)", "prediction": "class Fraction:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network for natural language processing (NLP) in Python.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nimport keras\nfrom keras.datasets import reuters\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.preprocessing.text import Tokenizer\n\n# Set the number of words per document\nnum_words = 1000\n\n# Load data\n(x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=num_words, test_split=0.2)\n\n# Vectorize input data\ntokenizer = Tokenizer(num_words=num_words)\nx_train = tokenizer.sequences_to_matrix(x_train, mode='binary')\nx_test = tokenizer.sequences_to_matrix(x_test, mode='binary')\n\n# One-hot encoding for labels\ny_train = keras.utils.to_categorical(y_train, 46)\ny_test = keras.utils.to_categorical(y_test, 46)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(512, input_shape=(num_words,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(46))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train,\n          batch_size=32,\n          epochs=10,\n          verbose=1,\n          validation_data=(x_test, y_test))\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test,\n                       batch_size=32, verbose=1)\n\nprint('Test score:', score[0])\nprint('Test accuracy:', score[1])", "prediction": "### Output:\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\ndef"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a loop in Python to add all the elements of a given list.\n\n### Input:\nmylist = [5, 12, 17, 22]\n\n", "label": "total_sum = 0\nfor num in mylist:\n    total_sum += num\nprint(\"The sum is\",total_sum)", "prediction": "def sum_list(mylist):\n    total = 0\n    for i in mylist:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate a matrix with random numbers in it.\n\n### Input:\n\n\n", "label": "import numpy as np\ndef random_matrix(row, col):\n    matrix = np.random.random((row,col))\n    print(matrix)\n\nrandom_matrix(3,3) #Outputs: [[0.48281427 0.8640267  0.16479638]\n                      [0.65602432 0.37230416 0.05444421]\n                      [0.78832705 0.19239374 0.03173512]]", "prediction": "def generate_matrix(rows, cols):\n    matrix = []\n    for i in range(rows):\n        matrix"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to solve the Towers of Hanoi puzzle with n-disks using Python.\n\n### Input:\n\n\n", "label": "def move_towers(n, source, target, middle):\n  if n == 1:\n    print('move disk from {} to {}'.format(source, target))\n  else:\n    move_towers(n - 1, source, middle, target)\n    move_towers(1, source, target, middle)\n    move_towers(n - 1, middle, target, source)", "prediction": "def hanoi(n, source, destination, auxiliary):\n    if n == 1:\n        print"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to sort the given list of tuples in Python according to the second element of the tuple.\n\n### Input:\ntuple_list = [(1, 10), (2, 7), (3, 5), (4, 8)]\n\n", "label": "def sort_by_second_elem(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1])", "prediction": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[1])\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python which will take in a set of customer data with two features (age and gender) and predict whether or not the customer is likely to buy a product.\n\n### Input:\nName\tAge\tGender\nBrian\t37\tMale\nErin\t42\tFemale\nHannibal\t67\tMale\n\n", "label": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv('data.csv')\n\nX = data[['Age', 'Gender']]\ny = data['Bought']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nscore = model.score(X_test, y_test)\n\nprint(score)", "prediction": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Logistic"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that displays the greatest common divisor (GCD) of two positive integers?\n\n### Input:\n12, 24\n\n", "label": "def gcd(a, b): \n    if a == 0 : \n        return b \n      \n    return gcd(b % a, a) \n      \na = 12\nb = 24\ngcd = gcd(a, b) \nprint(gcd)", "prediction": "def gcd(a, b):\n    while b:\n        a, b = b, a % b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that implements a stack\n\n### Input:\nNo input\n\n", "label": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def isEmpty(self):\n        return self.items == []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)", "prediction": "### Output:\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a given list of integers in descending order using Merge Sort.\n\n### Input:\nlist = [3, 7, 9, 1, 2, 8]\n\n", "label": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]: # descending order\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n\nl = [3, 7, 9, 1, 2, 8]\nmerge_sort(l)\n\nprint(l)\n\n# Output: [9, 8, 7, 3, 2, 1]", "prediction": "def merge_sort(list):\n    if len(list) <= 1:\n        return list\n    mid"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that takes a string as an argument and prints out the most commonly occurring letter in the string.\n\n### Input:\n\n\n", "label": "from collections import Counter \n\ndef most_common_letter(string): \n\t\"\"\"Function to find the most common letters in the string\"\"\"\n\twords = string.split() \n\tcnt = Counter() \n\t\n\tfor word in words: \n\t\tfor letter in word: \n\t\t\tcnt[letter] += 1\n\n\tmost_occur = cnt.most_common(1)[0] \n\treturn most_occur[0] \n\n# Driver code \nstring = \"this is a sample sentence\"\nprint(most_common_letter(string))", "prediction": "def most_common_letter(string):\n    \"\"\"Return the most common letter in the given string.\"\"\"\n    #"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code snippet in Python to make it more efficient.\n\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1\n\n### Input:\n\n\n", "label": "for i in range(1, 11):\n    print(i)", "prediction": "def print_numbers():\n    i = 1\n    while i <= 10:\n        print(i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to swap the first and last elements of a given input list.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n", "label": "def swap(list):\n    # swapping first and last elements \n    temp = list[0] \n    list[0] = list[-1] \n    list[-1] = temp \n\nlist = [1, 2, 3, 4, 5]\nswap(list)\n\nprint(list)", "prediction": "def swap_first_last(list):\n    first = list[0]\n    last = list[-1]\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python for predicting house prices. This model should use data from a dataset that includes features such as number of bedrooms, square footage, and location.\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd \nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\n\n# Load the house price data \ndata = pd.read_csv('house_prices_data.csv')\n\n# Separate features and labels\nX = data.iloc[:,0:3].values\ny = data.iloc[:,3].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Use the model to make predictions \npredictions = model.predict(X_test)\n\n# Calculate the accuracy of the predictions \nscore = model.score(X_test, y_test)\nprint(score)", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to merge two sorted linked lists into one.\n\n### Input:\n\n\n", "label": "class Node:\n    def __init__(self, value):\n        self.data = value\n        self.next = None\n \n \ndef merge_sorted_lists(head_a, head_b):\n    # Create a new linked list.\n    new_list = Node(None)\n    tail = new_list\n \n    current_a = head_a\n    current_b = head_b\n \n    while current_a is not None or current_b is not None:\n        if current_a is None:\n            tail.next = current_b\n            current_b = current_b.next\n        elif current_b is None:\n            tail.next = current_a\n            current_a = current_a.next\n        elif current_a.data <= current_b.data:\n            tail.next = current_a\n            current_a = current_a.next\n        else:\n            tail.next = current_b\n            current_b = current_b.next\n        tail = tail.next\n \n    return new_list.next", "prediction": "def merge_two_sorted_lists(list1, list2):\n    merged_list = []\n    while list1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that performs sentiment analysis on a given piece of text.\n\n### Input:\nThe text \"I love this movie!\"\n\n", "label": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Set up the sentiment analyzer\nsid = SentimentIntensityAnalyzer()\n\n# Get the sentiment from the text\ntext = \"I love this movie!\"\nscores = sid.polarity_scores(text)\n\n# Output the results\nfor k in sorted(scores):\n    print(k, ':', scores[k])\n\nprint('Sentiment:',  'positive' if scores['compound'] > 0.05 else 'negative')", "prediction": "### Output:\nThe script should output a positive sentiment score for the text."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find out the prime numbers in a given range.\n\n### Input:\nlower =100\nupper =1000\n\n", "label": "def is_prime_number(n):\n    for i in range(2,n):\n        if (n % i == 0):\n            return False\n    return True\n\n# Find all prime numbers in a given range\nlower = 100\nupper = 1000\n\nfor num in range(lower, upper + 1):\n    if is_prime_number(num):\n        print(num)", "prediction": "def prime_numbers(lower, upper):\n    prime_numbers = []\n    for num in range(lower, upper"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given input, sort a list containing both numerical and strings data types in Python.\n\n### Input:\n[1, 'c', 3, 'a', 2, 'b']\n\n", "label": "# define list \nlst = [1, 'c', 3, 'a', 2, 'b']\n\n# sort list\nsorted_lst = sorted(lst, key=lambda x:str(x))\n\n# print sorted list\nprint(sorted_lst)", "prediction": "### Output:\n['a', 'b', 'c', 1, 2, 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that accepts two lists as arguments and returns true if the first list is contained within the second\n\n### Input:\nlist_a = [1,2,3,4]\nlist_b = [1,2,3,4,5,6,7]\n\n", "label": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True", "prediction": "def check_containment(list_a, list_b):\n    if list_a in list_b:\n        return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to return the longest word in a given sentence.\n\n### Input:\nThis is a sentence with multiple words.\n\n", "label": "def longestWord(sentence):\n    words = sentence.split(' ')\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest", "prediction": "def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to create an autocomplete system that predicts words based on the input text.\n\n### Input:\n\n\n", "label": "def autocomplete(input_text):\n    # Generate the word candidates\n    word_candidates = generate_candidates(input_text)\n    # Filter the word candidates \n    filtered_words = filter_candidates(word_candidates)\n    # Rank the words and return the top 5 \n    sorted_words = rank_words(filtered_words)\n    return sorted_words[:5]", "prediction": "def autocomplete(input_text):\n    words = input_text.split()\n    suggestions = []\n    for word in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the list and additional libraries, write a python program to calculate the sum of all elements in the list.\n\n### Input:\nlist = [2, 3, 5, 8, 9]\n\n", "label": "#Importing the libraries\nimport numpy as np\n\n#Defining the list\nlist = [2, 3, 5, 8, 9]\n\n#Calculating the sum\nsum = np.sum(list)\n\n#Printing the result\nprint(sum)", "prediction": "def sum_list(list):\n    sum = 0\n    for i in list:\n        sum +="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes two lists and checks for common elements between them.\n\n### Input:\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6]\n\n", "label": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))", "prediction": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to reverse the order of words in a sentence.\n\n### Input:\nSentence: I love programming\n\n", "label": "def reverse(sentence):\n words = sentence.split(' ')\n words.reverse()\n \n return ' '.join(words)\n\nprint(reverse(\"I love programming\"))  // Output: \"programming love I\"", "prediction": "def reverse_words(sentence):\n    words = sentence.split()\n    words.reverse()\n    return ' '.join"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert an existing function from Python 3 to Python 2.\n\n### Input:\ndef check_anagram(string1, string2):\n    if(sorted(string1) == sorted(string2)):\n        return True\n    else:\n        return False\n\n", "label": "def check_anagram(string1, string2):\n    if(sorted(list(string1)) == sorted(list(string2))):\n        return True\n    else:\n        return False", "prediction": "def check_anagram(string1, string2):\n    if(sorted(string1) == sorted(string2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input string, write a Python program to count the occurrence of each character in the string.\n\n### Input:\n\"Hello, World!\"\n\n", "label": "def char_occurrences(a_string):\n char_count = {}\n for char in a_string:\n if char in char_count:\n char_count[char] += 1\n else:\n char_count[char] = 1\n return char_count\n\nstring = \"Hello, World!\"\nprint(char_occurrences(string))\n\n# Output\n# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "prediction": "### Output:\n{'H': 1, 'e': 1, 'l': 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to count the occurrence of an element in a given list\n\n### Input:\n\n\n", "label": "def count_element(list, element):\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count", "prediction": "def count_occurrence(list, element):\n    count = 0\n    for i in list:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a bank account.\n\n### Input:\n\n\n", "label": "class BankAccount:\n    def __init__(self, owner, balance):\n        self.owner = owner\n        self.balance = balance\n        \n    def deposit (self, amount):\n        self.balance += amount\n        return self.balance\n        \n    def withdraw (self, amount):\n        self.balance -= amount\n        return self.balance", "prediction": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a gradient descent algorithm in Python that minimizes a cost function.\n\n### Input:\nNot applicable\n\n", "label": "def gradient_descent(cost_function, x_values, learning_rate):\n    \n    # Set the initial values for parameters\n    cost = cost_function(x_values)\n    x_t = x_values\n\n    # Calculate gradients\n    grad = cost_function.gradient(x_t)\n\n    # Update the parameters\n    while grad.norm() > 0.00001:\n        x_t = x_t - learning_rate * grad\n\n        cost = cost_function(x_t)\n        grad = cost_function.gradient(x_t)\n\n    return x_t", "prediction": "### Output:\ndef gradient_descent(x, y, theta, alpha, iterations):\n    m ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API for a library application in Python. This API should include endpoints for creating a book (with fields for title, author, and ISBN), listing all books, updating a book, and deleting a book.\n\n### Input:\nNot applicable\n\n", "label": "import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n# Database functionality\n# classes used to represent the objects\nclass Book():\n    def __init__(self, title, author, isbn):\n        self.title = title\n        self.author = author\n        self.isbn = isbn\n\n# lists of books\nbooks = []\n\n# endpoints\n@app.route('/books', methods=['GET', 'POST'])\ndef all_books():\n    response_object = {'status': 'success'}\n    if request.method == 'POST':\n        post_data = request.get_json()\n        books.append(Book(post_data.get('title'), post_data.get('author'), post_data.get('isbn')))\n        response_object['message'] = 'Book added!'\n    else:\n        response_object['books'] = [book.__dict__ for book in books] \n\n    return jsonify(response_object)\n\n@app.route('/books/<int:isbn>', methods=['PUT', 'DELETE'])\ndef single_book(isbn):\n    response_object = {'status': 'success'}\n    if request.method == 'PUT':\n        post_data = request.get_json()\n        book = next(filter(lambda x: x.isbn == isbn, books), None)\n        if book:\n            book.title = post_data.get('title')\n            book.author = post_data.get('author')\n            response_object['message'] = 'Book updated'\n        else:\n            response_object['message'] = 'Book does not exist'\n    if request.method == 'DELETE':\n        global books\n        books = list(filter(lambda x: x.isbn != isbn, books))\n        response_object['message'] = 'Book deleted'\n    return jsonify(response_object)\n\n# Run the application\nif __name__ == '__main__':\n    app.run()", "prediction": "### Output:\n```python\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo install the OpenCensus Requests Integration package, run the following code in Python: \n\n```\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',\n    zip_safe=False,\n)\n```\n\n### Input:\n\n\n", "label": "# Copyright 2019, OpenCensus Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,  # noqa\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',  # noqa: E501\n    zip_safe=False,\n)\n", "prediction": "```\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a custom python sorting algorithm.\n\n### Input:\nList of numbers: [3, 2, 1, 4]\n\n", "label": "def custom_sort(list_a):\n    # Creating a list to store the sorted elements\n    sorted_list = []\n\n    while list_a:\n        # Find the smallest number from the list\n        min_item = min(list_a)\n        \n        # Append the smallest number to the sorted list\n        sorted_list.append(min_item)\n        \n        # Remove the number from the original list\n        list_a.remove(min_item)\n    \n    # Return the sorted list\n    return sorted_list\n\nprint(custom_sort([3, 2, 1, 4]))", "prediction": "def sort_list(numbers):\n    sorted_numbers = []\n    for number in numbers:\n        if number not"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-based system in Python for predicting stock market movements.\n\n### Input:\nNot applicable\n\n", "label": "#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to filter out any numbers which is divisible by 3 or 5 in a list.\n\n### Input:\n[1,2,3,4,5,6,7,8,9,10,11,12]\n\n", "label": "def filter_list(lst):\n    \"\"\"\n    This function takes in a list and filters out any\n    numbers which is divisible by 3 or 5.\n\n    Parameters:\n    lst (list): the list\n\n    Returns:\n    list: the list with divisible by 3 and 5 filtered out\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 3 != 0 and num % 5 != 0:\n            result.append(num)\n    return result", "prediction": "def divisible_by_3_or_5(numbers):\n    return [num for num in numbers if num"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given code in Python to reduce its complexity\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\ntotal = 0\n\nfor x in my_list:\n    total = total + x\n\n", "label": "my_list = [1, 2, 3, 4, 5]\ntotal = sum(my_list)\n\nprint(\"Sum of all elements in given list:\", total)", "prediction": "print(total)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a string and returns a string with the characters in reversed order.\n\n### Input:\nString: \"Hello World\"\n\n", "label": "def reverse(str):\n    return str[::-1]", "prediction": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(\"Hello World\"))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that prints out the reverse of a given string.\n\n### Input:\nString = \"Hello World\"\n\n", "label": "def reverse_string(String):\n    rev_str = \"\" \n    for i in String: \n        rev_str = i + rev_str\n    return rev_str\n\nprint(reverse_string(\"Hello World\"))", "prediction": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(\"Hello World\"))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python dictionary containing student names and marks as key-value pairs.\n\n### Input:\n\n\n", "label": "student_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}", "prediction": "student_marks = {\n    'John': 90,\n    'Jane': 80,\n    '"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python that converts a given string of numbers separated by commas into a list of integers.\n\n### Input:\n\"1, 2, 3, 4, 5\"\n\n", "label": "def convert_strings_to_list(input_str):\n    # split the input string on ',' \n    input_str_list = input_str.split(',')\n    # create an empty list \n    output_list = []\n    # loop through each element in the list\n    for i in input_str_list:\n        # convert the element in list to a integer and append it to the output list\n        output_list.append(int(i))\n    # return the output list\n    return output_list\n\nif __name__ == '__main__':\n  list_str = \"1, 2, 3, 4, 5\"\n  output_list = convert_strings_to_list(list_str)\n  print(output_list)", "prediction": "### Output:\n[1, 2, 3, 4, 5]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a mathematical vector. The class should have a constructor, methods for printing the vector, adding two vectors, and computing the dot product of two vectors.\n\n### Input:\nNot applicable\n\n", "label": "class Vector:\n    def __init__(self, v):\n        self.v = v\n\n    def __str__(self):\n        return str(self.v)\n\n    def add(self, other):\n        if len(self.v) != len(other.v):\n            raise ValueError('Vectors must be of the same length.')\n\n        return Vector([self.v[i] + other.v[i] for i in range(len(self.v))])\n\n    def dot(self, other):\n        if len(self.v) != len(other.v):\n            raise ValueError('Vectors must be of the same length.')\n\n        return sum(self.v[i] * other.v[i] for i in range(len(self.v)))", "prediction": "### Output:\nclass Vector:\n    def __init__(self, x, y, z):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a Python program to check the length of each word in a given string.\n\n### Input:\n\n\n", "label": "def lengthWord(inp):\n    result = []\n    for word in inp.split(' '):\n        result.append(len(word))\n    return result\n\n# Driver Code\ninp = \"Generating a code generation task instructions\"\nprint(lengthWord(inp))", "prediction": "def check_length(string):\n    words = string.split()\n    for word in words:\n        if len"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to validate the given password according to the given criteria.\n\n### Input:\nThe given criteria are: minimum 8 characters, should contain one uppercase letter, should contain one numeric digit\n\n", "label": "def validate_password(password):\n    if len(password) < 8:\n        return False\n    if not any(c.isupper() for c in password):\n        return False\n    if not any(c.isdigit() for c in password):\n        return False\n    return True", "prediction": "### Output:\ndef validate_password(password):\n    if len(password) < 8:\n        return False"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes two strings and outputs the longest common substring\n\n### Input:\n\n\n", "label": "def longestCommonSubstring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest: \n                    longest = m[x][y] \n                    x_longest = x \n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "prediction": "def longest_common_substring(s1, s2):\n    m = len(s1)\n    n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Dockerfile that will run the program you wrote in Task 4.\n\n### Input:\nNot applicable\n\n", "label": "FROM python:3.7\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\nEXPOSE 8080\nCOPY . /usr/src/app\nRUN pip install -r requirements.txt\nENTRYPOINT [\"python\", \"scrape.py\"]", "prediction": "### Output:\nFROM python:3.8-slim\nCOPY . /app\nWORKDIR /"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that takes a list of strings as the input parameter and returns a single string which contains all the strings that were input.\n\n### Input:\n[ 'Hello', 'world!', 'Welcome', 'to', 'the', 'programming', 'world!']\n\n", "label": "def strings_to_string(string_list):\n    \"\"\"Function that takes a list of strings as parameter and returns a single string which contains all the strings supplied as input\"\"\"\n    final_string = \"\"\n    for string in string_list:\n        final_string += string + \" \"\n    return final_string\n\nstring_list = ['Hello', 'world!', 'Welcome', 'to', 'the', 'programming', 'world!']\nprint(strings_to_string(string_list))", "prediction": "### Output:\n'Hello world! Welcome to the programming world!'"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a regular expression to find all emails in a given string in Python.\n\n### Input:\nmyString = \"my name is Joe and my email is joe@example.com\"\n\n", "label": "import re \n\npattern = \"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\"\n\nresult = re.findall(pattern, myString)\n\nprint(result) # Output will be [\"joe@example.com\"]", "prediction": "import re\npattern = r'\\b[A-Za-z0-9._%+-]+@[A"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python implementation of the V4 Variant of the Protocol - BSON. To use it, import the Protocol4 class from this module and create an instance of it. Then, call the appropriate methods on the instance to interact with the protocol. The available methods include login, logout, addGame, delGame, addPlayer, delPlayer, updatePlayer, and list. The protocol requires authentication before executing any method, except for login. The login method takes a username and password or token as arguments and returns a deferred that will fire when the login is complete. The other methods take various arguments and return deferreds that will fire when the corresponding operation is complete.\n\n### Input:\n\n\n", "label": "# -*- coding: utf-8 -*-\n# vim: set et sts=4 sw=4 encoding=utf-8:\n#\n# This file is part of Warzone 2100.\n# Copyright (C) 2011  Warzone 2100 Project\n#\n# Warzone 2100 is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# Warzone 2100 is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Warzone 2100; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA\n#\n###############################################################################\n\n# This is the V4 Variant of the Protocol - BSON.\n\n__all__ = ['Protocol4']\n\nfrom twisted.internet import defer\nfrom twisted.python import log\nfrom socketrpc.twisted_srpc import SocketRPCProtocol, set_serializer, Fault\n\nfrom wzlobby import settings\n\nset_serializer('jsonlib')\n\nNO_GAME = -402\nNOT_ACCEPTABLE = -403\nWRONG_LOGIN = -404\nLOGIN_REQUIRED = -405\nSESSION_INVALID = -406\n\nclass Protocol4(SocketRPCProtocol):\n    game = None\n\n    lobbyVersion = 4\n\n    def connectionMade(self):\n        SocketRPCProtocol.connectionMade(self)\n\n        self.debug = settings.debug\n        self.gameDB = self.factory.gameDB\n        self.db = self.factory.db\n\n        self.authenticated = False\n\n\n    def dispatch_call(self, method, id, args, kwargs):\n        if not self.authenticated \\\n          and settings.login_required \\\n          and method != 'login':\n            log.msg('Not executing %s - login required' % method)\n            return defer.fail(\n                    Fault(LOGIN_REQUIRED, \"Please login first!\")\n            )\n\n        log.msg('executing docall_%s' % method)\n\n        return SocketRPCProtocol.dispatch_call(self, method, id, args, kwargs)\n\n\n    def docall_login(self, username, password=None, token=None):\n        def check_pass_cb(result):\n            # Login ok\n            self.authenticated = True\n            return result\n\n        def check_pass_eb(failure):\n            self.authenticated = False\n            return defer.fail(Fault(WRONG_LOGIN, \"Password login failed, unknown user or wrong password!\"))\n\n        def check_token_cb(result):\n            # Token login ok\n            self.authenticated = True\n            return result\n\n        def check_token_eb(failure):\n            self.authenticated = False\n            return defer.fail(Fault(WRONG_LOGIN, \"Token login failed, unknown user or wrong password!\"))\n\n        if token is None:\n            d = self.db.check_user_password(username, password, self.transport.getPeer().host)\n            d.addCallbacks(check_pass_cb, check_pass_eb)\n        else:\n            d = self.db.check_user_token(username, token, self.transport.getPeer().host)\n            d.addCallbacks(check_token_cb, check_token_eb)\n\n        return d\n\n\n    def docall_logout(self):\n        self.authenticated = False\n\n        return defer.succeed(\"\")\n\n\n    def docall_addGame(self, *args, **kwargs):\n        def checkFailed(reason):\n            return defer.fail(\n                    Fault(\n                          NOT_ACCEPTABLE,\n                          reason.getErrorMessage()\n                   )\n            )\n\n\n        def checkDone(result):\n            self.gameDB.register(game)\n\n            log.msg('new game %d: \"%s\" from \"%s\".' % (game['gameId'],\n                                                      game['description'].encode('utf8'),\n                                                      game['hostplayer'].encode('utf8')))\n\n            return {\"gameId\": game['gameId'],\n                    \"result\": result}\n\n\n        game = self.gameDB.create(self.lobbyVersion)\n\n        # Update the game with the received data        \n        for k, v in kwargs.iteritems():\n            try:\n                game[k] = v\n            except KeyError:\n                pass\n\n        # Add hosts ip\n        game['host'] = self.transport.getPeer().host\n\n        d = self.gameDB.check(game)\n        d.addCallback(checkDone)\n        d.addErrback(checkFailed)\n\n        return d\n\n\n    def docall_delGame(self, gameId):\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        self.gameDB.remove(game)\n\n        return defer.succeed('')\n\n\n    def docall_addPlayer(self, gameId, slot, name, username, session):\n        def check_cb(result):\n            if result:\n                game['currentPlayers'] += 1\n                return defer.succeed('')\n            else:\n                return defer.fail(Fault(SESSION_INVALID, 'Users session is invalid!'))\n\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        d = self.db.check_user_session(username, session)\n        d.addCallback(check_cb)\n\n        return d\n\n\n    def docall_delPlayer(self, gameId, slot):\n        game = self.gameDB.get(gameId, False)\n        if not game:\n            return defer.fail(\n                    Fault(NO_GAME, 'Game %d does not exists' % gameId)\n            )\n\n        game['currentPlayers'] -= 1\n        return defer.succeed('')\n\n\n    def docall_updatePlayer(self, gameId, slot, name):\n        return defer.succeed('')\n\n\n    def docall_list(self, maxgames=9999):\n        maxgames = int(maxgames);\n\n        games = []\n        for game in self.gameDB.itervalues():\n            # Skip empty games.\n            if not game['description']:\n                continue\n\n            games.append({\n                \"host\"           : game[\"host\"],\n                \"port\"           : game[\"port\"],\n                \"description\"    : game[\"description\"],\n                \"currentPlayers\" : game[\"currentPlayers\"],\n                \"maxPlayers\"     : game[\"maxPlayers\"],\n                \"multiVer\"       : game[\"multiVer\"],\n                \"wzVerMajor\"     : game[\"wzVerMajor\"],\n                \"wzVerMinor\"     : game[\"wzVerMinor\"],\n                \"isPrivate\"      : game[\"isPrivate\"],\n                \"modlist\"        : game[\"modlist\"],\n                \"mapname\"        : game[\"mapname\"],\n                \"hostplayer\"     : game[\"hostplayer\"],\n            })\n\n            maxgames -= 1\n            if maxgames == 0:\n                break;\n\n        return defer.succeed(games)\n", "prediction": "import bson\nfrom bson import json_util\nfrom bson.objectid import ObjectId\nfrom bson.binary import"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to automatically close a database connection after a specific duration of time\n\n### Input:\n\n\n", "label": "import time\n\n# Connect to the database\ndb_conn = db_connect()\n\n# Set the duration in seconds    \nduration = 10\n \n# Start the timer\nstart_time = time.time()\n\n# Check if the duration has been exceeded\nwhile (time.time() - start_time) < duration:\n    # Continue with the database operation.\n \n# Close the database connection\ndb_conn.close()", "prediction": "```python\nimport sqlite3\nimport time\n\ndef close_db_connection(db):\n    # Close the"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize array sorting to sort an array in Python.\n\n### Input:\narr = [10, 7, 8, 4, 2, 9]\n\n", "label": "arr.sort() \nprint(arr)", "prediction": "def sort_array(arr):\n    arr.sort()\n    return arr\n\nprint(sort_array(arr))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to automatically delete any repeated words from a given text.\n\n### Input:\nThe cat was was running running in the park\n\n", "label": "text = \"The cat was running in the park\"\n\nwords = text.split(' ')\nunique_words = []\n\nfor word in words:\n if word not in unique_words: \n  unique_words.append(word)\n\nprint(' '.join(unique_words))", "prediction": "def remove_repeated_words(text):\n    words = text.split()\n    unique_words = []\n    for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to reverse an integer.\n\n### Input:\n\n\n", "label": "def reverse_integer(n):\n    # initialize the output to 0\n    rev = 0\n\n    # use a while loop to iterate through the number,\n    # adding each digit to the output\n    while n > 0:\n        rev = (rev * 10) + (n % 10)\n        n = n // 10\n\n    return rev", "prediction": "def reverse_integer(n):\n    return int(str(n)[::-1])"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that prompts the user for input to create a module description file. To use this script, run it in a terminal or command prompt. The script will ask for various information about the module, such as its name, version, description, author, repository URL, and license. It will also ask if the module is an executable and create necessary folders. Once all the information is provided, the script will write the module description file.\n\n### Input:\n\n\n", "label": "# Copyright 2014 ARM Limited\n#\n# Licensed under the Apache License, Version 2.0\n# See LICENSE file for details.\n\n# standard library modules, , ,\nfrom __future__ import print_function\nimport os\nimport logging\nimport re\n\n# Component, , represents an installed component, internal\nfrom .lib import component\n# version, , represent versions and specifications, internal\nfrom .lib import version\n# validate, , validate various things, internal\nfrom .lib import validate\n\nKnown_Licenses = {\n             'isc': 'https://spdx.org/licenses/ISC',\n      'apache-2.0': 'https://spdx.org/licenses/Apache-2.0',\n             'mit': 'https://spdx.org/licenses/MIT',\n    'bsd-3-clause': 'https://spdx.org/licenses/BSD-3-Clause'\n}\n\nGit_Repo_RE = re.compile(\"^(git[+a-zA-Z-]*:.*|.*\\.git|.*git@.*github\\.com.*)$\")\nHG_Repo_RE  = re.compile(\"^(hg[+a-zA-Z-]*:.*|.*\\.hg)$\")\nSVN_Repo_RE = re.compile(\"^svn[+a-zA-Z-]*:.*$\")\n\n\n\ndef getUserInput(question, default=None, type_class=str):\n    # python 2 + 3 compatibility\n    try:\n        global input\n        input = raw_input\n    except NameError:\n        pass\n    while True:\n        default_descr = ''\n        if default is not None:\n            default_descr = ' <%s> ' % str(default)\n        value = input(question + default_descr)\n        if default is not None and not value:\n            if type_class:\n                return type_class(default)\n            else:\n                return default\n        try:\n            typed_value = type_class(value)\n            break\n        except:\n            print('\"%s\" isn\\'t a valid \"%s\" value' % (value, type_class.__name__))\n    return typed_value\n\ndef yesNo(string):\n    if string.strip().lower() in ('yes', 'y'):\n        return True\n    elif string.strip().lower() in ('no', 'n'):\n        return False\n    else:\n        raise ValueError()\nyesNo.__name__ = \"Yes/No\"\n\ndef repoObject(string):\n    string = string.strip()\n    if not string:\n        return None\n    elif Git_Repo_RE.match(string):\n        repo_type = 'git'\n        url = Git_Repo_RE.match(string).group(0)\n    elif HG_Repo_RE.match(string):\n        repo_type = 'hg'\n        url = HG_Repo_RE.match(string).group(0)\n    elif SVN_Repo_RE.match(string):\n        repo_type = 'svn'\n        url = SVN_Repo_RE.match(string).group(0)\n    else:\n        raise ValueError()\n    return {'type':repo_type, 'url':url}\n\ndef listOfWords(string):\n    if isinstance(string, list):\n        return string\n    else:\n        return list(filter(bool, re.split(\",|\\\\s\", string)))\n\ndef addOptions(parser):\n    pass\n\ndef execCommand(args, following_args):\n    cwd = os.getcwd()\n    c = component.Component(cwd)\n    if c:\n        logging.info('The current directory already a contains a module: existing description will be modified')\n    elif os.path.isfile(c.getDescriptionFile()):\n        logging.error('A module description exists but could not be loaded:')\n        logging.error(c.error)\n        return 1\n\n    default_name = c.getName()\n    if not default_name:\n        default_name = validate.componentNameCoerced(os.path.split(cwd)[1])\n    \n    c.setName(getUserInput(\"Enter the module name:\", default_name))\n    c.setVersion(getUserInput(\"Enter the initial version:\", str(c.getVersion() or \"0.0.0\"), version.Version))\n\n    def current(x):\n        return c.description[x] if x in c.description else None\n\n    c.description['description'] = getUserInput(\"Short description: \", current('description'))\n    c.description['keywords']    = getUserInput(\"Keywords: \", ' '.join(current('keywords') or []), listOfWords)\n    c.description['author']      = getUserInput(\"Author: \", current('author'))\n\n    current_repo_url = current('repository')\n    if isinstance(current_repo_url, dict):\n        current_repo_url = current_repo_url['url']\n    new_repo_url = getUserInput(\"Repository url: \", current_repo_url, repoObject)\n    if new_repo_url:\n        c.description['repository'] = new_repo_url\n    c.description['homepage']    = getUserInput(\"Homepage: \", current('homepage'))\n\n    if not current('licenses') or current('license'):\n        license = getUserInput('What is the license for this project (Apache-2.0, ISC, MIT etc.)? ', 'Apache-2.0')\n        license_url = None\n        if license.lower().strip() in Known_Licenses:\n            license_url = Known_Licenses[license.lower().strip()]\n            c.description['licenses'] = [{'type':license, 'url':license_url}]\n        else:\n            c.description['license'] = license\n\n    c.description['dependencies']       = current('dependencies') or {}\n    c.description['targetDependencies'] = current('targetDependencies') or {}\n\n    isexe = getUserInput(\"Is this module an executable?\", \"no\", yesNo)\n    if isexe:\n        c.description['bin'] = './source'\n\n\n    # Create folders while initing\n    folders_to_create = [\"./source\", \"./test\", \"./\" + c.getName()]\n    for folder_name in folders_to_create:\n        if not os.path.exists(folder_name):\n            os.mkdir(folder_name)\n\n    c.writeDescription()\n\n", "prediction": "```python\nimport os\nimport sys\n\ndef create_module_description():\n    # Prompt user for input"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Lambda function in Python to validate a user's settings. The function should check to make sure that the user has provided valid values for each setting and return an error if any of them are invalid.\n\n### Input:\nsettings = {\n \"name\": \"John Smith\", \n \"age\": 29, \n \"city\": \"New York\"\n}\n\n", "label": "def validate_user(event, context):\n valid_fields = [\"name\", \"age\", \"city\"]\n valid_values = [\"John Smith\", 29, \"New York\"]\n \n event_body = event.get(\"body\")\n if not event_body:\n return {\n \"statusCode\": 400, \n \"body\": \"Invalid data\"\n }\n \n for key, value in event_body.items():\n if key not in valid_fields:\n return {\n \"statusCode\": 400, \n \"body\": f\"Invalid field {key}\"\n }\n if value not in valid_values:\n return {\n \"statusCode\": 400, \n \"body\": f\"Invalid value for field {key}\"\n }\n \n return {\n \"statusCode\": 200,\n \"body\": \"User has valid configuration\"\n }", "prediction": "def validate_settings(settings):\n    if not isinstance(settings[\"name\"], str):\n        return \"Name must"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for downloading a web page's HTML content.\n\n### Input:\nhttp://example.com\n\n", "label": "import requests\n \nurl = 'http://example.com'\n \nr = requests.get(url)\nhtml = r.text\n \nwith open('page.html', 'w') as f:\n f.write(html)", "prediction": "import requests\nurl = 'http://example.com'\nresponse = requests.get(url)\nhtml = response"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove all vowels in a given string.\n\n### Input:\n\"Hello, World!\"\n\n", "label": "def remove_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"\") \n    return string\n\nprint(remove_vowels(\"Hello, World!\"))", "prediction": "def remove_vowels(string):\n    vowels = \"aeiou\"\n    for vowel in vowels:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the sum of all elements in a matrix.\n\n### Input:\nmatrix = [[1, 7, 3], [9, 2, 8], [3, 1, 7]]\n\n", "label": "def sum_of_elements_matrix(matrix):\n    # Initialize result \n    result = 0\n    # Iterate through the matrix\n    for row in matrix:\n        for col in row: \n            result += col \n    # Return the result\n    return result", "prediction": "def sum_matrix(matrix):\n    total = 0\n    for row in matrix:\n        for element"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a fullstack web application using Python, JavaScript, and CSS.\n\n### Input:\n\n\n", "label": "# Backend\n\n# Flask application\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret'\n\n# Database\ndb = SQLAlchemy(app)\n\n# Frontend\n# HTML template\n<html>\n    <head>\n        <title>My App</title>\n    </head>\n    <body>\n        <h1>Welcome to My App</h1>\n        <div>\n            <p>Content here...</p>\n        </div>\n    </body>\n</html>\n\n# JavaScript\n// Initialize the page\nwindow.onload = function() {\n    // Run any set up code here...\n}\n\n// Add event listeners\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Event listener code here...\n});\n\n# CSS\nbody {\n    background-color: #fefefe;\n    font-family: sans-serif;\n    font-size: 1.2rem;\n    line-height: 1.5;\n}", "prediction": "```python\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program which takes a two strings and finds out if they are anagrams.\n\n### Input:\n\n\n", "label": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    hashmap = {}\n    \n    for letter in str1:\n        if letter in hashmap:\n            hashmap[letter] += 1\n        else:\n            hashmap[letter] = 1\n    \n    for letter in str2:\n        if letter not in hashmap or hashmap[letter] == 0:\n            return False\n        else:\n            hashmap[letter] -= 1\n            \n    for key in hashmap:\n        if hashmap[key] != 0:\n            return False\n            \n    return True", "prediction": "def is_anagram(str1, str2):\n    if len(str1) != len(str2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a tweetbot Python script that daily acts as an alarm clock and sends tweets at a given time.\n\n### Input:\nNot applicable\n\n", "label": "import tweepy\nfrom datetime import datetime\n\n# Authentication\nauth = tweepy.OAuthHandler(\"CONSUMER KEY\",\n \"CONSUMER SECRET\")\nauth.set_access_token(\"ACCESS TOKEN KEY\",\n \"ACCESS TOKEN SECRET\")\n\n# Connect to the API\napi = tweepy.API(auth)\n\n# Set the time (in hours) for the tweet\ntime = 17\n\n# Tweet message\nmessage = \"It's time to wake up!\"\n\n# Set an infinite loop\nwhile True:\n # Get the current time\n now = datetime.now()\n if now.hour == time:\n # Tweet the message\n api.update_status(message)\n break", "prediction": "### Output:\nimport tweepy\nimport time\nfrom datetime import datetime\n\nconsumer_key = 'YOUR"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST API endpoint in Python Flask to return a list of users, sorted by last name.\n\n### Input:\nNo input\n\n", "label": "@app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    users = User.query.order_by(User.last_name).all()\n    return jsonify([user.serialize() for user in users]), 200", "prediction": "### Output:\ndef get_users():\n    users = [\n        {\"id\": 1, \"first"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to predict if a given pattern of features of a target user can be classified as a fraud.\n\n### Input:\nfeatures = ['high credit' , 'low age' , 'high spending']\n\n", "label": "import numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n#define the labels\nlabels = {'fraud': 0, 'not fraud': 1}\n\n#defining the training data and the labels\ntrain_data = [[1, 'high credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'high spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              [1, 'low credit', 'low age', 'low spending'],\n              [0, 'low credit', 'low age', 'low spending'],\n              ]\ntrain_labels = [0, 1, 0, 1, 0, 1, 0]\n\n#fitting the classifier\nclf = GaussianNB()\nclf.fit(train_data, train_labels)\n\n#prediction\nfeatures = ['high credit' , 'low age' , 'high spending']\nlabel = clf.predict([features])\n\nif label == labels['fraud']:\n    print('Target user is a fraud')\nelse:\n    print('Target user is not a fraud')", "prediction": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function that takes in three strings as parameters and returns a list containing sorted versions of the strings.\n\n### Input:\n\"apples\", \"oranges\", \"peaches\"\n\n", "label": "def sort_strings(s1, s2, s3):\n    return sorted([s1, s2, s3])\n\nresult = sort_strings('apples', 'oranges', 'peaches')\nprint(result)", "prediction": "def sort_strings(str1, str2, str3):\n    return [sorted(str1), sorted"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program that prints out all the prime numbers until a given number n.\n\n### Input:\n\n\n", "label": "def is_prime(n): \n        for i in range(2,int(n ** 0.5)+1):\n            if (n % i) == 0:\n                return False\n        return True\n\ndef print_prime_numbers_up_to_n(n):\n    for num in range(2, n + 1): \n        if is_prime(num):\n            print(num) \n\nprint_prime_numbers_up_to_n(n)", "prediction": "def is_prime(n):\n    if n == 2:\n        return True\n    if n %"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()", "prediction": "### Output:\nimport dialogflow from google.cloud import dialogflow\n\n# Create a session client\nsession"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that combines two lists into a dictionary. The dictionary should have the elements of the first list as its keys and the elements of the second list as its values.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\n", "label": "def combine_lists_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nresult = combine_lists_to_dict(list1, list2)\nprint(result)  # {1: 'one', 2: 'two', 3: 'three'}", "prediction": "def combine_lists(list1, list2):\n    return dict(zip(list1, list2))\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that prints out the highest prime factor for each integer between 1 and 10.\n\n### Input:\nNot applicable\n\n", "label": "def prime_factor(n):\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n return n\n\nfor num in range(1, 11):\n factor = prime_factor(num)\n print(f\"The highest prime factor of {num} is {factor}\")", "prediction": "### Output:\ndef highest_prime_factor(n):\n    if n == 1:\n        return 1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python which takes a matrix of integers as input and returns the position of the largest element in the matrix.\n\n### Input:\nmatrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]]\n\n", "label": "def max_pos(mat):\n max_v = -float('inf')\n max_i = -1\n max_j = -1\n \n for i in range(len(mat)):\n  for j in range(len(mat[i])):\n   if mat[i][j] > max_v:\n    max_i = i\n    max_j = j\n \n return (max_i, max_j)\n \nmatrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]]\npos = max_pos(matrix)\nprint(pos) # (1, 1)", "prediction": "def find_largest(matrix):\n    largest = matrix[0][0]\n    row, col ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a Convolutional Neural Network (CNN) model in Python that can recognize handwriting digits from the MNIST dataset.\n\n### Input:\n\n\n", "label": "# Imports\nimport torch.nn as nn\nimport torch\n\n# CNN Model\nclass CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        # Convolutional blocks\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(1, 6, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(6, 16, 3, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2))\n        # Fully connected layers\n        self.fc1 = nn.Linear(5 * 5 * 16, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n \n    def forward(self, x):\n        # Forward pass through convolutional blocks\n        out = self.conv1(x)\n        out = self.conv2(out)\n        # Flatten the tensor for use in fully connected layers\n        out = out.view(-1, 5 * 5 * 16)\n        # Forward pass through fully connected layers\n        out = self.fc1(out)\n        out = self.fc2(out)\n        out = self.fc3(out)\n        return out\n\n# Create an instance of the model \nmodel = CNN()\n# Move model to GPU if available\nif torch.cuda.is_available():\n  model.cuda()", "prediction": "import tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.datasets import mnist\n\n# Load"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to illustrate the concept of Threading.\n\n### Input:\n\n\n", "label": "from threading import Thread\n\ndef worker():\n    print(\"I am a worker\")\n\nthreads = list()\nfor _ in range(5):\n    th = Thread(target=worker)\n    threads.append(th)\n    th.start()\n\nfor th in threads:\n    th.join()\n\nprint(\"Done\")", "prediction": "import threading\nimport time\n\ndef print_hello():\n    print(\"Hello\")\n    time.sleep(1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in a string of numbers delimited by spaces and returns the largest number.\n\n### Input:\n64 8 224 54 21\n\n", "label": "def findMax(string):\n  numbers = string.split(\" \")\n  largest = 0\n  \n  for number in numbers:\n    if number > largest:\n      largest = number\n      \n  return largest\n  \nstring = \"64 8 224 54 21\"\nprint(f\"The largest number is {findMax(string)}.\")", "prediction": "### Output:\n224"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string input and for each line prints the length of the line, the longest/shortest word in the line, and the average word length.\n\n### Input:\nThe quick brown fox jumps over the lazy dog.\n\n", "label": "# take input as a string\ntext = 'The quick brown fox jumps over the lazy dog.'\n\n# loop through lines\nfor line in text.splitlines():\n\n # get line stats\n line_length = len(line)\n words = line.split()\n longest_word_length = len(max(words))\n shortest_word_length = len(min(words))\n average_word_length = line_length / len(words)\n\n # print line stats\n print(\"Line length:\", line_length)\n print(\"Longest word length:\", longest_word_length)\n print(\"Shortest word length:\", shortest_word_length)\n print(\"Average word length:\", average_word_length)\n print()", "prediction": "The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog.\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove duplicate items from a list.\n\n### Input:\n[1, 2, 3, 4, 3, 2, 4]\n\n", "label": "def remove_duplicate(inlist):\n    outlist = []\n    for item in inlist:\n        if item not in outlist:\n            outlist.append(item)\n    return outlist\n\nresult = remove_duplicate([1, 2, 3, 4, 3, 2, 4])\nprint(result)", "prediction": "def remove_duplicate_items(my_list):\n    \"\"\"Remove duplicate items from a list.\"\"\"\n    return list(set"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the stock prices of a company given the stock prices for the be past 10 days.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv(\"stock_data.csv\")\nX = df[['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']]\ny = df['Day11']\n\nmodel = LinearRegression()\nmodel.fit(X, y)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recursive function in Python that calculates the Fibonacci sequence to the nth number.\n\n### Input:\nn = 10\n\n", "label": "def fib(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fib(n-1) + fib(n-2)\n\nnum = 10\nprint(\"The Fibonacci sequence to the \" + str(num) +\"th number is:\")\nfor i in range(num):\n print(fib(i))", "prediction": "def fib(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a short Python program that prints out the current date and time in the specified format.\n\n### Input:\nFormat - \"YYYY-MM-DD HH:MM:SS\"\n\n", "label": "import time\n\ntime_now = time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(time_now)", "prediction": "### Output:\nimport datetime\nprint(datetime.datetime.now().strftime(\"%Y-%m-%d %H"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an HTML <select> element that displays a list of 3 programming languages\n\n### Input:\n\n\n", "label": "<select>\n  <option value=\"c\">C</option>\n  <option value=\"java\">Java</option>\n  <option value=\"python\">Python</option>\n</select>", "prediction": "```html\n<select>\n  <option value=\"html\">HTML</option>\n  <option value"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class that implements the turtle's position and orientation.\n\n### Input:\n\n\n", "label": "class TurtlePosOri:\n    def __init__(self, pos_x, pos_y, orientation):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.orientation = orientation\n\n    def get_turtle_position(self):\n        return (self.pos_x, self.pos_y)\n\n    def get_turtle_orientation(self):\n        return self.orientation\n\n    def set_turtle_position(self, pos_x, pos_y):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n\n    def set_turtle_orientation(self, orientation):\n        self.orientation = orientation", "prediction": "class Turtle:\n    def __init__(self, x, y, heading):\n        self.x ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the index of the smallest integer in a list.\n\n### Input:\n[1, 4, 7, 8, 10]\n\n", "label": "def find_smallest_int(lst):\n  min_index = 0\n  for index, num in enumerate(lst):\n    if num < lst[min_index]:\n      min_index = index\n  return min_index\n\nlst = [1, 4, 7, 8, 10]\nsmallest_int_index = find_smallest_int(lst)\nprint(\"Index of the smallest integer:\", smallest_int_index)", "prediction": "def find_smallest_index(my_list):\n    smallest = my_list[0]\n    smallest_index ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to create a dictionary with keys as numbers and each key corresponding to the natural number to its right.\n\n### Input:\n\n\n", "label": "def create_dictionary(n):\n  # Create an empty dictionary\n  dictionary = {}\n  \n  # Loop through each number\n  for i in range(1, n + 1):\n    # For each number, add an entry to the dictionary\n    dictionary[i] = i + 1\n    \n  # Return the dictionary\n  return dictionary", "prediction": "def create_dictionary():\n    d = {}\n    for i in range(1, 10):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to cluster a dataset of customer orders to help identify customer segments.\n\n### Input:\n[{'customer': 'John', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, \n{'customer': 'Alice', 'product': 'Airpods', 'price': 200}, \n{'customer': 'John', 'product': 'iPad', 'price': 500}, \n{'customer': 'Tom', 'product': 'iPhone', 'price': 800}, \n{'customer': 'Bob', 'product': 'Airpods', 'price': 200}, \n{'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}]\n\n", "label": "import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ncustomers = pd.DataFrame([\n {'customer': 'John', 'product': 'iPhone', 'price': 800},\n {'customer': 'Tim', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Frank', 'product': 'Macbook', 'price': 1200},\n {'customer': 'Alice', 'product': 'Airpods', 'price': 200},\n {'customer': 'John', 'product': 'iPad', 'price': 500},\n {'customer': 'Tom', 'product': 'iPhone', 'price': 800},\n {'customer': 'Bob', 'product': 'Airpods', 'price': 200},\n {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50},\n])\n\n# Preprocess data\ndata = pd.get_dummies(customers, columns=['product'])\n\n# Fit KMeans model\nmodel = KMeans(n_clusters=3)\nmodel.fit(data)\n\n# Assign clusters\nclusters = model.predict(data)\ncustomers['cluster'] = clusters\n\n# Print results\nprint(customers)", "prediction": "import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load the dataset\ndf = pd"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a hamming code for a given bit string.\n\n### Input:\n\n\n", "label": "def generateHammingCode(bitString):\n    # Get length of the input bit string\n    n = len(bitString) \n  \n    # Calculate the number of parity bits\n    m = 0\n    while 2**m < n + m + 1: \n        m+= 1\n  \n    # Initialize 2 empty lists to store parity and encoded bits\n    parityBits = [] \n    encodedList = [] \n  \n    # Calculate parity bits\n    for i in range(m): \n        k = 2**i \n        parityBits.append(calculateParityBit(bitString, k)) \n  \n    # Generate hamming code\n    j = 0\n    for i in range (1, n + m + 1): \n        if i == 2**j: \n            encodedList.append(parityBits[j])\n            j += 1\n        else :\n            encodedList.append(int(bitString[i - j - 1]))\n          \n    return encodedList\n  \ndef calculateParityBit(bitString, k): \n    counter = 0\n    for i in range(len(bitString)): \n        if i & k == k :\n            counter += int(bitString[i]) \n    if counter % 2 == 0: \n        return '0'\n    else: \n        return '1'", "prediction": "def hamming_code(bit_string):\n    # Initialize the hamming code\n    hamming_code ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop using Python that prints the numbers from 0 to 10 and stops if the number is 8.\n\n### Input:\n\n\n", "label": "for i in range(11):\n    if i == 8:\n        break \n    else:\n        print(i)", "prediction": "for i in range(0, 11):\n    print(i)\n    if i == 8"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python class to represent a math vector in 3D space.\n\n### Input:\n\n\n", "label": "class Vector3D: \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n\n    def magnitude(self): \n        return (self.x**2 + self.y**2 + self.z**2)**0.5 \n  \n    def normalize(self): \n        magnitude = self.magnitude() \n        self.x /= magnitude \n        self.y /= magnitude \n        self.z /= magnitude", "prediction": "class Vector3D:\n    def __init__(self, x, y, z):\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAlign text cells in a table to the left,he right, and center.\n\n### Input:\n\n\n", "label": "# Python program to align text cells in a table to the left,he right, and center \n\ntable = [('Name', 'Age', 'Gender'),\n         ('John', '21', 'Male'),\n         ('Doe', '25', 'Female')]\n\nfor row in table:\n    # Align text to the left \n    left_aligned = \"{:<10}{:<10}{:<10}\".format(*row)  \n    \n    # Align text to the right\n    right_aligned = \"{:>10}{:>10}{:>10}\".format(*row) \n    \n    # Align text to the center\n    center_aligned = \"{:^10}{:^10}{:^10}\".format(*row) \n\nprint(\"Left aligned:\")\nprint(left_aligned) \n\nprint(\"Right aligned:\")\nprint(right_aligned)\n\nprint(\"Center aligned:\")\nprint(center_aligned) \n\n# Output:\n# Left aligned:\n# Name      Age       Gender    \n# John      21        Male      \n# Doe       25        Female  \n\n# Right aligned:\n#      Name      Age      Gender\n#      John       21       Male\n#      Doe        25       Female  \n\n# Center aligned:\n#    Name     Age     Gender  \n#    John      21      Male    \n#    Doe       25      Female", "prediction": "Align text cells in a table to the left,he right, and center.\n\n### Output:\nAlign"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to store multiple objects in a dictionary?\n\n### Input:\n\n\n", "label": "class MultiObjectDict(object):\n    def __init__(self):\n        self.data = {}\n\n    def add(self, key, value):\n        try:\n            self.data[key].append(value)\n        except KeyError:\n            self.data[key] = [value]\n\n    def get(self, key):\n        return self.data.get(key, None)", "prediction": "class Dictionary:\n    def __init__(self):\n        self.dictionary = {}\n\n    def add(self,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a string as an input and prints out all unique substrings in the input string.\n\n### Input:\nabcabc\n\n", "label": "string = \"abcabc\"\n\n# To store unique substring\nlist_unique_substrings = []\n# Iterating through the length of string\nfor index_i in range(len(string)):\n    # Iterating through the range of index_i and string length\n    for index_j in range(index_i, len(string)):\n        # Slice the substring from index_i to index_j\n        substr = string[index_i: index_j + 1]\n        # check if substring is already in list\n        if substr not in list_unique_substrings:\n            list_unique_substrings.append(substr)\n\n# Print the list of unique substrings\nprint(list_unique_substrings)", "prediction": "### Output:\na\nb\nc\nab\nac\nbc\nabc"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that takes a list of numbers as an input and prints the sorted output.\n\n### Input:\n[10, 5, 1, 8, 9, 6]\n\n", "label": "def sort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers", "prediction": "def sort_list(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.\n\n### Input:\n\n\n", "label": "from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import get_language\nfrom django.utils.translation import ugettext as _\nfrom django.utils.encoding import force_unicode, smart_str, smart_unicode\nfrom django.forms.fields import Field\nfrom django.forms import ValidationError\nfrom widgets import TransCharWidget, TransTextWidget\n\ndef get_default_language_name():\n    '''\n    Get language from default language specified by LANGUAGE_CODE in settings\n    Used in error messages\n    '''\n    lang_name = ''\n    for lang in settings.LANGUAGES:\n        if lang[0] == settings.LANGUAGE_CODE:\n            lang_name = lang[1]\n            break\n    return force_unicode(lang_name)\n\nclass TransDbValue(unicode):\n    '''\n    This class implements a unicode string, but with a hidden attribute raw_data.\n    When used as a string it returns the translation of the current language\n    raw_data attribute stores a dictionary with all translations\n    Also implements a method \"get_in_language(language)\" that returns the translation on any available language\n    '''\n    raw_data = {}\n\n    def get_in_language(self, language):\n        if self.raw_data and self.raw_data.has_key(language):\n            return self.raw_data[language]\n        else:\n            return u''\n\n    def set_in_language(self, language, value):\n        self.raw_data[language] = value\n\nclass TransFormField(Field):\n    '''\n    forms field, used when ModelForm (or deprecated form_for_model/form_form_instance) is called\n    Also implements form validation in admin\n    '''\n    def clean(self, value):\n        if isinstance(value, dict) and self.required:\n            filled_value = [ v for v in value.values() if bool(v) ]\n            if not filled_value:\n                raise ValidationError, _(\"This field is required.\")\n        return super(TransFormField, self).clean(value)\n\nclass TransField(models.Field):\n    '''\n    Model field to be subclassed\n    Used for storing a string in many languages at database (with python's dictionary format)\n    pickle module could be used, but wouldn't alow search on fields?\n    '''\n    def get_internal_type(self):\n        return 'TextField'\n\n    def to_python(self, value):\n        if isinstance(value, TransDbValue):\n            return value\n\n        if isinstance(value, dict): # formfield method makes this function be called with value as a dict\n            python_value = value\n        else:\n            try:\n                python_value = eval(value)\n                for k,v in python_value.items():\n                    python_value[k] = smart_unicode(v)\n            except Exception:\n                python_value = None\n        if isinstance(python_value, dict):\n            if python_value.has_key(get_language()) and python_value[get_language()]:\n                result = TransDbValue(python_value[get_language()])\n            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:\n                result = TransDbValue(python_value[settings.LANGUAGE_CODE])\n            else:\n                val = \"bal\"\n                for item in python_value.items():\n                    try:\n                        val = item[1]\n                    except:\n                        pass\n                    if val: break\n\n                result = TransDbValue(python_value.items()[0][1])\n            result.raw_data = python_value\n        else:\n            result = TransDbValue(value)\n            result.raw_data = {settings.LANGUAGE_CODE: value}\n        return result\n\n    def get_db_prep_save(self, value):\n        if not isinstance(value, TransDbValue):\n            return value\n        value = [u\"'%s': '''%s'''\" % (k, v) for k, v in value.raw_data.items()]\n        value = u'{%s}' % u','.join(value)\n        return smart_str(value)\n\n    def formfield(self, **kwargs):\n        defaults = {'form_class': TransFormField}\n        defaults.update(kwargs)\n        return super(TransField, self).formfield(**defaults)\n\n    def flatten_data(self, follow, obj=None): \n        '''\n        for serializing objects\n        '''\n        raw_data = self._get_val_from_obj(obj).raw_data.copy()\n        for k,v in raw_data.items():\n            raw_data[k] = smart_str(v)\n        return {self.attname: raw_data}\n\nclass TransCharField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransCharWidget\n        return super(TransCharField, self).formfield(**kwargs)\n\nclass TransTextField(TransField):\n    '''\n    TransField used with CharField widget\n    '''\n    __metaclass__ = models.SubfieldBase\n\n    def formfield(self, **kwargs):\n        kwargs['widget'] = TransTextWidget\n        return super(TransTextField, self).formfield(**kwargs)\n\n", "prediction": "```python\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass Trans"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to count all unique elements in a list.\n\n### Input:\n[1, 1, 2, 3, 3, 4, 5, 6]\n\n", "label": "def count_unique(lst):\n    unique_count = 0\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_count += 1\n            seen.add(element)\n    return unique_count", "prediction": "def count_unique_elements(my_list):\n    unique_elements = set(my_list)\n    return len(unique_elements"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a sentence and returns a list of words in alphabetical order.\n\n### Input:\nSentence:  The quick brown fox jumped over the lazy dog.\n\n", "label": "sentence = \"The quick brown fox jumped over the lazy dog.\"\n\n# Split sentence into words\nwords = sentence.split()\n\n# Sort list of words alphabetically\nwords.sort()\n\n# Print sorted list of words\nprint(words)\n\n# Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']", "prediction": "def sort_sentence(sentence):\n    words = sentence.split()\n    return sorted(words)\n\nprint(sort_sentence(\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a string and counts how many vowels are in it, regardless of case.\n\n### Input:\namazing\n\n", "label": "def count_vowels(word):\n  answer = 0\n  for letter in word:\n    if letter.lower() in 'aeiou':\n      answer += 1\n  return answer\n\nprint(count_vowels('amazing'))", "prediction": "### Output:\n5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Pascal's triangle with a given number of rows.\n\n### Input:\nNumber of Rows = 8\n\n", "label": "1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1 \n1 5 10 10 5 1 \n1 6 15 20 15 6 1 \n1 7 21 35 35 21 7 1", "prediction": "def pascal_triangle(rows):\n    if rows < 1:\n        return\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find the maximum value in a list of numbers.\n\n### Input:\n[23, 12, 48, 61]\n\n", "label": "def find_max(list_of_numbers):\n    max_val = max(list_of_numbers)\n    return max_val\n\nlist_nums = [23, 12, 48, 61]\nmax_val = find_max(list_nums)\nprint(max_val)", "prediction": "def max_num(list):\n    max = list[0]\n    for i in list:\n        if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a terminal tool to make time interval measures using the Tektronix FCA3103. To use it, run the main function and provide the following arguments: \n- --function or -f: Measuring Function, choose between 'mtint' and 'tint'\n- --interval or -t: Time between samples, an integer\n- --samples or -s: Number of samples, an integer, default is 1\n- --debug or -d: Enable debug output, a boolean, default is False\n- --device or -l: Device port, an integer, default is 1\n- --output or -o: Output data file, a string\n- --ref or -r: Input channel for the reference, an integer, choose between 1 and 2, default is 1\n- --trigl or -g: Input trigger level, a float, default is 1.5\n- --skip or -i: Ignore values far from mean plus error, an integer, default is 0\n- --tstamp or -x: Add timestamping for each measure, a boolean, default is False.\n\n### Input:\n\n\n", "label": "#!   /usr/bin/env   python3\n# -*- coding: utf-8 -*\n'''\nTerminal tool to make Time Interval measures using the Tektronix FCA3103\n\n@file\n@date Created on Sep. 16, 2015\n@author Felipe Torres (torresfelipex1<AT>gmail.com)\n@copyright LGPL v2.1\n'''\n\n# ----------------------------------------------------------------------------|\n#                   GNU LESSER GENERAL PUBLIC LICENSE                         |\n#                 ------------------------------------                        |\n# This source file is free software; you can redistribute it and/or modify it |\n# under the terms of the GNU Lesser General Public License as published by the|\n# Free Software Foundation; either version 2.1 of the License, or (at your    |\n# option) any later version. This source is distributed in the hope that it   |\n# will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant  |\n# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser  |\n# General Public License for more details. You should have received a copy of |\n# the GNU Lesser General Public License along with this  source; if not,      |\n# download it from http://www.gnu.org/licenses/lgpl-2.1.html                  |\n# ----------------------------------------------------------------------------|\n\n# -----------------------------------------------------------------------------\n#                                   Import                                   --\n# -----------------------------------------------------------------------------\nimport datetime\nimport argparse as arg\nfrom subprocess import check_output\n\nfrom FCA3103 import FCA3103\n\n\ndef main() :\n    '''\n    Tool for automatize the control of Tektronix FCA3103 Timer/Counter\n    '''\n    parser = arg.ArgumentParser(description='Tektronix FCA3103 tool')\n\n    parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'],\\\n    required=True)\n    parser.add_argument('--interval', '-t', help='Time between samples', type=int)\n    parser.add_argument('--samples', '-s', help='Number of samples', type=int, \\\n    default=1)\n    parser.add_argument('--debug', '-d', help=\"Enable debug output\", action=\"store_true\", \\\n    default=False)\n    parser.add_argument('--device', '-l', help=\"Device port\", type=int, default=1)\n    parser.add_argument('--output', '-o', help='Output data file', type=str)\n    parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, \\\n    choices=[1,2],default=1)\n    parser.add_argument('--trigl','-g',help='Input trigger level', type=float, \\\n    default=1.5)\n    parser.add_argument('--skip','-i',help='Ignore values far from mean  plus error',type=int, \\\n    default=0)\n    parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=\"store_true\", \\\n    default=False)\n\n    args = parser.parse_args()\n\n    valid_port = False\n    ports = check_output([\"\"\"ls /dev | grep usbtmc\"\"\"],shell=True)[:-1]\n    for p in ports.splitlines():\n        p = p.decode('utf-8')\n        if int(p[-1]) == args.device:\n            valid_port = True\n    if not valid_port:\n        print(\"No device found at /dev/usbtmc%d\" % (args.device))\n        exit(6)  # No such device or address\n\n    device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1)\n    device.show_dbg = args.debug\n    device.t_samples = args.interval\n    device.n_samples = args.samples\n    device.skip_values = True if args.skip > 0 else False\n    device.error = args.skip\n    # TODO: Add de posibility of using different trigger values for the inputs\n    device.trig_level[0] = device.trig_level[1] = args.trigl\n    # try:\n    if args.function == 'mtint':\n        print(\"Measuring Mean Time Interval between the inputs (%d secs)...\" % (args.samples))\n        mean = device.mean_time_interval(args.samples, args.interval)\n        print(\"Mean Time Interval for %d samples: %g\" % (args.samples, mean))\n\n    elif args.function == 'tint':\n        print(\"Measuring Time Interval between the inputs (%d secs)...\" % (args.samples+10))\n        values = device.time_interval(args.samples, tstamp=args.tstamp)\n        if args.output:\n            with open(args.output,'a+') as file:\n                file.write(\"# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\\n\" % args.samples)\n                file.write(\"# %s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n                for v in values:\n                    if args.tstamp:\n                        file.write(\"%g\\t%g\\n\" % (v[0], v[1]))\n                    else:\n                        file.write(str(v))\n                        file.write(\"\\n\")\n            print(\"Output writed to '%s'\" % (args.output))\n        else:\n            print(\"Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\" % args.samples)\n            print(\"%s\\n\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S'))\n            for v in values:\n                print(v)\n\n    # except Exception as e:\n    #     print(e)\n\nif __name__ == \"__main__\" :\n    main()\n", "prediction": "```python\nimport argparse\nimport time\nimport numpy as np\nimport os\nimport sys\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to filter the data in a given DataFrame and store the filtered data in a new DataFrame\n\n### Input:\nFilter data on a data frame by age and store filtered data in a new DataFrame\n\n", "label": "def filter_df_by_age(df, age):\n    # Filter the dataframe\n    filtered_df = df[df['age'] > age]\n\n    # Create the new dataframe\n    new_df = filtered_df.copy()\n\n    # Return the new dataframe\n    return new_df", "prediction": "def filter_data(df, age):\n    filtered_df = df[df['age'] == age]\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.\n\n### Input:\n\n\n", "label": "def sphere_surfacearea(radius):\n    \"\"\"\n    Calculates surface area of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Surface area of a sphere\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)\n\ndef sphere_volume(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius\n    :param radius: Radius of sphere\n    :return: Volume of a sphere\n    \"\"\"\n    return (4 / 3) * math.pi * (radius ** 3)", "prediction": "def sphere(radius):\n    import math\n    surface_area = 4 * math.pi * radius **"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list that contains strings [\"apple\", \"banana\", \"lemon\", \"mango\"].\n\n### Input:\n\n\n", "label": "my_list = [\"apple\", \"banana\", \"lemon\", \"mango\"]", "prediction": "fruits = [\"apple\", \"banana\", \"lemon\", \"mango\"]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to move all the elements greater than or equal to 5 in the given array to the right side of the array.\n\n### Input:\n[3, 2, 5, 1, 1, 9]\n\n", "label": "def move_greater_elements(arr):\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    while left_pointer < right_pointer:\n        while arr[left_pointer] < 5:\n            left_pointer += 1\n        while arr[right_pointer] >= 5 and right_pointer > left_pointer:\n            right_pointer -= 1\n        arr[left_pointer], arr[right_pointer] = arr[right_pointer], arr[left_pointer]\n    return arr", "prediction": "### Output:\n[3, 2, 1, 1, 5, 9"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a sequence of five unique random numbers between 1 and 10\n\n### Input:\n\n\n", "label": "from random import randrange\n\ndef generate_rand_seq(): \n    rand_list = []\n    while len(rand_list) < 5:\n        rand_num = randrange(1, 10)\n        if rand_num in rand_list:\n            continue\n        rand_list.append(rand_num)\n    return rand_list\n\nprint(generate_rand_seq())", "prediction": "import random\ndef generate_random_numbers():\n    numbers = []\n    while len(numbers) < 5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python machine learning model that predicts whether a customer is likely to buy a product based on the customer's past buying history.\n\n### Input:\nsample_data = [\n {\"customer_id\": 1, \"purchase_history\": [1, 0, 0, 0, 1]},\n {\"customer_id\": 2, \"purchase_history\": [0, 1, 0, 0, 0]},\n {\"customer_id\": 3, \"purchase_history\": [0, 0, 1, 0, 1]}\n]\n\n", "label": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndf = pd.DataFrame(sample_data)\n\n# Define the features and target\nX = df.purchase_history\ny = df.customer_id\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Use the model to predict whether a customer is likely to buy a product\npredictions = model.predict([[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1]])\nprint(predictions) # [1, 2, 3]", "prediction": "def create_model(sample_data):\n    # Import necessary libraries\n    from sklearn.linear_model import LogisticRegression"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JSON-based web service using Python's Flask and SQLite.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'\n\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n\ndb.create_all()\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n users = User.query.all()\n return jsonify([user.serialize() for user in users])\n\n@app.route('/user/<int:user_id>', methods=['GET'])\ndef get_user_by_id(user_id):\n user = User.query.get(user_id)\n if user is None:\n  return jsonify({'error': 'User not found'}), 404\n return jsonify(user.serialize())\n\nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\nimport sqlite3\nfrom flask import Flask, jsonify, request\napp = Flask(__"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary of given word frequencies.\n\n### Input:\n[('cat', 2), ('dog', 5), ('bird', 3)]\n\n", "label": "wordFrequencies = {\n 'cat': 2,\n 'dog': 5,\n 'bird': 3\n}", "prediction": "### Output:\n{'cat': 2, 'dog': 5, 'bird': 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement the Tower of Hanoi problem.\n\n### Input:\n\n\n", "label": "def hanoi(disc, source, auxiliary, target):\n    if disc > 0:\n        # Move n - 1 discs from source to auxiliary \n        hanoi(disc - 1, source, target, auxiliary)\n        # Move the last disc from source to target\n        print(\"Move the disc from {} to {}\".format(source, target))\n        # Move the n - 1 discs from auxiliary to target\n        hanoi(disc - 1, auxiliary, source, target)\n\nhanoi(3, 'A', 'B', 'C')", "prediction": "def tower_of_hanoi(n, source, destination, auxiliary):\n    if n == 1:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate N random numbers.\n\n### Input:\n5\n\n", "label": "import random\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers)", "prediction": "import random\nprint(random.sample(range(1, 100), 5))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to format a list of numbers into a tabular form.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n", "label": "def format_list(list_in):\n   list_out = []\n\n   for n in list_in:\n      list_out.append('|'+str(n).ljust(2)+'|')\n   \n   header = '--|--+'\n   header_line = '--|'+'--'*len(list_out)+'|'\n   \n   list_out = [header] + list_out + [header_line]\n   \n   return '\\n'.join(list_out)\n\nprint(format_list([2, 3, 4, 5, 6]))\n\n# Output:\n--|--+\n|2 |\n|3 |\n|4 |\n|5 |\n|6 |\n--|---|", "prediction": "### Output:\n2 3 4 5 6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to optimize an equation for its maximum value\n\n### Input:\n\n\n", "label": "\"\"\"\nCreate a python code to optimize an equation for its maximum value.\n\"\"\"\n\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    # Objective function\n    return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3])\n\nif __name__ == '__main__':\n    # Initial guess\n    x0 = [2,4,1,3]\n\n    # Show initial objective\n    print('Initial Objective: ' + str(objective(x0)))\n\n    #Optimize\n    res = minimize(objective, x0, method='nelder-mead',\n            options={'xtol': 1e-8, 'disp': True})\n\n    #Show final objective\n    print('Final Objective: ' + str(res.fun))\n\n    #Print Optimized values\n    print('Optimized values: ' + str(res.x))", "prediction": "def optimize_equation(x):\n    return x**2 + 2*x + 1\n\ndef"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-based chatbot in Python that can answer simple queries about a product or service.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!')", "prediction": "### Output:\n```python\nimport random\nfrom flask import Flask, request\n\napp = Flask(__"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program for calculating the Fibonacci sequence for large inputs. The program should be optimized for runtime.\n\n### Input:\nNot applicable\n\n", "label": "def fibonacci(num): \n    # Initialize first two Fibonacci Numbers \n    a = 0\n    b = 1\n    # Initialize result \n    result = 0\n  \n    if num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2, num + 1): \n            # Sum numbers\n            result = a + b \n            # Initialize a and b\n            a = b \n            b = result \n    return result \n  \n# Using memoization\ndef fibonacci_memoize(num, memo): \n    # Check if the entry is in the array \n    if memo[num] is not None: \n        return memo[num] \n    # Summize numbers if entry is not in array\n    if num <= 1: \n        result = num \n    else: \n        result = fibonacci_memoize(num - 1, memo) + fibonacci_memoize(num - 2, memo) \n    # Save result in array  \n    memo[num] = result \n    return result \n  \n#Main function\ndef main(): \n    num = int(input(\"Enter number: \")) \n    \n    #result without memorization\n    result_1 = fibonacci(num)\n    print(f\"Result without memoization: {result_1}\") \n      \n    # Intialize a memoization array \n    memo = [None] * (num + 1)\n    #result with memorization\n    result_2 = fibonacci_memoize(num, memo)  \n    print(f\"Result with memoization: {result_2}\") \n\nif __name__ == \"__main__\": \n    main()", "prediction": "### Output:\ndef fib(n):\n    if n <= 1:\n        return n\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the Root Mean Square Error (RMSE) error value for a given prediction.\n\n### Input:\ny_predicted = [1, 2, 3] \ny_actual = [2, 3, 4]\n\n", "label": "from sklearn.metrics import mean_squared_error\n\ndef calculate_rmse(y_predicted, y_actual):\n    error = mean_squared_error(y_predicted, y_actual)\n    rmse = error**0.5\n    return rmse\n\ny_predicted = [1, 2, 3]\ny_actual = [2, 3, 4]\nrmse = calculate_rmse(y_predicted, y_actual)\nprint(rmse) # Output: 1.0", "prediction": "import numpy as np\nrmse = np.sqrt(np.mean((y_predicted - y_actual)**2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to represent a Dog with the following attributes: breed, weight and age.\n\n### Input:\n\n\n", "label": "class Dog:\n  # Initialize the attributes \n  def __init__(self, breed='', weight=0, age=0):\n    self.breed = breed\n    self.weight = weight\n    self.age = age\n    \n  # Print the object values\n  def __str__(self):\n    return f\"{self.breed}, {self.weight}, {self.age}\"\n\n# Creating a new object\nmy_dog = Dog(\"Labrador\", 30, 5)\nprint(my_dog)", "prediction": "class Dog:\n    def __init__(self, breed, weight, age):\n        self.breed"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to print all keywords in a given paragraph.\n\n### Input:\nThe best way to learn a programming language is to practice coding.\n\n", "label": "text = \"The best way to learn a programming language is to practice coding.\"\nwords = text.split()\n\nkeywords = [\"for\", \"if\", \"while\", \"in\", \"range\", \"def\", \"import\", \"from\", \"as\", \"return\"]\n\nfor word in words:\n    if word in keywords:\n        print(word)", "prediction": "def print_keywords(paragraph):\n    keywords = []\n    for word in paragraph.split():\n        if word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that calculates the Euclidean distance between two given points.\n\n### Input:\n\n\n", "label": "# Python\ndef euclidean_distance(point1, point2):\n  x1, y1 = point1\n  x2, y2 = point2\n  return ((x2-x1)**2 + (y2-y1)**2)**0.5\n\n# JavaScript\nfunction euclideanDistance(point1, point2) {\n  let [x1, y1] = point1;\n  let [x2, y2] = point2;\n  return Math.sqrt((x2 - x1)**2 + (y2 - y1)**2);\n}", "prediction": "def euclidean_distance(point1, point2):\n    return math.sqrt(sum((x1 - x"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code allowing the user to convert strings to ints and ints to strings.\n\n### Input:\n\n\n", "label": "def str_to_int(string):\n    return int(string)\n  \ndef int_to_str(integer):\n    return str(integer)", "prediction": "def string_to_int(s):\n    return int(s)\n\ndef int_to_string(i):\n    return str"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to group a list of string elements into a dictionary of word counts.\n\n### Input:\n['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\n", "label": "words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']\n\nword_counts = {word: words.count(word) for word in words}\n\nprint(word_counts)\n# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}", "prediction": "### Output:\n{'hello': 2, 'world': 2, 'this': 1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the exponentiation of a given base and an exponent.\n\n### Input:\nbase = 2\nexponent = 4\n\n", "label": "def pow(base, exponent): \n    result = 1\n    for i in range(exponent): \n        result = result * base \n    return result \n\nbase = 2\nexponent = 4\nprint('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))", "prediction": "def exponent(base, exponent):\n    result = 1\n    for i in range(exponent):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an auto-complete suggestion engine that takes in a prefix string and returns a set of valid words.\n\n### Input:\nprefix = 'pyth'\n\n", "label": "def auto_complete(prefix):\n    valid_words = []\n    words_list = get_words_list()\n\n    for word in words_list:\n        if word.startswith(prefix):\n            valid_words.append(word)\n    return set(valid_words)\n\nprefix = 'pyth'\nprint(auto_complete(prefix))\n# Output: {'python', 'pythagorean', 'pythagoras', 'pythons'}", "prediction": "### Output:\n['python', 'pythons', 'pythonic', 'pythonically', '"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudo code into a Python program.\n\n### Input:\nfor i in range(0, n-1):\n  j = i + 1\n  while j < n:\n    swap(list[i],list[j])\n    j = j + 1\n\n", "label": "def swap(list, i, j):\n  temp = list[i]\n  list[i] = list[j]\n  list[j] = temp\n\ndef permutations(list, n):\n  for i in range(0, n-1):\n    j = i + 1\n    while j < n:\n      swap(list,i,j)\n      j = j + 1\n\nlist = [10, 11, 12]\nn = len(list)\npermutations(list, n)", "prediction": "### Output:\ndef bubble_sort(list):\n    n = len(list)\n    for i in range("}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to uniformly convert any data format into a JSON format.\n\n### Input:\nThis is an example of a string in XML format:\n\n<note>\n <to>Tove</to>\n <from>Jani</from>\n <heading>Reminder</heading>\n <body>Don't forget me this weekend!</body>\n</note>\n\n", "label": "import json\n\ndef convert_to_json(data):\n    \"\"\"Convert any data format into a JSON format.\"\"\"\n    try:\n        # check if data is string\n        if isinstance(data, str):\n            return json.loads(data)\n        # check if data is xml\n        elif data.tag == 'note':\n            return {\n                'to': data.find('to').text,\n                'from': data.find('from').text, \n                'heading': data.find('heading').text,\n                'body': data.find('body').text,\n            }\n    except Exception as e:\n        raise e", "prediction": "This is an example of a string in JSON format:\n\n{\n \"note\": {\n \"to\": \""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a matrix multiplication algorithm using Python.\n\n### Input:\nMatrix A (2x3): \n  2  4  -3 \n  6  1   0  \n\nMatrix B (3x2):\n  1 -1\n  2  0\n  3  4\n\n", "label": "def matrix_multiply(matrixA, matrixB):\n    if len(matrixA[0]) != len(matrixB):\n        print(\"Error: The number of columns of matrix A is not equal to the number of rows of matrix B\")\n        return\n \n    m, n, p = len(matrixA), len(matrixA[0]), len(matrixB[0])\n    result = [[0 for i in range(p)] for j in range(m)]\n    # multiplying matrix A and matrix B \n    for i in range(m): \n        for j in range(p): \n            for k in range(n):\n                result[i][j] += matrixA[i][k] * matrixB[k][j]\n  \n    return result\n\n# Example\nmata = [[2, 4, -3], \n        [6, 1, 0]] \nmatb = [[1, -1],  \n        [2, 0], \n        [3, 4]]\n\nres = matrix_multiply(mata, matb)\n\nfor row in res:\n   print(row)\n\n# Output\n# [4, -4] \n# [24, 12]", "prediction": "Matrix C (2x2):\n  2  4\n  6  1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to read id, name and salary for n employees\n\n### Input:\n4\n\n", "label": "n = int(input('Enter the number of employees: '))\n\n# Initializing dictionaries\nEmployee_ID = {}\nEmployee_Name = {}\nEmployee_Salary = {}\n \n# Looping to get details of each employee\nfor i in range (1, n+1):\n  print('For employee ', i)\n  Employee_ID[i] = int(input('Enter your ID: ' )) \n  Employee_Name[i] = input('Enter your name: '))\n  Employee_Salary[i] = int(input('Enter your salary: '))\n  \nprint('The Employee records are: ') \n  \n# printing data \nfor i in range(1, n+1): \n  print('Employee ID:', Employee_ID[i], 'Employee Name:', Employee_Name[i], 'Employee Salary:', Employee_Salary[i])", "prediction": "### Output:\nid = 1\nname = 'John'\nsalary = 1000\nid"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to aggregate multiple items together into a composite data structure.\n\n### Input:\nitems = [{'code': 'abc', 'foo': 1, 'bar': 'a'}, {'code': 'def', 'foo': 4, 'bar': 'b'}, {'code': 'ghi', 'foo': 6, 'bar': 'c'}]\n\n", "label": "result = {}\n\nfor item in items:\n code = item.get('code')\n foo = item.get('foo')\n bar = item.get('bar')\n if code not in result:\n result[code] = []\n result[code].append({'foo':foo, 'bar':bar})\n\nprint(result)\n# Output {'abc': [{'foo': 1, 'bar': 'a'}], 'def': [{'foo': 4, 'bar': 'b'}], 'ghi': [{'foo': 6, 'bar': 'c'}]}", "prediction": "def aggregate(items):\n    return {item['code']: item for item in items}\n\nprint(aggregate"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to calculate the Gini coefficient of a given dataset.\n\n### Input:\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]\n\n", "label": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605", "prediction": "def gini_coefficient(dataset):\n    # Calculate the mean of the dataset\n    mean = sum"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate all possible strings of length 'n' using characters from a given array.\n\n### Input:\ncharacters = [\"A\", \"B\", \"C\"]\nlength = 3\n\n", "label": "def generate_strings(characters, length):\n    if length == 0:\n        return [\"\"]\n\n    result = []\n    for char in characters:\n        for string in generate_strings(characters, length-1):\n            result.append(char + string)\n\n    return result\n\nstrings = generate_strings([\"A\", \"B\", \"C\"], 3)\nprint(\"Strings:\", strings)", "prediction": "### Output:\n['AAA', 'AAB', 'AAC', 'ABA', 'ABB', '"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a numeric pyramid of size n, with each number from 1 to n in a row and the subsequent rows containing numbers from n-1 to 1.\n\n### Input:\n4\n\n", "label": "n = 4\n\n# Function to create numeric pyramid \ndef numeric_pyramid(n):\n    # Outer loop to handle the number of rows (n in this case) \n    for i in range(0, n): \n      \n        # Inner loop to handle the columns \n        # numbers change according to outer loop (i) \n        for j in range(i+1, n): \n            print(j, end=\"  \") \n        # decrement in the same inner loop \n        for j in range(n-i, 0, -1): \n            print(j, end=\"  \") \n      \n        # new line for each row\n        print()\n      \n# Driver Code \nnumeric_pyramid(n)", "prediction": "### Output:\n1\n22\n333\n4444"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to decide whether a given string is a valid JSON or an invalid one.\n\n### Input:\n\n\n", "label": "import json\n\ndef is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except:\n        return False", "prediction": "def is_valid_json(string):\n    try:\n        json.loads(string)\n        return True\n    except"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that inputs a list of numbers and sorts them in ascending order.\n\n### Input:\nThe list [3,5,2,7,1,8,4]\n\n", "label": "def sort_numbers(numbers): \n    for i in range(len(numbers) - 1):\n        min_index = i\n        for j in range(i + 1, len(numbers)):\n            if numbers[min_index] > numbers[j]:\n                min_index = j\n        numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\n    return numbers\n\nlist_numbers = [3,5,2,7,1,8,4]\nsorted_list = sort_numbers(list_numbers)\n\nprint(sorted_list) # Output: [1, 2, 3, 4, 5, 7, 8]", "prediction": "def sort_list(list):\n    list.sort()\n    return list\n\nprint(sort_list([3,5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that has 3 private variables and 3 public methods.\n\n### Input:\n\n\n", "label": "class MyClass:\n    def __init__(self):\n        self.__var1 = 0\n        self.__var2 = 0\n        self.__var3 = 0\n        \n    def set_var1(self, val):\n        self.__var1 = val\n        \n    def get_var1(self):\n        return self.__var1\n        \n    def incr_var2(self):\n        self.__var2 += 1\n        \n    def get_var2(self):\n        return self.__var2\n        \n    def decr_var3(self):\n        self.__var3 -= 1\n        \n    def get_var3(self):\n        return self.__var3", "prediction": "class MyClass:\n    def __init__(self):\n        self.__private_var1 = 0\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python to generate a multiplication table for the given integer.\n\n### Input:\n\n\n", "label": "def multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)", "prediction": "def generate_multiplication_table(n):\n    for i in range(1, 11):\n        print"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python using the input argument side-effect free function to calculate the square root of a number.\n\n### Input:\n25\n\n", "label": "def get_sqrt(x):\n    return x**0.5", "prediction": "def square_root(x):\n    return x ** 0.5\n\nprint(square_root(25))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort a 5x5 numpy matrix from the lowest to highest values.\n\n### Input:\nnp.array([[8, 2, 6, 7, 4],\n    [7, 9, 5, 4, 6],\n    [2, 3, 7, 1, 4],\n    [5, 8, 4, 9, 6],\n    [4, 7, 8, 2, 1]])\n\n", "label": "import numpy as np\n\n# The given array\narr = np.array([[8, 2, 6, 7, 4],\n                [7, 9, 5, 4, 6],\n                [2, 3, 7, 1, 4],\n                [5, 8, 4, 9, 6],\n                [4, 7, 8, 2, 1]])\n\n# Sort the array in ascending order\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1]).argsort() # new added line\n\n# Get the sorted array\nsorted_arr = arr.reshape(arr.shape[0] * arr.shape[1])[sorted_arr].reshape(arr.shape[0], arr.shape[1])\n\nprint(sorted_arr)", "prediction": "import numpy as np\na = np.array([[8, 2, 6, 7"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the first 20 terms of the Fibonacci sequence.\n\n### Input:\nNot applicable\n\n", "label": "def PrintFibonacci(n):\n a = 0\n b = 1\n for _ in range(n):\n c = a + b \n print(c, end = \" \")\n a = b \n b = c \n\nPrintFibonacci(20)", "prediction": "### Output:\ndef fibonacci():\n    a, b = 0, 1\n    while a"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert a time from 12-hour to 24-hour format.\n\n### Input:\n\n\n", "label": "def time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00", "prediction": "def time_convert(time):\n    if time[-2:] == 'AM' and time[:2]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Naive Bayes classifier in Python.\n\n### Input:\n\n\n", "label": "import numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2)))\n        return probabilities", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping application with Python to extract the price of the top 10 books on Amazon.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nimport bs4\n\n# Make the request to Amazon\nurl = 'https://www.amazon.com/best-sellers-books-Amazon/zgbs/books/ref=zg_bs_nav_0'\nres = requests.get(url)\n\n# Use BeautifulSoup to parse the HTML\nsoup = bs4.BeautifulSoup(res.text, 'html.parser')\n# Extract the top 10 books\nbooks = soup.select('.aok-inline-block.zg-item')[:10]\n# Extract the price for each book\nprices = []\nfor book in books:\n price = book.select('.p13n-sc-price')[0].text.strip()\n prices.append(price)\n \nprint(prices)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Define the"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python with 3 hidden layers of size 50, 40 and 30 respectively.\n\n### Input:\nNot applicable\n\n", "label": "# Define Neural Network\nmodel = tf.keras.Sequential([\n    # First Hidden Layer \n    tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim),\n    # Second Hidden Layer \n    tf.keras.layers.Dense(40, activation='relu'),\n    # Third Hidden Layer \n    tf.keras.layers.Dense(30, activation='relu'),\n    # Output Layer \n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "prediction": "### Output:\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to apply custom formatting for the following output.\n\n### Input:\nGiven a list of strings, output a HTML table with data in the strings\n\n", "label": "def create_html_table(slist):\n    table_html = \"<table>\"\n    for str in slist:\n        table_html += \"<tr>\"\n        table_html += \"<td>\" + str + \"</td>\" \n        table_html += \"</tr>\"\n\n    table_html += \"</table>\"\n    return table_html", "prediction": "### Output:\ndef generate_table(data):\n    # Create a table\n    table = \"<table>\"\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python function that takes a single list of numbers and performs an insertion sort. The function should return a sorted list.\n\n### Input:\n[4, 1, 8, 11, 15]\n\n", "label": "def insertion_sort(arr):  \n    for i in range(1, len(arr)): \n    \n        key = arr[i] \n\n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n\n    return arr\n\ninsertion_sort([4,1,8,11,15])\n\n# Output  [1, 4, 8, 11, 15]", "prediction": "### Output:\n[1, 4, 8, 11, 15]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to display all prime numbers less than a specified number.\n\n### Input:\n\n\n", "label": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes", "prediction": "def prime_numbers(n):\n    prime = []\n    for i in range(2, n):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to edit the following code in such a way that the output is increased is increased by one.\n\n### Input:\ndef add_two_numbers(a, b):\n    c = a + b\n    d = a - b\n    total = c + d\n    print(total)\n\n", "label": "def add_two_numbers(a, b):\n    c = a + b\n    d = a - b\n    total = c + d + 1\n    print(total)", "prediction": "add_two_numbers(2, 3)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that finds the highest number in a given array of integers.\n\n### Input:\n[3, 5, 1, 8, 11, 12]\n\n", "label": "class HighestNumberFinder:\n    def __init__(self, array):\n        self.array = array\n    \n    def find_highest_number(self):\n        highest_number = self.array[0]\n        for number in self.array:\n            if (number > highest_number):\n                highest_number = number\n        return highest_number", "prediction": "### Output:\n12"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between a specified range using Python.\n\n### Input:\n\n\n", "label": "import random \ndef random_num(start, end): \n    num = random.randint(start, end) \n    return num", "prediction": "import random\nprint(random.randint(1, 10))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a SQL query for selecting rows that contain a given value in a given column.\n\n### Input:\nColumn name: age\nValue: 25\n\n", "label": "SELECT * FROM table_name WHERE age=25;", "prediction": "SELECT * FROM table_name WHERE age = 25;"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that takes two integers as input and finds the greatest common divisor of them.\n\n### Input:\n12, 18\n\n", "label": "def find_gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a > b:\n        a, b = b, a\n    \n    while a != 0:\n        b, a = a, b%a\n        \n    return b\n\nprint(find_gcd(12, 18))", "prediction": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that performs linear regression using the gradient descent algorithm in Python.\n\n### Input:\nNot applicable\n\n", "label": "# Import the necessary libraries\nimport numpy as np\n\n# Define the gradient descent function\ndef gradient_descent(x, y):\n  # Initialize the model parameters\n  m = 0\n  c = 0\n\n  # Set the learning rate\n  learning_rate = 0.05\n\n  # Set the number of iteration\n  num_iterations = 1000\n\n  # Perform gradient descent\n  for i in range(num_iterations):\n    # Calculate the cost\n    y_pred = m * x + c\n    cost = np.mean(np.square(y - y_pred))\n\n    # Calculate the derivatives of the cost function with respect to m and c\n    m_deriv = -2 * np.mean((y - y_pred) * x)\n    c_deriv = -2 * np.mean(y - y_pred)\n\n    # Update the model parameters\n    m -= m_deriv * learning_rate\n    c -= c_deriv * learning_rate\n\n  # Print the final model parameters\n  print('Coefficient:', m)\n  print('Intercept:', c)", "prediction": "### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import Linear"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that defines a management command called \"run\". This command executes a standalone Python script after setting up the Django environment. To use this command, run \"python manage.py run scriptname [args ...]\" where \"scriptname\" is the name of the Python script you want to run and \"[args ...]\" are any command line arguments you want to pass to the script. The script will see the modified values of sys.argv, __name__, and __file__ as if it had been called directly.\n\n### Input:\n\n\n", "label": "# -*- coding: UTF-8 -*-\n# Copyright 2012-2013 by Luc Saffre.\n# License: BSD, see LICENSE for more details.\n\"\"\"\n\n.. management_command:: run\n\nExecute a standalone Python script after having set up the Django \nenvironment. Also modify `sys.args`, `__file__` and `__name__` so that \nthe invoked script sees them as if it had been called directly.\n\nThis is yet another answer to the frequently asked Django question\nabout how to run standalone Django scripts\n(`[1] <http://stackoverflow.com/questions/4847469/use-django-from-python-manage-py-shell-to-python-script>`__,\n`[2] <http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/>`__).\nIt is almost the same as redirecting stdin of Django's ``shell`` command \n(i.e. doing ``python manage.py shell < myscript.py``), \nbut with the possibility of using command line arguments\nand without the disturbing messages from the interactive console.\n\nFor example if you have a file `myscript.py` with the following content...\n\n::\n\n  from myapp.models import Partner\n  print Partner.objects.all()\n\n... then you can run this script using::\n\n  $ python manage.py run myscript.py\n  [<Partner: Rumma & Ko O\u00dc>, ...  <Partner: Charlier Ulrike>, \n  '...(remaining elements truncated)...']\n  \n\"\"\"\n\nfrom __future__ import unicode_literals\n\nimport sys\nfrom django.core.management.base import BaseCommand, CommandError\n\n\nclass Command(BaseCommand):\n    help = __doc__\n    args = \"scriptname [args ...]\"\n\n    def handle(self, *args, **options):\n        if len(args) == 0:\n            raise CommandError(\"I need at least one argument.\")\n        fn = args[0]\n        sys.argv = sys.argv[2:]\n        globals()['__name__'] = '__main__'\n        globals()['__file__'] = fn\n        execfile(fn, globals())\n        #~ execfile(fn,{})\n", "prediction": "def run(self, scriptname, *args, **options):\n    \"\"\"Run a standalone script after"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that improves a given string by replacing words with their synonyms.\n\n### Input:\n\"this is an example sentence\"\n\n", "label": "import nltk\n\ndef synonyms_words(text):\n    text_tokens = nltk.word_tokenize(text)\n    replacement_words = []\n    \n    for token in text_tokens:\n        synonyms = nltk.wordnet.synsets(token)\n        if synonyms:\n            replacement_words.append(synonyms[0].name().split('.')[0])\n        else:\n            replacement_words.append(token)\n\n    return ' '.join(replacement_words)\n\ntext = \"this is an example sentence\"\nprint(synonyms_words(text))", "prediction": "### Output:\n\"this is an example sentence\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that searches a given string for all its occurrences of a given substring in a case insensitive manner.\n\n### Input:\nstring = \"Welcome To Programming\"\nsubstring = \"to\"\n\n", "label": "import re\ndef search_substring(string, substring):\n  pattern = re.compile(substring, re.IGNORECASE) # case insensitive\n  match = re.search(pattern, string)\n  if match:\n    print(\"Found the substring at index\", match.start())\n  else:\n    print(\"The substring was not found\")\n\nstring = \"Welcome To Programming\"\nsubstring = \"to\"\n\nsearch_substring(string, substring) # prints \"Found the substring at index 8\"", "prediction": "def search_substring(string, substring):\n    return [i for i, letter in enumerate(string.lower"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to maximize performance.\n\n### Input:\nfor row in records:\n    for key, value in row.items():\n        do_something(key, value)\n\n", "label": "for row in records:\n    for key, value in row.items():\n        try:\n            do_something(key, value)\n        except Exception:\n            pass", "prediction": "### Output:\nfor row in records:\n    for key, value in row.items():\n        do_s"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraping Python program to scrape the product details of a sample store.\n\n### Input:\nThe website is located at https://example.com\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n#  Get the HTML from the webpage\npage = requests.get('https://example.com')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Isolate the product information\nproduct_list = soup.find_all('div', class_='product')\n\n# Extract the product information\nproducts = []\nfor product in product_list:\n   name = product.find('div', class_='name').text.strip()\n   price = product.find('div', class_='price').text.strip()\n   description = product.find('div', class_='description').text.strip()\n   products.append({\n      'name': name,\n      'price': price,\n      'description': description\n   })\n\n# Print the product list\nprint(products)", "prediction": "The product details are located in the following HTML elements:\n\n    <div class=\"product\">\n        <"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python that takes as input a set of numbers and classifies them into two categories.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n", "label": "# import required libraries\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# define the training data and labels\ndata = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\nlabels = np.array([0, 0, 1, 1, 1])\n\n# preprocess the data\nscaled_data = preprocessing.scale(data)\n\n# define and train the model\nmodel = KNeighborsClassifier(n_neighbors=3).fit(scaled_data, labels)", "prediction": "### Output:\n[1, 2, 3, 4, 5]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design an algorithm in Python for finding the largest element in a list?\n\n### Input:\n[2, 4, 9, 1, 8]\n\n", "label": "def max_element(lst):\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element", "prediction": "def find_largest(my_list):\n    largest = my_list[0]\n    for i in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the distance between two points given their coordinates.\n\n### Input:\ncoord1 = (3, 2) \n coord2 = (8, 10)\n\n", "label": "def Euclidean_distance(coord1, coord2):\n    x1, y1 = coord1\n    x2, y2 = coord2\n\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5", "prediction": "def distance(coord1, coord2):\n    x1, y1 = coord1\n    x"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nimport random\nfrom bs4 import BeautifulSoup\n\n#specify website url\nwebsite_url = 'https://www.example.com/people'\n\n#scraping function\ndef scrape_contacts():\n    #load website\n    html = requests.get(website_url).text\n    #parse html\n    soup = BeautifulSoup(html, 'html.parser')\n    contacts = []\n    #extract contact information\n    for contact in soup.find_all('div', {'class': 'contact'}):\n        name = contact.find('h3').text\n        email = contact.find('p', {'class': 'email'}).text\n        phone = contact.find('p', {'class': 'phone'}).text\n        contacts.append({'name': name, 'email': email, 'phone': phone})\n    #randomly select 10 contacts\n    return random.sample(contacts, 10)\n\nscraped_contacts = scrape_contacts()", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport random\n\ndef get_names(url):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for creating a Django web application.\n\n### Input:\n\n\n", "label": "mkdir myproject\ncd myproject\n\n# Create a virtual environment to manage dependencies\npython3 -m venv env\nsource env/bin/activate\n\n# Install Django\npip install django\n\n# Create a new Django project called myproject\ndjango-admin startproject myproject \ncd myproject\n\n# Run migrations\npython manage.py migrate\n\n#Create an app called myapp\npython manage.py startapp myapp", "prediction": "```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef index(request):\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a student which contains attributes for name, age, and gender, and methods for getting the student details and calculating the average age of all students.\n\n### Input:\nNot Applicable\n\n", "label": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Gender:', self.gender)\n\n    @staticmethod\n    def get_avg_age(students):\n        total_age = 0\n        for student in students:\n            total_age += student.age\n        return total_age / len(students)", "prediction": "### Output:\nclass Student:\n    def __init__(self, name, age, gender):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to create a binary tree given the input array.\n\n### Input:\narr = [1, 3, 5, 7, 9]\n\n", "label": "# Python program to create \n# a Binary Tree  \n  \n# A class that represents an  \n# individual node in a Binary Tree \nclass Node: \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# create root  \ndef createTree(arr): \n    n = len(arr) \n  \n    # if array is empty \n    if n == 0: \n        return None\n  \n    # Create root of BST \n    root = Node(arr[0]) \n  \n    # insert remaining elements  \n    # of arr in level order \n    i = 1\n    while i < n: \n        insert(root, arr[i]) \n        i += 1\n  \n    return root \n  \n# Node and root insert \ndef insert(root,key): \n  \n    # create a new node, if root  \n    # is None, the new node is \n    # root \n    if root is None: \n        return Node(key) \n      \n    # if key is less than root's key \n    # then insert key in left subtree \n    if key < root.val: \n        root.left = insert(root.left, key) \n  \n    # if key is greater than root's key \n    # then insert key in right subtree \n    else: \n        root.right = insert(root.right, key) \n  \n    return root \n  \n  \n# Driver Code \nif __name__=='__main__': \n    arr = [1, 3, 5, 7, 9] \n    root = createTree(arr) \n    print(root.val)", "prediction": "### Output:\nBinary Tree\n1\n/ \\\n3   5\n/ \\\n7   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that updates the dictionary with the new key-value pair.\n\n### Input:\ndictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\n", "label": "dictionary = {'apple': 1, 'banana': 2, 'orange': 3}\nkey = 'mango'\nvalue = 4\n\ndictionary[key] = value\nprint(dictionary)\n# {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}", "prediction": "### Output:\n{'apple': 1, 'banana': 2, 'orange': 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python for storing movie information including the name, year of release, genre and rating.\n\n### Input:\n\n\n", "label": "class Movie:\n    def __init__(self, name, release_year, genre, rating):\n        self.name = name\n        self.release_year = release_year\n        self.genre = genre\n        self.rating = rating\n\nmovie = Movie(\"Interstellar\", 2014, \"Sci-Fi\", 8.4)\nprint(movie.name, movie.release_year, movie.genre, movie.rating)", "prediction": "class Movie:\n    def __init__(self, name, year, genre, rating):\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to classify a given list of numbers using try and except block.\n\n### Input:\nlist_of_numbers = [16, 5, 9, 21, 17]\n\n", "label": "def classify_numbers(list_of_numbers):\n    for number in list_of_numbers:\n        try:\n            if number % 3 == 0:\n                print('Number {} is divisible by 3'.format(number))\n        except ZeroDivisionError:\n            print('Number {} cannot be divided by 3: division by zero bug'.format(number))", "prediction": "def classify_numbers(list_of_numbers):\n    try:\n        for number in list_of_numbers:\n            if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate Fibonacci series up to a given number.\n\n### Input:\nn = 10\n\n", "label": "\"\"\"\nWrite a python program to generate Fibonacci series up to a given number \n\"\"\"\n\n# Function to generate fibonacci series \ndef generate_fibonacci(n): \n    # Initialize a list\n    fibonacci_list = [0,1] \n      \n    # Generate the fibonacci series up to n \n    for i in range(2,n): \n        fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) \n\n# Print the result \n    print(fibonacci_list) \n\n# Driver code \nif __name__ == '__main__':\n    n = 10\n    generate_fibonacci(n)  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "prediction": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n <"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to print a Roman Numeral for any number between 1 and 5.\n\n### Input:\n\n\n", "label": "def print_roman_numeral(num):\n    if num == 1:\n        return \"I\"\n    elif num == 2:\n        return \"II\"\n    elif num == 3:\n        return \"III\"\n    elif num == 4:\n        return \"IV\"\n    elif num == 5:\n        return \"V\"\n    else:\n        return \"invalid number\"\n\nnumber = int(input(\"Enter a number between 1 and 5: \"))\nprint(print_roman_numeral(number))", "prediction": "def roman_numeral(number):\n    roman_numeral = {\n        1: 'I',\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple program in Python that prints out the first n fibonacci numbers.\n\n### Input:\n\n\n", "label": "def fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n      # First Fibonacci number is 0 \n   elif n==1: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==2: \n      return 1\n   else: \n      return fibonacci(n-1)+fibonacci(n-2) \n\n# Driver Program \nnterms = 4\nfor i in range(nterms):\n      print(fibonacci(i))", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    for i in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function that converts strings in any given sentence to a capitalized format.\n\n### Input:\nThis is an example sentence\n\n", "label": "def convertToCapitalize(sentence)\n    words = sentence.split()\n    capitalize = [word.capitalize() for word in words]\n    return \" \".join(capitalize)", "prediction": "def capitalize_sentence(sentence):\n    return sentence.title()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI solution in Python that can predict the likelihood of an individual having a heart attack given their age, gender, cholesterol level, and other risk factors.\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Load and prepare the data\ndata = pd.read_csv('data.csv')\nX = np.array(data.iloc[:, 0:4])\ny = np.array(data['Heart Attack Risk'])\n\n# Create the model\nmodel = LogisticRegression(solver='lbfgs')\n\n# Train the model\nmodel.fit(X, y)\n\n# Make the predictions\npredictions = model.predict_proba(X)", "prediction": "### Output:\n```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python using Beautiful Soup to extract data from a given URL. The URL is provided below.\n\n### Input:\nhttps://www.readersdigest.com/features/fun-facts\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nURL = 'https://www.readersdigest.com/features/fun-facts'\npage = requests.get(URL)\n\nsoup = BeautifulSoup(page.content, 'html.parser')\nresults = soup.find_all('div', class_='field-item')\n\nfor result in results:\n    print(result.find('h3').text)\n    print(result.find('p').text)\n    print()", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.readers"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that simulates a dice roll by randomly selecting a number between 1 and 6.\n\n### Input:\n\n\n", "label": "import random\n\n# Simulate a dice roll by randomly selecting a number between 1 and 6\ndie_roll = random.randint(1, 6)\nprint(\"You rolled a\", die_roll)", "prediction": "import random\ndef dice_roll():\n    return random.randint(1, 6)\nprint(dice"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to generate random colors in hexadecimal format.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\ndef generate_hex_color():\n    return '#' +  ''.join([random.choice('0123456789ABCDEF') for x in range(6)])\n\nprint(generate_hex_color()) # Ex: #C2C30F", "prediction": "### Output:\nimport random\ndef random_color():\n    return f'#{random.randint(0,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo use the services-wrapper tool, follow these steps:\n\n1. Install the required python module \"python-mysqldb\" on Ubuntu Linux using the command \"apt-get install python-mysqldb\". On FreeBSD, use the command \"cd /usr/ports/*/py-MySQLdb && make install clean\". On RHEL 7, use the command \"yum install MySQL-python\". On RHEL 8, use the command \"dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient\".\n\n2. Run the tool with the command \"python3 services-wrapper.py <workers>\". Replace \"<workers>\" with the number of threads that should run simultaneously. If no argument is given, it will assume a default of 1 thread.\n\n3. Wait for the tool to finish checking the services. The tool will print information to the screen about the progress of the service check.\n\n4. If the process takes more than 5 minutes to finish, you may need faster hardware or more threads. The tool will recommend a minimum number of threads to use based on the elapsed time of the service check.\n\n### Input:\n\n\n", "label": "#! /usr/bin/env python3\n\"\"\"\n services-wrapper A small tool which wraps around check-services.php and tries to\n                guide the services process with a more modern approach with a\n                Queue and workers.\n\n Based on the original version of poller-wrapper.py by Job Snijders\n\n Author:        Neil Lathwood <neil@librenms.org>\n                Orsiris de Jong <contact@netpower.fr>\n Date:          Oct 2019\n\n Usage:         This program accepts one command line argument: the number of threads\n                that should run simultaneously. If no argument is given it will assume\n                a default of 1 thread.\n\n Ubuntu Linux:  apt-get install python-mysqldb\n FreeBSD:       cd /usr/ports/*/py-MySQLdb && make install clean\n RHEL 7:        yum install MySQL-python\n RHEL 8:        dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient\n\n Tested on:     Python 3.6.8 / PHP 7.2.11 / CentOS 8\n\n License:       This program is free software: you can redistribute it and/or modify it\n                under the terms of the GNU General Public License as published by the\n                Free Software Foundation, either version 3 of the License, or (at your\n                option) any later version.\n\n                This program is distributed in the hope that it will be useful, but\n                WITHOUT ANY WARRANTY; without even the implied warranty of\n                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n                Public License for more details.\n\n                You should have received a copy of the GNU General Public License along\n                with this program. If not, see http://www.gnu.org/licenses/.\n\n                LICENSE.txt contains a copy of the full GPLv3 licensing conditions.\n\"\"\"\n\nimport LibreNMS.library as LNMS\n\ntry:\n\n    import json\n    import os\n    import queue\n    import subprocess\n    import sys\n    import threading\n    import time\n    from optparse import OptionParser\n\nexcept ImportError as exc:\n    print('ERROR: missing one or more of the following python modules:')\n    print('threading, queue, sys, subprocess, time, os, json')\n    print('ERROR: %s' % exc)\n    sys.exit(2)\n\n\nAPP_NAME = \"services_wrapper\"\nLOG_FILE = \"logs/\" + APP_NAME + \".log\"\n_DEBUG = False\nservicedisco = False\nreal_duration = 0\nservice_devices = 0\n\n\"\"\"\n Threading helper functions\n\"\"\"\n# (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC0\ndef memc_alive():\n    try:\n        global memc\n        key = str(uuid.uuid4())\n        memc.set('poller.ping.' + key, key, 60)\n        if memc.get('poller.ping.' + key) == key:\n            memc.delete('poller.ping.' + key)\n            return True\n        else:\n            return False\n    except:\n        return False\n\n\ndef memc_touch(key, time):\n    try:\n        global memc\n        val = memc.get(key)\n        memc.set(key, val, time)\n    except:\n        pass\n\n\ndef get_time_tag(step):\n    ts = int(time.time())\n    return ts - ts % step\n#EOC0\n\n\n\"\"\"\n    A seperate queue and a single worker for printing information to the screen prevents\n    the good old joke:\n\n        Some people, when confronted with a problem, think,\n        \"I know, I'll use threads,\" and then they two they hav erpoblesms.\n\"\"\"\n\n\ndef printworker():\n    nodeso = 0\n    while True:\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC4\n        global IsNode\n        global servicedisco\n        if servicedisco:\n            if not IsNode:\n                memc_touch('service.master', 10)\n                nodes = memc.get('service.nodes')\n                if nodes is None and not memc_alive():\n                    print(\"WARNING: Lost Memcached. Taking over all devices. Nodes will quit shortly.\")\n                    servicedisco = False\n                    nodes = nodeso\n                if nodes is not nodeso:\n                    print(\"INFO: %s Node(s) Total\" % (nodes))\n                    nodeso = nodes\n            else:\n                memc_touch('service.nodes', 10)\n            try:\n                worker_id, device_id, elapsed_time = print_queue.get(False)\n            except:\n                pass\n                try:\n                    time.sleep(1)\n                except:\n                    pass\n                continue\n        else:\n            worker_id, device_id, elapsed_time = print_queue.get()\n        # EOC4\n        global real_duration\n        global per_device_duration\n        global service_devices\n        real_duration += elapsed_time\n        per_device_duration[device_id] = elapsed_time\n        service_devices += 1\n        if elapsed_time < 300:\n            print(\"INFO: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        else:\n            print(\"WARNING: worker %s finished device %s in %s seconds\" % (worker_id, device_id, elapsed_time))\n        print_queue.task_done()\n\n\"\"\"\n    This class will fork off single instances of the check-services.php process, record\n    how long it takes, and push the resulting reports to the printer queue\n\"\"\"\n\n\ndef poll_worker():\n    while True:\n        device_id = poll_queue.get()\n        # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC5\n        if not servicedisco or memc.get('service.device.' + str(device_id)) is None:\n            if servicedisco:\n                result = memc.add('service.device.' + str(device_id), config['distributed_poller_name'], 300)\n                if not result:\n                    print(\"This device (%s) appears to be being service checked by another service node\" % (device_id))\n                    poll_queue.task_done()\n                    continue\n                if not memc_alive() and IsNode:\n                    print(\"Lost Memcached, Not service checking Device %s as Node. Master will check it.\" % device_id)\n                    poll_queue.task_done()\n                    continue\n            # EOC5\n            try:\n                start_time = time.time()\n\n                output = \"-d >> %s/services_device_%s.log\" % (log_dir, device_id) if debug else \">> /dev/null\"\n                # TODO replace with command_runner\n                command = \"/usr/bin/env php %s -h %s %s 2>&1\" % (service_path, device_id, output)\n                subprocess.check_call(command, shell=True)\n\n                elapsed_time = int(time.time() - start_time)\n                print_queue.put([threading.current_thread().name, device_id, elapsed_time])\n            except (KeyboardInterrupt, SystemExit):\n                raise\n            except:\n                pass\n        poll_queue.task_done()\n\n\nif __name__ == '__main__':\n    logger = LNMS.logger_get_logger(LOG_FILE, debug=_DEBUG)\n\n    install_dir = os.path.dirname(os.path.realpath(__file__))\n    LNMS.check_for_file(install_dir + '/config.php')\n    config = json.loads(LNMS.get_config_data(install_dir))\n\n    service_path = config['install_dir'] + '/check-services.php'\n    log_dir = config['log_dir']\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC1\n    if 'distributed_poller_group' in config:\n        service_group = str(config['distributed_poller_group'])\n    else:\n        service_group = False\n\n\n    if ('distributed_poller' in config and\n        'distributed_poller_memcached_host' in config and\n        'distributed_poller_memcached_port' in config and\n        config['distributed_poller']):\n        try:\n            import memcache\n            import uuid\n            memc = memcache.Client([config['distributed_poller_memcached_host'] + ':' +\n                                    str(config['distributed_poller_memcached_port'])])\n            if str(memc.get(\"service.master\")) == config['distributed_poller_name']:\n                print(\"This system is already joined as the service master.\")\n                sys.exit(2)\n            if memc_alive():\n                if memc.get(\"service.master\") is None:\n                    print(\"Registered as Master\")\n                    memc.set(\"service.master\", config['distributed_poller_name'], 10)\n                    memc.set(\"service.nodes\", 0, 300)\n                    IsNode = False\n                else:\n                    print(\"Registered as Node joining Master %s\" % memc.get(\"service.master\"))\n                    IsNode = True\n                    memc.incr(\"service.nodes\")\n                servicedisco = True\n            else:\n                print(\"Could not connect to memcached, disabling distributed service checks.\")\n                servicedisco = False\n                IsNode = False\n        except SystemExit:\n            raise\n        except ImportError:\n            print(\"ERROR: missing memcache python module:\")\n            print(\"On deb systems: apt-get install python3-memcache\")\n            print(\"On other systems: pip3 install python-memcached\")\n            print(\"Disabling distributed discovery.\")\n            servicedisco = False\n    else:\n        servicedisco = False\n    # EOC1\n\n    s_time = time.time()\n    real_duration = 0\n    per_device_duration = {}\n    service_devices = 0\n\n    \"\"\"\n        Take the amount of threads we want to run in parallel from the commandline\n        if None are given or the argument was garbage, fall back to default of 16\n    \"\"\"\n    usage = \"usage: %prog [options] <workers> (Default: 1 (Do not set too high)\"\n    description = \"Spawn multiple check-services.php processes in parallel.\"\n    parser = OptionParser(usage=usage, description=description)\n    parser.add_option('-d', '--debug', action='store_true', default=False,\n                      help=\"Enable debug output. WARNING: Leaving this enabled will consume a lot of disk space.\")\n    (options, args) = parser.parse_args()\n\n    debug = options.debug\n    try:\n        amount_of_workers = int(args[0])\n    except (IndexError, ValueError):\n        amount_of_workers = 1\n\n    devices_list = []\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC2\n    if service_group is not False:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`poller_group` IN(\" + service_group + \") AND `devices`.`disabled` = 0\"\n    else:\n        query = \"SELECT DISTINCT(`services`.`device_id`) FROM `services` LEFT JOIN `devices` ON `services`.`device_id` = `devices`.`device_id` WHERE `devices`.`disabled` = 0\"\n    # EOC2\n\n    db = LNMS.db_open(config['db_socket'], config['db_host'], config['db_port'], config['db_user'], config['db_pass'], config['db_name'])\n    cursor = db.cursor()\n    cursor.execute(query)\n    devices = cursor.fetchall()\n    for row in devices:\n        devices_list.append(int(row[0]))\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC3\n    if servicedisco and not IsNode:\n        query = \"SELECT MAX(`device_id`), MIN(`device_id`) FROM `services`\"\n        cursor.execute(query)\n        devices = cursor.fetchall()\n        maxlocks = devices[0][0] or 0\n        minlocks = devices[0][1] or 0\n    # EOC3\n    db.close()\n\n    poll_queue = queue.Queue()\n    print_queue = queue.Queue()\n\n    print(\"INFO: starting the service check at %s with %s threads\" % (time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n                                                                      amount_of_workers))\n\n    for device_id in devices_list:\n        poll_queue.put(device_id)\n\n    for i in range(amount_of_workers):\n        t = threading.Thread(target=poll_worker)\n        t.setDaemon(True)\n        t.start()\n\n    p = threading.Thread(target=printworker)\n    p.setDaemon(True)\n    p.start()\n\n    try:\n        poll_queue.join()\n        print_queue.join()\n    except (KeyboardInterrupt, SystemExit):\n        raise\n\n    total_time = int(time.time() - s_time)\n\n    print(\"INFO: services-wrapper checked %s devices in %s seconds with %s workers\" % (service_devices, total_time, amount_of_workers))\n\n    # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC6\n    if servicedisco or memc_alive():\n        master = memc.get(\"service.master\")\n        if master == config['distributed_poller_name'] and not IsNode:\n            print(\"Wait for all service-nodes to finish\")\n            nodes = memc.get(\"service.nodes\")\n            while nodes is not None and nodes > 0:\n                try:\n                    time.sleep(1)\n                    nodes = memc.get(\"service.nodes\")\n                except:\n                    pass\n            print(\"Clearing Locks\")\n            x = minlocks\n            while x <= maxlocks:\n                memc.delete('service.device.' + str(x))\n                x = x + 1\n            print(\"%s Locks Cleared\" % x)\n            print(\"Clearing Nodes\")\n            memc.delete(\"service.master\")\n            memc.delete(\"service.nodes\")\n        else:\n            memc.decr(\"service.nodes\")\n        print(\"Finished %s.\" % time.time())\n    # EOC6\n\n    show_stopper = False\n\n    if total_time > 300:\n        print(\"WARNING: the process took more than 5 minutes to finish, you need faster hardware or more threads\")\n        print(\"INFO: in sequential style service checks the elapsed time would have been: %s seconds\" % real_duration)\n        for device in per_device_duration:\n            if per_device_duration[device] > 300:\n                print(\"WARNING: device %s is taking too long: %s seconds\" % (device, per_device_duration[device]))\n                show_stopper = True\n        if show_stopper:\n            print(\"ERROR: Some devices are taking more than 300 seconds, the script cannot recommend you what to do.\")\n        else:\n            recommend = int(total_time / 300.0 * amount_of_workers + 1)\n            print(\n                \"WARNING: Consider setting a minimum of %d threads. (This does not constitute professional advice!)\" % recommend)\n\n        sys.exit(2)\n", "prediction": "To use the services-wrapper tool, follow these steps:\n\n1. Install the required python module \"python"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a solution in Python for combining two sorted arrays into a third sorted array.\n\n### Input:\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\n", "label": "def combine_sorted_arrays(arr1, arr2):\n    arr3 = arr1 + arr2\n    arr3.sort()\n    return arr3\n\narr1 = [1, 2, 5]\narr2 = [2, 4, 6]\n\narr3 = combine_sorted_arrays(arr1, arr2)\nprint(arr3)", "prediction": "def merge(arr1, arr2):\n    merged = []\n    i = 0\n    j"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based web application with Python and Flask. The application should include pages for creating, editing, and viewing articles.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('home.html')\n\n@app.route('/create', methods=['GET', 'POST'])\ndef create():\n if request.method == 'GET':\n  return render_template('create.html')\n elif request.method == 'POST':\n  article = request.form['article']\n  # add article to database\n  return render_template('created.html')\n\n@app.route('/view')\ndef view():\n # get article from database\n return render_template('view.html', article=article)\n\n@app.route('/edit', methods=['GET', 'POST'])\ndef edit():\n if request.method == 'GET':\n  # get article from database\n  return render_template('edit.html', article=article)\n elif request.method == 'POST':\n  edited_article = request.form['edited_article']\n  # update article in database\n  return render_template('edited.html')\n\nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\nimport flask\nfrom flask import Flask, render_template, request, redirect, url_for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called 'Car' that contains three attributes, such as 'make', 'model' and 'year'.\n\n### Input:\n\n\n", "label": "class Car():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "prediction": "class Car:\n    def __init__(self, make, model, year):\n        self.make ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a Python class that stores words and their meanings as a dictionary.\n\n### Input:\n\n\n", "label": "class Dictionary (object):\n    def __init__(self):\n        self.data = {} #initialize empty dictionary\n\n    def add(self, word, definition):\n        self.data[word] = definition #add a new word, definition pair\n\n    def remove(self, word):\n        if word in self.data:\n            del self.data[word] #removes a word, definition pair\n\n    def print_all(self):\n        for word in self.data.keys():\n            print(word + ':', self.data[word]) #prints all words, definitions stored", "prediction": "class WordDictionary:\n    def __init__(self):\n        self.dictionary = {}\n\n    def add_word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Machine Learning algorithms, build a Python program that will classify a given set of hand-written digits.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import svm, datasets\n\n#import data\ndigits = datasets.load_digits()\n\n#split data into training and testing sets\nX_train = digits.data[:-10]\ny_train = digits.target[:-10]\nX_test = digits.data[-10:]\ny_test = digits.target[-10:]\n\n#train model\nclf = svm.SVC(gamma = 0.001, C = 100)\nclf.fit(X_train, y_train)\n\n#evaluate model\nscore = clf.score(X_test, y_test)\n\n#predict classes\ny_pred = clf.predict(X_test)\n\n#visualize results\nplt.imsave(\"prediction.png\", digits.images[-10])\n\nprint(score)\nprint(y_pred)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to convert a Python object to a JSON string.\n\n### Input:\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\n", "label": "import json\n\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\njson_string = json.dumps(obj)", "prediction": "json_string = json.dumps(obj)\nprint(json_string)\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify the given text into one of the given labels.\n\n### Input:\nText: \"The cat is sleeping in the sofa.\"\nLabels: [\u201cAnimal\u201d, \u201cFurniture\u201d]\n\n", "label": "import nltk\n\n# Create a tokenizer\ntokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\n\n# Tokenize the text\ntokens = tokenizer.tokenize(text)\n\n# Create a list of potential labels\nlabels = [\"Animal\", \"Furniture\"]\n\n# Create a list of words used to assign labels\n# This can be customized depending on the task\nassignment_words = {\n    \"Animal\": [\"cat\"], \n    \"Furniture\": [\"sofa\"]\n}\n\n# Use the assignment words to assign a label\nlabel = None\nfor word in tokens:\n    for key, value in assignment_words.items():\n        if word in value:\n            label = key\n            break\n\n# Print the label\nif label is not None:\n    print(\"Label:\", label)\nelse:\n    print(\"Could not assign label.\")", "prediction": "### Output:\nThe cat is sleeping in the sofa."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to download a web page from a URL.\n\n### Input:\nhttps://example.com\n\n", "label": "import requests\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)", "prediction": "import requests\nurl = 'https://example.com'\nresponse = requests.get(url)\nprint(response.text"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two lists of equal length, and returns the sum of the elements in the same index in each list.\n\n### Input:\n[2, 3, 4], [2, 5, 6]\n\n", "label": "def sum_elements_in_lists(list1, list2):\n    if len(list1) != len(list2):\n        return None\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    \n    return result\n\nresult = sum_elements_in_lists([2, 3, 4], [2, 5, 6])\nprint(result)", "prediction": "### Output:\n[4, 8, 10]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for sorting a list of words into alphabetical order.\n\n### Input:\n[\"dog\", \"cat\", \"apple\", \"banana\"]\n\n", "label": "def sort_words(words):\n  return sorted(words)\n\nwords = [\"dog\", \"cat\", \"apple\", \"banana\"]\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)", "prediction": "def sort_list(list):\n    list.sort()\n    return list\n\nprint(sort_list([\"dog\", \""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the python code using premature optimization techniques.\n\n### Input:\ndef foo():\n    a = []\n    for i in range(1000):\n        a.append(i)\n\n", "label": "# optimizing python code using premature optimization techniques\ndef foo():\n    a = [i for i in range(1000)]", "prediction": "    return a\n\ndef bar():\n    a = []\n    for i in range(1000):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, how would you return the last N elements from a list?\n\n### Input:\n\n\n", "label": "def last_elements(lst, n):\n    return lst[-n:]", "prediction": "def return_last_n_elements(list, n):\n    return list[-n:]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print a star pattern.\n\n### Input:\n\n\n", "label": "for i in range(5): \n    for j in range(i): \n        print ('* ', end=\"\") \n    print('') \n  \nfor i in range(5,0,-1): \n    for j in range(i): \n        print('* ', end=\"\") \n    print('')", "prediction": "def star_pattern(n):\n    for i in range(n):\n        for j in range(i+1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the sum of natural numbers up to a given number.\n\n### Input:\n7\n\n", "label": "def natural_sum(n):\n    if n < 0:\n        return 0\n    s = 0\n    for i in range(n+1):\n        s += i\n    return s\n \nnumber = 7\nresult = natural_sum(number)\nprint(result) # 28", "prediction": "### Output:\n28"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes an integer as input and returns a boolean output of whether the number is prime or not.\n\n### Input:\n17\n\n", "label": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))", "prediction": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that can encode and decode a string using a Caesar cipher.\n\n### Input:\nNot applicable\n\n", "label": "class CaesarCipher:\n    def __init__(self, shift):\n        encoder = [None] * 26\n        decoder = [None] * 26\n        for k in range(26):\n            encoder[k] = chr((k + shift) % 26 + ord('A'))\n            decoder[k] = chr((k - shift) % 26 + ord('A'))\n        self._forward = ''.join(encoder)\n        self._backward = ''.join(decoder)\n\n    def encrypt(self, message):\n        return self._transform(message, self._forward)\n\n    def decrypt(self, secret):\n        return self._transform(secret, self._backward)\n\n    def _transform(self, original, code):\n        msg = list(original)\n        for k in range(len(msg)):\n            if msg[k].isupper():\n                j = ord(msg[k]) - ord('A')\n                msg[k] = code[j]\n        return ''.join(msg)", "prediction": "### Output:\nclass CaesarCipher:\n    def __init__(self, shift):\n        self.shift ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that allows users to play the classic game, Rock-Paper-Scissors.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\n# Display the game introduction\nprint(\"This is a game of Rock-Paper-Scissors!\")\n\n# Assign different values to each of the options \noptions = {\n 'rock': 0,\n 'paper': 1,\n 'scissors': 2\n}\n\n# Get user inputs\nuser_choice = input(\"\\nWhat is your choice? Rock (r), Paper (p), or Scissors (s): \").lower()\n\n# Check if user input is valid \nif user_choice not in options:\n print(\"Not a valid choice. Try again!\")\n\nelse:\n computer_choice = random.choice(list(options))\n print(f\"Computer chose {computer_choice}\")\n \n # Comparing user and computer choices\n if user_choice == computer_choice:\n   print(\"It's a tie!\")\n \n elif user_choice == 'rock':\n   if computer_choice == 'paper':\n     print(\"Computer won!\")\n   else:\n     print(\"User won!\")\n \n elif user_choice == 'paper':\n   if computer_choice == 'rock':\n     print(\"User won!\")\n   else:\n     print(\"Computer won!\")\n \n elif user_choice == 'scissors':\n   if computer_choice == 'rock':\n     print(\"Computer won!\")\n   else:\n     print(\"User won!\")", "prediction": "### Output:\nimport random\nimport time\n\ndef play():\n    print(\"Welcome to Rock-Paper"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes a list of numbers as an argument and sorts it in descending order using quick sort algorithm.\n\n### Input:\n[7, 5, 2, 4, 2, 9, 3, 8]\n\n", "label": "def quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(right) + middle + quickSort(left)\n\nif __name__ == \"__main__\":\n    numbers = [7, 5, 2, 4, 2, 9, 3, 8]\n    print(quickSort(numbers))", "prediction": "### Output:\n[9, 8, 7, 5, 4, 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConfigure a web-server in Python using Flask.\n\n### Input:\n\n\n", "label": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run()", "prediction": "import flask\napp = flask.Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network model in Python to classify text as positive or negative\n\n### Input:\n\n\n", "label": "\"\"\"\nCreate a neural network model in Python to classify text as positive or negative\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf \n\n# Define the model\nmodel = tf.keras.models.Sequential([\n    # The input layer with shape of vocab size used for one-hot encoding  \n    tf.keras.layers.Input(shape=(vocab_size)),\n    # Add a layer of Dropout for regularized learning\n    tf.keras.layers.Dropout(rate=0.2),\n    # The hidden layers\n    tf.keras.layers.Dense(units=64, activation='relu'),\n    tf.keras.layers.Dense(units=1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(\n    optimizer='adam', \n    loss='binary_crossentropy', \n    metrics=['accuracy']\n)\n\n# Fit on the training data\nmodel.fit(X_train, y_train, epochs=5, batch_size=32)", "prediction": "import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Load the dataset"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password that is 8 characters in length and includes a combination of letters, numbers, and special characters.\n\n### Input:\nNot applicable\n\n", "label": "import random\nimport string\n\ndef generate_password():\n password_length = 8\n password_chars = string.ascii_letters + string.digits + string.punctuation\n\n password = ''.join(random.choice(password_chars) for _ in range(password_length))\n return password\n\npassword = generate_password()\nprint(password)", "prediction": "### Output:\nimport random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the \"Hello World!\" string.\n\n### Input:\n\n\n", "label": "print(\"Hello World!\")", "prediction": "print(\"Hello World!\")"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to remove vowels from a given sentence.\n\n### Input:\n\"The quick brown fox jumps over the lazy dog.\"\n\n", "label": "def remove_vowels(sentence):\n    # create an empty list\n    new_sentence = []\n\n    #iterate through the given sentence\n    for i in sentence:\n        # checks if the character is a vowel\n        if i.lower() not in \"aeiou\":\n            new_sentence.append(i)\n\n    # joins the list of characters to form string\n    return ''.join(new_sentence)\n\n# test\nprint(remove_vowels(\"The quick brown fox jumps over the lazy dog.\")) \n# expected output: Th qckbrwn fx jmps vr th lzy dg.", "prediction": "def remove_vowels(sentence):\n    vowels = \"aeiou\"\n    return \"\".join([char"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an artificial neural network in Python to predict the price of a house\n\n### Input:\n\n\n", "label": "import numpy as np\nfrom tensorflow.keras import models, layers\n\n#create basic model\ndef create_model():\n    model = models.Sequential()\n    model.add(layers.Dense(128, activation = 'relu', input_dim = 18))\n    model.add(layers.Dense(64, activation = 'relu'))\n    model.add(layers.Dense(32, activation = 'relu'))\n    model.add(layers.Dense(1))\n    model.compile(optimizer = 'rmsprop', loss = 'mse', metrics=['mae'])\n    return model\n\n#train model\nmodel = create_model()\nmodel.fit(X_train, y_train, epochs = 100, batch_size = 32)", "prediction": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to perform edit distance calculation on two strings in Python.\n\n### Input:\n\n\n", "label": "def edit_distance(str1, str2):\n    matrix = []\n    for i in range(len(str1) + 1):\n        matrix.append([0] * (len(str2) + 1))\n        \n    for i in range(len(str1) + 1):\n        matrix[i][0] = i\n    for j in range(len(str2) + 1):\n        matrix[0][j] = j\n        \n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1])\n    \n    return matrix[len(str1)][len(str2)]", "prediction": "def edit_distance(s1, s2):\n    if len(s1) == 0:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a document summarization algorithm in Python that can read a long text and summarize it into a shorter version.\n\n### Input:\n\n\n", "label": "from nltk import sent_tokenize\n\ndef summarize(text, limit=5):\n    # Splitting the text into sentences\n    sentences = sent_tokenize(text)\n\n    # Generating word frequency table\n    word_frequencies = {}\n    for sentence in sentences:\n        words = sentence.split()\n        for word in words:\n            if word not in word_frequencies.keys():\n                word_frequencies[word] = 1\n            else:\n                word_frequencies[word] += 1\n\n    # Generating word scores\n    word_scores = {}\n    for word in word_frequencies.keys():\n        score = 1 / word_frequencies[word]\n        word_scores[word] = score\n\n    # Generating sentence scores\n    sentence_scores = {}\n    for sentence in sentences:\n        sentence_wordcount = len(sentence.split())\n        sentence_wordscore = 0\n        for word in sentence.split():\n            if word in word_scores.keys():\n                sentence_wordscore += word_scores[word]\n        sentence_score = sentence_wordscore / sentence_wordcount\n        sentence_scores[sentence] = sentence_score\n\n    # Generating summary\n    summary = ''\n    sorted_sentences = sorted(sentence_scores.items(),\n                              key=lambda x: x[1],\n                              reverse=True)\n    for s in sorted_sentences[:limit]:\n        summary += f'{s[0]}\\n'\n\n    return summary", "prediction": "def summarize(text):\n    # split the text into sentences\n    sentences = text.split(\".\")\n    \n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API using Python Flask that returns a list of customer data fetched from a database. The API should be able to handle requests with query parameters to filter the results based on customer name.\n\n### Input:\nNot applicable\n\n", "label": "\"\"\"\nFlask API to return customer data\n\"\"\"\n\nimport sqlite3\nfrom flask import Flask, jsonify, request, g\n\nDATABASE = 'customer_database.db'\n\napp = Flask(__name__)\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n\n@app.route('/customers', methods=['GET'])\ndef get_customers():\n    query_parameters = request.args\n    sqlCursor = get_db().cursor().execute(\"SELECT * FROM customers\")\n    customers = [dict(zip([key[0] for key in sqlCursor.description], row)) for row in sqlCursor.fetchall()]\n    if len(query_parameters) > 0:\n        customers = filter_customers(customers, query_parameters)\n    \n    return jsonify(customers)\n\ndef filter_customers(customers, query_parameters):\n   filtering_params = {}\n   for param in query_parameters:\n     if param not in ['name']:\n       return \"Input not valid\"\n     filtering_params[param] = query_parameters[param]\n  \n   filtered_customers = []\n   for customer in customers:\n     for key in filtering_params.keys():\n       if customer[key] == filtering_params[key]:\n         filtered_customers.append(customer)\n    \n   return filtered_customers\n\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=5000, debug=True)", "prediction": "### Output:\n```python\nfrom flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an web application using Python Flask to calculate the temperature and humidity of a given location.\n\n### Input:\nLocation: Los Angeles\n\n", "label": "import requests\nimport json\nimport flask\nfrom flask import request, jsonify\n \napp = flask.Flask(__name__)\n\n@app.route('/temperature', methods=['POST'])\ndef temperature():\n location = request.json['location']\n \n url = 'https://api.openweathermap.org/data/2.5/weather?'\n payload = {'q': location, 'appid': 'your_api_key_here'}\n r = requests.get(url, params=payload).json()\n \n temperature = r['main']['temp'] - 273.15\n humidity = r['main']['humidity']\n \n result = {\n  'location': location,\n  'temperature': temperature,\n  'humidity': humidity\n  }\n return jsonify(result)\n \nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "Temperature: 25.5\u00b0C\n\nHumidity: 60%\n\n### Output:\nThe temperature and"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API with a Python Flask backend that returns the average number of a given list of numbers.\n\n### Input:\n[6, 7, 9, 8]\n\n", "label": "from flask import Flask, request, jsonify\n\n# create the flask app\napp = Flask(__name__)\n\n# define an endpoint to compute the average value\n@app.route(\"/average\", methods=['POST'])\ndef average():\n # get the list of numbers from the request\n numbers = request.json\n # compute the average\n avg = sum(numbers)/len(numbers)\n # return the average\n return jsonify({ 'average': avg })\n\n# start the server\nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\n8.5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network in python for classification\n\n### Input:\nThe problem is to classify hand-written digits into one of 10 classes (0, 1, ..., 9).\n\n", "label": "import tensorflow as tf\nfrom tensorflow.keras import layers\n\n# Create an input layer\ninputs = tf.keras.Input(shape = (28, 28, 1))\n\n# Create a convolutional layer\nconv1 = layers.Conv2D(32,(3,3))(inputs)\n\n# Create a MaxPooling layer\npool1 = layers.MaxPooling2D((2, 2))(conv1)\n\n# Create a Flatten layer\nflat1 = layers.Flatten()(pool1)\n\n# Create a fully connected layer with 10 neurons\nfc1 = layers.Dense(10)(flat1)\n\n# Create an output layer\noutputs = layers.Softmax()(fc1)\n\n# Instantiate the model\nmodel = tf.keras.Model(inputs = inputs, outputs = outputs)\n\n# Compile the model\nmodel.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['accuracy'])", "prediction": "The data set is the MNIST database of handwritten digits, which is a large database of handwritten digits"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two given strings and returns the number of mismatched letters.\n\n### Input:\nstring1 = \"abcdefg\"\nstring2 = \"accfghe\"\n\n", "label": "def compare_strings(string1, string2):\n    mismatched = 0\n    for i in range(min(len(string1), len(string2))):\n        if string1[i] != string2[i]:\n            mismatched += 1\n    return mismatched\n\nstring1 = \"abcdefg\"\nstring2 = \"accfghe\" \ncompared = compare_strings(string1, string2)\nprint(\"Number of mismatched letters:\", compared)", "prediction": "def compare(string1, string2):\n    count = 0\n    for i in range(len"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a dictionary, create a program to find the longest word in Python.\n\n### Input:\n{\"hello\": 5, \"world\": 5, \"welcome\": 7, \"to\": 2, \"programming\": 11}\n\n", "label": "def longest_word(dictionary): \n    longest = \"\"\n    for word in dictionary: \n        if len(word) > len(longest): \n            longest = word \n    return longest", "prediction": "### Output:\nprogramming"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an AI program in Python that will predict the stock prices for an asset.\n\n### Input:\n\n\n", "label": "import pandas as pd\n\ndef predict_stock_prices(data):\n    # Your code here\n    # ...\n\n    return prediction", "prediction": "def predict_stock_price(asset):\n    # Import the necessary libraries\n    import pandas as pd\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search algorithm using Python to find an item in a list of tuples.\n\n### Input:\narr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)]\nkey = 'd'\n\n", "label": "def search(arr, key): \n    for item in arr: \n        if item[0] == key: \n            return item[1] \n    return \"Not found\"\n  \n# Driver code \narr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] \nkey = 'd'\n  \nprint(search(arr, key))", "prediction": "def search(arr, key):\n    for i in range(len(arr)):\n        if arr[i][0"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to identify and count the number of words in a string using Python.\n\n### Input:\nNot applicable\n\n", "label": "# Create function to count the words\ndef word_count(string):\n # split the string into words\n words = string.split(' ')\n \n # create a dictionary to store the word and its count\n word_count_dict = {}\n \n # add word to the dictionary and increase the count if it already exists\n for word in words:\n  if word in word_count_dict:\n   word_count_dict[word] += 1\n  else:\n   word_count_dict[word] = 1\n \n # return the dictionary\n return word_count_dict\n\n# test the code\nstring =\"This is a test string to test the word count program\"\nprint(word_count(string))", "prediction": "### Output:\ndef count_words(text):\n    return len(text.split())\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python application to fetch data from an SQL database and display it in the console.\n\n### Input:\nNot applicable\n\n", "label": "import sqlite3\n\nconn = sqlite3.connect('example.db')\n\ncursor = conn.cursor()\n\ncursor.execute('SELECT * FROM users')\nrows = cursor.fetchall()\n\nfor row in rows:\n print(row)\n\nconn.close()", "prediction": "### Output:\nimport sqlite3\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to automatically optimize the settings for a given predictive model.\n\n### Input:\nA machine learning predictive model\n\n", "label": "import pyswarms as ps\n \ndef optimize(model, X, y):\n    # Configure hyperparameters\n    options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9}\n \n    # Compute the hyperparameters\n    optimizer = ps.single.LocalBestPSO(n_particles=10, \n                                       dimensions=X.shape[1], \n                                       options=options)\n \n    # Perform the search\n    cost, pos = optimizer.optimize(model, X, y)\n \n    # Create and return the optimized model\n    hyperparameters = {'bias': pos[0],\n                       'weights': pos[1:]}\n \n    optimized_model = model(**hyperparameters)\n \n    return optimized_model", "prediction": "### Output:\nA Python program that automatically optimizes the settings for the given predictive model."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find the area of a circle using its radius.\n\n### Input:\n\n\n", "label": "import math\n\ndef circle_area(radius):\n  \"\"\"\n  Returns the area of a circle based on its radius\n  \"\"\"\n  return math.pi * (radius**2)\n\nif __name__ == '__main__':\n    print(circle_area(4))", "prediction": "def area_of_circle(radius):\n    pi = 3.14\n    area = pi * radius"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, build a program that can remove all vowels from a given string.\n\n### Input:\n\n\n", "label": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string", "prediction": "def remove_vowels(string):\n    vowels = \"aeiou\"\n    new_string = \"\"\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that can predict the number of sales of a product based on the features provided.\n\n### Input:\nFeatures: date, time, price, category, discount\n\n", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Start by loading in the data\ndata = pd.read_csv('sales_data.csv')\n\n# Extract the inputs and the targets\ninputs = data[['date', 'time', 'price', 'category', 'discount']]\ntargets = data.sales\n\n# Create the model and train it\nmodel = LinearRegression()\nmodel.fit(inputs, targets)\n\n# Make predictions\npredictions = model.predict(inputs)", "prediction": "def predict_sales(date, time, price, category, discount):\n    # Import necessary libraries\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to generate a histogram from a given data set.\n\n### Input:\ndata = [1, 3, 5, 3, 2, 6, 8, 1, 2]\n\n", "label": "import matplotlib.pyplot as plt \n\ndef generate_histogram(data):\n    plt.hist(data)\n    plt.xlabel(\"Data\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Histogram of Data\")\n    plt.show()\n    \ngenerate_histogram(data)", "prediction": "import matplotlib.pyplot as plt\nplt.hist(data)\nplt.show()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a python program to check the palindrome of a given word\n\n### Input:\n\n\n", "label": "def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False", "prediction": "def palindrome(word):\n    if word == word[::-1]:\n        return True\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to manage the expiry dates of products.\n\n### Input:\n\n\n", "label": "class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left", "prediction": "class Product:\n    def __init__(self, name, expiry_date):\n        self.name = name"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this SQL query to Python.\n\n### Input:\nSELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'\n\n", "label": "import pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')", "prediction": "### Output:\ncustomers = pd.read_sql_query(\"SELECT * FROM customers WHERE customer_name LIKE '%John"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to sort all the elements in the given dictionary in descending order of the values.\n\n### Input:\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\n\n", "label": "def sortByValue(dictionary):\n    sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n\ndictionary = {\"A\": 30, \"B\": 40, \"C\": 20}\nresult = sortByValue(dictionary)\nprint(result) # prints {'B': 40, 'A': 30, 'C': 20}", "prediction": "def sort_dict(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to detect geographical coordinates of a given address.\n\n### Input:\nAddress: 1 Rockefeller Plaza, New York City, NY\n\n", "label": "(40.7588972, -73.9787129)", "prediction": "def detect_geographical_coordinates(address):\n    # Use the Google Maps API to get the coordinates\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all characters from a given string except for letters and whitespaces\n\n### Input:\nHello $% World\n\n", "label": "def remove_non_letter_characters(s): \n    return \"\".join(e for e in s if e.isalpha() or e == \" \") \n      \ns = 'Hello $% World'\nprint(remove_non_letter_characters(s))", "prediction": "def remove_non_alphanumeric(input_string):\n    return re.sub(r'[^a-zA-Z\\s]',"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system in Python that takes in two strings as input and finds out if they are anagrams of each other.\n\n### Input:\nTwo strings: \"sister\" and \"Resist\"\n\n", "label": "def is_anagram(s1, s2):\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if (len(s1) != len(s2)):\n        return False\n    \n    count = {}\n    for i in s1: \n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for i in s2: \n        if i in count:\n            count[i] -= 1\n        else:\n            return False\n    for i in count: \n        if count[i] != 0: \n            return False\n      \nreturn True", "prediction": "### Output:\nTrue"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python application using Tkinter and the sqlite3 library which allows users to view and add to an existing database of movies. The application should display a list of movies in the database in a table, and allow users to filter the list by genre.\n\n### Input:\nNot applicable\n\n", "label": "import sqlite3\nimport tkinter\n\n# create the Tkinter window\nroot = tkinter.Tk()\n\n# set up the sqlite connection\nconn = sqlite3.connect('movies.db')\ncursor = conn.cursor()\n\n# create the table\ncursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS movies (\n title TEXT,\n genre TEXT\n)\"\"\")\n\n# create labels for the search boxes\nsearch_title = tkinter.Label(root, text=\"Title:\")\nsearch_genre = tkinter.Label(root, text=\"Genre:\")\n\n# create search boxes\ntitle_box = tkinter.Entry(root)\ngenre_box = tkinter.Entry(root)\n\n# create a button to submit the search\nsubmit_button = tkinter.Button(root,\n                       text=\"Submit\",\n                       command=search_movies)\n\n#function that handles the whole search\ndef search_movies():\n    title = title_box.get()\n    genre = genre_box.get()\n\n    # build the sql query\n    query = \"\"\"SELECT * FROM movies WHERE\"\"\"\n    if title != '':\n        query+=f\"\"\" title=\"{title}\" AND\"\"\"\n    if genre != '':\n        query+=f\"\"\" genre=\"{genre}\"\"\"\n    query = f\"\"\"{query} ORDER BY title asc;\"\"\"\n\n    # execute the query\n    cursor.execute(query)\n \u00a7\u00a7 1131\n    rows = cursor.fetchall()\n\n    #render the data in the table\n    for row in rows:\n        row_text = f\"\"\" Title: {row[0]}, Genre: {row[1]}\"\"\"\n        row_label = tkinter.Label(root, text=row_text)\n        row_label.pack()\n\n#pack the widgets\nsearch_title.pack()\ntitle_box.pack()\n\nsearch_genre.pack()\ngenre_box.pack()\n\nsubmit_button.pack()\n\nroot.mainloop()", "prediction": "### Output:\nimport sqlite3\nimport tkinter as tk\n\nclass MovieApp(tk.Tk):\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing TinyDB, create a Python program for storing and searching values in a database.\n\n### Input:\nNot Applicable\n\n", "label": "from tinydb import TinyDB, Query\n\n# Initialize database\ndb = TinyDB('my_db.json')\n\n# Insert data\ndb.insert({'name': 'John', 'age': 30, 'city': 'New York'})\ndb.insert({'name': 'Adam', 'age': 25, 'city': 'London'})\n\n# Fetch data\nsearch_results = db.search(Query().name == 'John')\nprint(search_results)  # [{'name': 'John', 'age': 30, 'city': 'New York'}]", "prediction": "### Output:\nimport tinydb\n\n# Create a database\ndb = tinydb.TinyDB('"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Bayesian classifier in Python to identify whether a given tweet is positive or negative.\n\n### Input:\n\"I am feeling great today!\"\n\n", "label": "import re\nimport nltk\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Define a function to pre-process the tweet\ndef pre_process_tweet(tweet):\n    # tokenization\n    tokens = nltk.word_tokenize(tweet.lower())\n    # stopwords removal\n    stopwords = nltk.corpus.stopwords.words('english')\n    tokens = [token for token in tokens if token not in stopwords]\n    # stemming\n    stemmer = nltk.stem.PorterStemmer()\n    tokens = [stemmer.stem(token) for token in tokens]\n    # remove punctuations\n    punctuations = '!?#`$%^&*()_-+={}[]:;\\'\\\"|<>,/\\\\'\n    tokens = [token for token in tokens if token not in punctuations]\n    # return the cleaned tweet\n    return tokens\n\n# Define the training data\nX_train = [\"I am feeling great today!\",\n    \"I am feeling sad today.\",\n    \"Today was an incredible day!\",\n    \"Today was an awful day!\"]\ny_train = [1, 0, 1, 0]\n\n# Pre-process the training data\nX_train_cleaned = [pre_process_tweet(tweet) for tweet in X_train]\n\n# Create the corpus\ncorpus = []\nfor tweet in X_train_cleaned:\n    for word in tweet:\n        corpus.append(word)\n\n# Calculate the frequency of the words in the corpus\nfreq = nltk.FreqDist(corpus)\nX_train_cleaned_vector = []\nfor tweet in X_train_cleaned:\n    vector = []\n    for word in freq.keys():\n        if word in tweet:\n            vector.append(1)\n        else:\n            vector.append(0)\n    X_train_cleaned_vector.append(vector)\n\n# Train the Bayes classifier\nclassifier = MultinomialNB().fit(X_train_cleaned_vector, y_train)\n\n# Pre-process the given tweet\ntweet = \"I am feeling great today!\"\ntweet_cleaned = pre_process_tweet(tweet)\n\n# Vectorize the tweet\nvector = []\nfor word in freq.keys():\n    if word in tweet_cleaned:\n        vector.append(1)\n    else:\n        vector.append(0)\n\n# Predict if the tweet is positive or negative\npred = classifier.predict([vector])[0]\nif pred == 1:\n    print(\"The tweet is positive!\")\nelse:\n    print(\"The tweet is negative!\")", "prediction": "### Output:\nThe tweet is positive."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to compute the maximum profit from selling a stock within a specific period of days.\n\n### Input:\n[8, 12, 4, 5, 7, 10, 9]\n\n", "label": "def max_profit(prices):\n    min_price = float('inf') \n    max_profit = 0\n    \n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n        \n    return max_profit\n\nprices = [8, 12, 4, 5, 7, 10, 9]\nprint(max_profit(prices))", "prediction": "def max_profit(prices):\n    max_profit = 0\n    for i in range(len(pr"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to remove all elements from a Python list that are divisible by a given number.\n\n### Input:\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\n", "label": "def remove_divisible(lst, n):\n    new_list = []\n    for item in lst:\n        if item % n != 0:\n            new_list.append(item)\n    return new_list\n\nmylist = [7, 8, 15, 21, 24]\nnum = 3\n\nprint(remove_divisible(mylist, num)) # [7, 8, 21]", "prediction": "def remove_elements(mylist, num):\n    return [x for x in mylist if x %"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that divides a list of numbers into two subsets whose sum is as close as possible.\n\n### Input:\nnumbers = [1, 4, 8, 10, 5, 9]\n\n", "label": "def divide_list(numbers):\n # find the sum of the list\n list_sum = sum(numbers)\n # try all possible combinations of dividing the list\n best_difference = float('inf')\n best_subset_1 = None\n best_subset_2 = None\n for i in range(2**len(numbers)):\n # get the binary representation of i\n bit_string = '{:0b}'.format(i).zfill(len(numbers))\n subset_1 = []\n subset_2 = []\n for j, bit in enumerate(bit_string):\n  if bit == '0':\n   subset_1.append(numbers[j])\n  else:\n   subset_2.append(numbers[j])\n # check if the difference between the two subsets is the lowest\n difference = abs(sum(subset_1) - sum(subset_2))\n if difference < best_difference:\n best_difference = difference\n best_subset_1 = subset_1\n best_subset_2 = subset_2\n return best_subset_1, best_subset_2", "prediction": "def divide_list(numbers):\n    # Sort the list in ascending order\n    numbers.sort()\n    #"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the longest increasing subsequence of an array.\n\n### Input:\n\n\n", "label": "def longest_increasing_subsequence(arr): \n    n = len(arr) \n  \n    # Declare the list (array) for LIS and \n    # initialize LIS values for all indexes \n    lis = [1]*n \n  \n    # Compute optimized LIS values in bottom up manner \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    # Initialize maximum to 0 to get the maximum of all \n    # LIS \n    maximum = 0\n  \n    # Pick maximum of all LIS values \n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "prediction": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    dp = [1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that deletes every third character from a given string.\n\n### Input:\n\n\n", "label": "def delete_third_characters(str): \n  \n    str_mod = \"\" \n    for i in range(0, len(str)): \n        if (i+1) % 3 != 0: \n            str_mod += str[i] \n    return str_mod", "prediction": "def delete_third_char(string):\n    new_string = \"\"\n    for i in range(len(string)):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier in Python using scikit-learn that identifies the type of flower (iris) provided with features such as petal length and width.\n\n### Input:\n\n\n", "label": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('iris.csv')\n\n# Define X and y\nX = data.drop('species', axis=1)\ny = data['species']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Build the decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Evaluate the classifier\nscore = classifier.score(X_test, y_test)\nprint('Classifier accuracy: ', score)", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to represent a Bank Account and implement functions to perform transactions.\n\n### Input:\n\n\n", "label": "class BankAccount:\n def __init__(self, name, balance):\n  self.name = name\n  self.balance = balance\n \n def deposit(self, amount):\n  self.balance += amount\n \n def withdraw(self, amount):\n  self.balance -= amount\n \n def check_balance(self):\n  return self.balance", "prediction": "class BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web server in Python that responds to incoming requests.\n\n### Input:\n\n\n", "label": "import http.server\n\ndef respond(handler):\n    handler.send_response(200)\n    handler.send_header('Content-type','text/html')\n    handler.end_headers()\n    handler.wfile.write(b'Hello World')\n\nclass MyWebRequestHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        respond(self)\n\nif __name__=='__main__':\n    server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler)\n    print('Starting server at port 8001...')\n    server.serve_forever()", "prediction": "import socket\n\nHOST = '127.0.0.1'  # Standard loopback interface"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the 5 most frequent words in the given text.\n\n### Input:\nText: Python is a high-level programming language.\n\n", "label": "from collections import Counter\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)", "prediction": "### Output:\nPython is a high-level programming language."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to display the prime numbers between 1 and 100.\n\n### Input:\n\n\n", "label": "for num in range(2,101):\nfor i in range(2,num):\n if (num % i) == 0:\n break\n else:\n print(num)", "prediction": "def is_prime(n):\n    if n == 2:\n        return True\n    if n %"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code performs BLAST evaluation. To use it, follow these steps:\n\n1. Import the necessary libraries: glob, sys, csv, and tabulate from Bio.Blast.Applications.\n2. Define the following functions:\n   - carga_csv(file_name): creates a list of lists with a csv file.\n   - crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'): creates comparisons lists (code) depending on arguments.\n   - imprime_comparacion(listas): prints the comparison as a readable format.\n   - imprime_referencia(claves): prints the comparison as a readable format.\n   - crea_diccionario(tabla): creates a dictionary of code:organism.\n3. In the program body, prompt the user to enter the CSV file name and load the data using carga_csv().\n4. Present the CSV data using tabulate().\n5. Present the options: blast parameters, comparison parameters, run.\n6. If the user selects option 1, prompt them to enter the comparisons using the organism index and the direction (bidirectional or unidirectional). Use crea_comparacion() to create the comparison list.\n7. If the user selects option 2, prompt them to enter the desired E value for BLAST runs. Use NcbiblastpCommandline() to create the commands for comparisons.\n8. Run the commands and inform the user when the work is completed.\n\n### Input:\n\n\n", "label": "#! /usr/bin/env python\n\n\"\"\" DESCRIPTION\n\n\"\"\"\n\nimport glob, sys, csv\nfrom tabulate import tabulate\nfrom Bio.Blast.Applications import NcbiblastpCommandline\n\n\"\"\"--- FUNCTIONS ---\"\"\"\n\ndef carga_csv(file_name):\n    \"\"\" creates a list of lists with a csv file \"\"\"\n    tabla = []    \n    cr = csv.reader(open(file_name,\"rb\"))\n    for row in cr:    \n        tabla.append(row)\n    return tabla      \n\ndef crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'):\n    \"\"\" creates comparisons lists (code) depending on arguments \"\"\"\n    lista = []\n    tabla = list(tabla_ref)\n    if estructura == 'star':\n        nodo = tabla.pop()\n        for organismo in tabla:\n            lista.append([nodo[1],organismo[1]])\n            if comparacion == 'bi':\n                lista.append([organismo[1], nodo[1]])\n    else:\n        comps = estructura.split(',')\n        for comp in comps:\n            pareja = comp.split('-')\n            query = tabla[int(pareja[0])][1]\n            db = tabla[int(pareja[1])][1]\n            lista.append([query, db])\n            if comparacion == 'bi':\n                lista.append([db, query])\n    return lista\n\ndef imprime_comparacion(listas):\n    \"\"\" prints the comparison as a readable format\"\"\"\n    print 'COMPARISONS\\n-----------\\n'\n    for lista in listas:\n        print lista[0] + ' --> ' + lista[1]\n    print '\\n'\n\ndef imprime_referencia(claves):\n    \"\"\" prints the comparison as a readable format\"\"\"\n    print 'REFERENCE\\n---------'\n    n = 0\n    for key, val in claves.items():\n        print n, '. ', key, '\\t', val\n        n=n+1\n    print '\\n'\n\ndef crea_diccionario(tabla):\n    \"\"\" creates a dictionary of code:organism\"\"\"\n    diccionario={}\n    for row in tabla:\n        diccionario[row[1]]=row[0]\n    return diccionario\n    \n\"\"\"--- PROGRAM BODY ---\"\"\"\nprint '----------------\\nBLAST EVALUATION\\n----------------'\nblast_eval = 1e-05\ncomparison_list = []\n# charge csv file\nnombre_csv = raw_input('Please enter the CSV file name: ')\norganismos = carga_csv(nombre_csv)\nreferencia = crea_diccionario(organismos)\ncomparison_list = crea_comparacion(organismos)\n# present csv data\nprint '\\nCSV data\\n--------'\nprint tabulate(organismos, headers=[\"Organism\",\"Code\", \"Genome File\", \"Database folder\"]) + '\\n'\n# present options: blast parameters, comparison parameters, run\nwhile 1:\n    \n    imprime_referencia(referencia)\n    imprime_comparacion(comparison_list)\n    print 'CHOOSE AN OPTION\\n----------------\\n1) Comparisons\\n2) Run\\n3) Quit'\n    user_in = raw_input('Option: ')\n    if user_in == '1':\n        imprime_referencia(referencia)\n        print ('Please enter the comparisons using the organism index.\\n' +\n              'Format: \"-\" between indices; \",\" between comparisons; no spaces.\\n')\n        nueva_comparacion = raw_input('Comparisons: ')\n        print 'Choose \"bi\" for bidirectional or \"uni\" for unidirectional; no quotation marks.'\n        tipo_comparacion = raw_input('Direction: ')\n        comparison_list = crea_comparacion(organismos, nueva_comparacion, tipo_comparacion)\n    elif user_in == '2':\n        blast_eval = raw_input('\\nPlease write the desired E value for BLAST runs; 1e-5 suggested.\\nE_value: ')\n        print '\\nBLAST+ commands to be runned...\\n'\n        break\n    elif user_in == '3': quit()\n    else: print ('Incorrect option, try again.\\n')\n\n# create commands for comparisons\ncomandos = []\nfor pair in comparison_list:\n    nombre = referencia[pair[0]].split()\n    comandos.append([(nombre[0]+'_'+nombre[1]+'.faa'), ('db_'+pair[1]+'/db_'+pair[1]), (pair[0]+'_'+pair[1]+'.xml')])\nprint tabulate(comandos, headers=[\"Genome file\",\"Database\", \"Product file\"]) + '\\n'\nraw_input('Press ENTER to continue')\n# run commands, inform data created\nfor comando in comandos:\n    blastp_cline = NcbiblastpCommandline(query=comando[0], db=comando[1], evalue=blast_eval ,outfmt=5, out=comando[2])\n    print 'File ' + comando[2] + ' is currently in progess...'\n    stdout, stderr = blastp_cline()\nprint 'WORK COMPLETED\\n--------------'\n\n", "prediction": "import glob\nimport sys\nimport csv\nfrom Bio.Blast.Applications import Ncbiblast"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that sorts a list of integers.\n\n### Input:\nmy_list = [9, 3, 6, 7, 1]\n\n", "label": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [9, 3, 6, 7, 1]\nmy_list = sort_list(my_list)\nprint(my_list)", "prediction": "def sort_list(my_list):\n    my_list.sort()\n    return my_list\n\nprint(sort_list(my"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the dot product of two vectors in Python.\n\n### Input:\n\n\n", "label": "def dot_product(v1, v2):\n    return sum(x1*x2 for x1, x2 in zip(v1, v2))", "prediction": "def dot_product(vector1, vector2):\n    \"\"\"Calculate the dot product of two vectors.\"\"\"\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the title and the release date of all movies shown on IMDB in a given year.\n\n### Input:\nYear: 2020\n\n", "label": "import requests \nfrom bs4 import BeautifulSoup \n \n# Enter the year you want to scrape \nyear = 2020\n  \n#Creating the IMDb URL for the movies of that year \nurl = f\"https://www.imdb.com/search/title/?release_date={year}-01-01,{year+1}-12-31\"\n      \nresponse = requests.get(url) \nsoup = BeautifulSoup(response.text,\"html.parser\") \n  \n# List to store the data \nmovie_list = [] \n  \n# Extracting the movie title and release date \nmovie_div = soup.find_all(\"div\", class_ = \"lister-item mode-advanced\") \nfor movie in movie_div: \n     \n    # extracting the movie title      \n    movie_title = movie.h3.a.text\n      \n    # extracting the movie's release date      \n    movie_year = movie.h3.find(\"span\", class_ = \"lister-item-year text-muted unbold\").text\n    year = int(movie_year.replace(\"(\", \"\").replace(\")\", \"\"))\n    \n    movie_list.append((movie_title, year)) \n\n# printing the movie_list\nprint(movie_list)", "prediction": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_movies(year):\n    url ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to edit a given text by removing unwanted characters.\n\n### Input:\ntext = \"Hello, World!\"\n\n", "label": "def remove_unwanted_chars(text):\n    return ''.join(c for c in text if c.isalnum() or c in [' ', ','])\n\ntext = \"Hello, World!\"\nprint(\"Text after removing unwanted characters:\", remove_unwanted_chars(text))", "prediction": "def remove_unwanted_characters(text):\n    \"\"\"Remove unwanted characters from a given text.\"\"\"\n    # Define"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to generate random passwords.\n\n### Input:\n\n\n", "label": "\"\"\"\nCreate a python script to generate random passwords \n\n\"\"\"\nimport string\nimport random\n\ndef generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):\n    return ''.join(random.choice(chars) for _ in range(length))\n\nif __name__ == '__main__':\n    print(generate_password())", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a histogram representing the frequency distribution of a set of data.\n\n### Input:\n[1, 2, 3, 4, 5, 5]\n\n", "label": "import matplotlib.pyplot as plt \n\ndata = [1, 2, 3, 4, 5, 5]\n\nplt.hist(data, bins=5) \nplt.title(\"Frequency Distribution\")\nplt.show()", "prediction": "def histogram(data):\n    for x in data:\n        print(x * \"*\")\n\nhistogram([1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to return the maximum value from a list\n\n### Input:\ndef max_val(nums):\n    maximum = 0\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]\n\n", "label": "def max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]", "prediction": "print(max_val(list))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that does the following:\n\n### Input:\nDownload the content of a website\n\n", "label": "import requests\n\nurl = \"https://example.com\" \nr = requests.get(url)\ndata = r.content\n\nwith open(\"example_website.html\", \"wb\") as file:\n    file.write(data)\n\nprint(\"File downloaded successfully.\")", "prediction": "### Output:\nThe content of the website"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to sort a given array using Quicksort\n\n### Input:\n[1, 5, 7, 0, 3]\n\n", "label": "def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n  \n    for j in range(low, high): \n        if arr[j] < pivot: \n            i += 1\n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return i+1\n  \ndef quick_sort(arr, low, high): \n    if low < high: \n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high) \n\nresult = quick_sort([1, 5, 7, 0, 3], 0, 4) \nprint(result)", "prediction": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in python\n\n### Input:\n#include <stdio.h>\nint main()\n{\n    int a[10], b[10], i, j;\n    for (i = 0; i < 10; ++i) {\n        a[i] = 0;\n        b[i] = 0;\n    }\n    for (j = 1; j <= 5; ++j) {\n        for (i = 0; i < 10; ++i) {\n            a[i] = a[i] + j;\n            b[i] = b[i] + b[i - 1] + a[i];\n        }\n    }\n    for (i = 0; i < 10; ++i) {\n        printf(\"%d \", b[i]);\n    }\n    return 0;\n}\n\n", "label": "a = [0] * 10\nb = [0] * 10\n\nfor j in range(1, 6):\n    for i in range(10):\n        a[i] = a[i] + j\n        b[i] = b[i] + b[i - 1] + a[i]\n\nfor i in range(10):\n    print(b[i], end=\" \")", "prediction": "### Output:\ndef main():\n    a = [0] * 10\n    b = ["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for inserting an element into a given sorted array.\n\n### Input:\nsortedArray = [1, 5, 9, 12, 15]\nx = 7\n\n", "label": "def insertSort(sortedArray, x): \n    n = len(sortedArray) \n    sortedArray.append(x) \n    for i in range(n-1, -1, -1): \n        if sortedArray[i] > x: \n            sortedArray[i + 1] = sortedArray[i] \n            sortedArray[i] = x \n    return sortedArray\n\nprint(insertSort(sortedArray, x))", "prediction": "def insertElement(sortedArray, x):\n    for i in range(len(sortedArray)):\n        if sorted"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program for validating a string for a certain set of rules.\n\n### Input:\nInput String: \"Better than ever\"\nRules: String should contain only lower case characters and digits\n\n", "label": "# Check if the string is valid according to the rules:\ndef check_string_validity(input_string, rules):\n    valid = True\n    for char in input_string:\n        if char.islower() or char.isdigit():\n            continue\n        else:\n            valid = False\n            break\n    return valid\n\n# Get the result:\nvalidity = check_string_validity(\"Better than ever\", \"String should contain only lower case characters and digits\")\nprint(validity)\n# Output: False", "prediction": "def validate_string(input_string, rules):\n    if not isinstance(input_string, str):\n        raise TypeError"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to take a natural input number and convert it to binary.\n\n### Input:\n\n\n", "label": "#!/usr/bin/python\n\n# Get the input number\ninput_num = int(input(\"Enter a number: \"))\n\n# Convert to binary \nbinary_num = bin(input_num)\n\n# Print the result\nprint(\"The binary of {} is {}\".format(input_num, binary_num))", "prediction": "def convert_to_binary(number):\n    \"\"\"Converts a natural number to binary\"\"\"\n    if number <"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a number, n, and prints out the nth term of the Fibonacci sequence.\n\n### Input:\nn = 10\n\n", "label": "def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n    return b\n  \nprint(fibonacci(10))", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to filter out strings from a list of strings that contain 2 or more vowels.\n\n### Input:\n[\"Codecademy\", \"Apples\", \"Frame\", \"AeIouy\"]\n\n", "label": "def filter_strings_with_2_or_more_vowels(strings): \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    filtered_strings = []\n    for s in strings:\n        cnt = 0\n        for c in s:\n            if c in vowels:\n                cnt += 1\n        if cnt >= 2:\n            filtered_strings.append(s)\n    return filtered_strings\n\nstrings = [\"Codecademy\", \"Apples\", \"Frame\", \"AeIouy\"]\nprint(filter_strings_with_2_or_more_vowels(strings))", "prediction": "def filter_vowels(strings):\n    vowels = \"aeiou\"\n    filtered_strings = []\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the most efficient way to find all the prime numbers between 1 and 100 in Python?\n\n### Input:\n\n\n", "label": "def find_primes(n):\n    numbers = [True] * (n + 1)\n    numbers[0] = False\n    numbers[1] = False\n    \n    for i in range(2, n + 1):\n        if numbers[i] == True:\n            for j in range(2 * i, n + 1, i):\n                numbers[j] = False\n    \n    primes = []\n    for i in range(2, n + 1):\n        if numbers[i] == True:\n            primes.append(i)\n    \n    return primes\n\nprint(find_primes(100))", "prediction": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python object that contains two attributes, \"Name\" and \"Age\".\n\n### Input:\n\n\n", "label": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)", "prediction": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a Python program that gets user input, checks if it is a valid input, and provides feedback depending on the validity.\n\n### Input:\ndef get_input():\n user_input = raw_input(\"Please enter a number between 1 and 10: \")\n return user_input\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()\n\n", "label": "def get_input():\n while True:\n try:\n user_input = int(input(\"Please enter a number between 1 and 10: \"))\n if 1 <= user_input <= 10:\n return user_input\n else:\n print(\"Error: Input must be between 1 and 10. Please try again.\")\n except ValueError:\n print(\"Error: Input must be a number. Please try again.\")\n\ndef main():\n user_input = get_input()\n\nif __name__ == '__main__':\n    main()", "prediction": "def get_input():\n    user_input = raw_input(\"Please enter a number between 1 and "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program for implementing a stack with the following methods.\n\n### Input:\npop(), push(x), and is_empty().\n\n", "label": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, x): \n        self.items.append(x) \n\n    def pop(self): \n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return None\n        \n    def is_empty(self): \n        return len(self.items) == 0", "prediction": "### Output:\ndef stack():\n    def __init__(self):\n        self.items = []\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a class in Python to represent a student.\n\n### Input:\n\n\n", "label": "class Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_major(self):\n        return self.major", "prediction": "class Student:\n    def __init__(self, name, age, gender):\n        self.name ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given list of numbers in ascending order.\n\n### Input:\n[9, 5, 7, 4, 1]\n\n", "label": "def sort_asc(lst):\n    return sorted(lst)", "prediction": "def sort_list(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers\n\nnumbers = ["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of the squares of all numbers from 0 to 10.\n\n### Input:\n\n\n", "label": "sum = 0\nfor i in range(11):\n  sum += i**2\n  \nprint(sum)", "prediction": "def sum_of_squares():\n    sum = 0\n    for i in range(11):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare and contrast Java and Python.\n\n### Input:\n\n\n", "label": "Java and Python are two of the most popular programming languages in the world. Java is a statically-typed, object-oriented language, while Python is a dynamically-typed, interpreted language. Java programs tend to be faster than Python programs as it runs directly on the hardware platform and sacrifices flexibility for speed. Python is easier to learn and has a larger number of libraries, making it more versatile and simpler to write programs. However, due to the lack of performance optimization, Python is less efficient than Java.", "prediction": "Java is a programming language that is used to create software applications. It is a high-level language that"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to create a shallow copy of the following dictionary: {\u2018a\u2019: 1, \u2018b\u2019: 2}.\n\n### Input:\n{'a': 1, 'b': 2}\n\n", "label": "import copy\n\noriginal_dict = {'a': 1, 'b': 2}\n\nshallow_copy_dict = copy.copy(original_dict)", "prediction": "### Output:\n{'a': 1, 'b': 2}"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to remove the redundant lines.\n\n### Input:\ndef foo(list):        \n    list.append(1)         \n    list.append(2)\n    list.append(3)       \n    list.append(1)\n    list.append(2)\n    return list\n\nlist = [1, 2, 3]\n\n", "label": "def foo(list):        \n    list.append(1)         \n    list.append(2)\n    list.append(3)\n    return list\n\nlist = [1, 2, 3]", "prediction": "print(foo(list))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which takes in a list of integers and outputs a list of odd numbers in descending order.\n\n### Input:\n[14, 21, 8, 5, 46]\n\n", "label": "def odd_descending(lst):\n    lst = [x for x in lst if x % 2 != 0]\n    return sorted(lst, reverse=True)\n\nlist = [14, 21, 8, 5, 46]\nprint(odd_descending(list))", "prediction": "### Output:\n[21, 14, 5]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code reads an input file and performs calculations on the input values based on equations provided in the file. To use the code, provide the input file path and output file path as command line arguments. The input file should contain the equations to be evaluated, with each equation on a separate line. The equations can be of the form y = x + z, y = x * z, or y = x. The input file should also specify the initial values of the variables in the x set. The output file will contain the final values of the variables in the y set.\n\n### Input:\n\n\n", "label": "#!/usr/bin/python\nimport sys\nimport re\nimport string\n\nvariables = {}\nouts = {}\nmonomial = \"([a-zA-z]+\\d+)\"\nmn = re.compile(monomial)\n\ndef extractValues(strin):\n        xAddr1 = strin[2].strip()\n        xAddr2 = strin[4].strip()\n        if xAddr1 in variables:\n            x1 = variables[xAddr1]\n        else:\n            raise Exception(\"equationReader: variable \" + xAddr1 + \" not found\")\n        if mn.match(xAddr2):\n            if xAddr2 in variables:\n                x2 = variables[xAddr2]\n            else:\n                raise Exception(\"equationReader: variable \" + xAddr2 + \" not found\")\n        else:\n            x2 = bool(int(xAddr2))\n        return {'x1':x1, 'x2':x2}\n\nif len(sys.argv) != 3:\n    raise Exception(\"Usage: equationReader <input file> <output file>\")\n\nfin = open(sys.argv[1], \"r\")\n\n\nlines = fin.readlines()\ninputs = re.compile(\"\\d+ inputs\")\noutputs = re.compile(\"\\d+ outputs\")\nfor index, line in enumerate(lines):\n    if inputs.match(line):\n        #Creation of the x set\n        xLine = lines[index + 1]\n        xValueLine = lines[index + 2]\n        ins = string.split(xLine)\n        insValues = string.split(xValueLine)\n        if len(ins) != len(insValues):\n            print(line + xLine + xValueLine)\n            raise Exception(\"equationReader: you need to provide a starting value for each x inserted\")\n        for i in range(len(ins)):\n            x = ins[i].strip()\n            variables[x] = bool(int(insValues[i]))\n    else:\n        if outputs.match(line):\n            #Creation of the y set\n            yLine = lines[index + 1]\n            ins = string.split(yLine, \" \")\n            for y in ins:\n                y.strip()\n                outs[y] = None\n            else:\n                if line == \"begin\":\n                    #When the equations start we get to the next cicle which performs the calculations\n                    break\n\n#y = x + z\nequation_XOR = re.compile(monomial + \" = \" + monomial + \" \\+ (\" + monomial + \"|(0|1))\")\n#y = x * z\nequation_AND = re.compile(monomial + \" = \" + monomial + \" \\* (\" + monomial + \"|(0|1))\")\n#y = x\nequation_ASSIGNEMENT = re.compile(monomial + \" = (\" + monomial + \"|(0|1))\")\n\nfor index, line in enumerate(lines):\n    tmp = string.split(line, \" \")\n    print(line)\n    if equation_XOR.match(line):\n        xdict = extractValues(tmp)\n        yAddr = tmp[0]\n        y = xdict['x1'] ^ xdict['x2']\n        variables[yAddr] = y\n        if yAddr in outs:\n            outs[yAddr] = y\n    else:\n        if equation_AND.match(line):\n            xdict = extractValues(tmp)\n            yAddr = tmp[0]\n            y = xdict['x1'] & xdict['x2']\n            variables[yAddr] = y\n            if yAddr in outs:\n                outs[yAddr] = y\n        else:\n            if equation_ASSIGNEMENT.match(line):\n                yAddr = tmp[0].strip()\n                xAddr = tmp[2].strip()\n                if mn.match(xAddr):\n                    if xAddr in variables:\n                        x = variables[xAddr]\n                    else:\n                        raise Exception(\"equationReader: variable \" + xAddr + \" not found\")\n                else:\n                    x = bool(xAddr)\n                y = x\n                variables[yAddr] = y\n                if yAddr in outs:\n                    outs[yAddr] = y\n            else:\n                print(\"Skipping malformed equation:\" + line)\n\n#Printing out the results\nfin.close()\nfout = open(sys.argv[2], \"w\")\nfor key, value in outs.items():\n    fout.write(key + \" = {}\\n\".format(int(value)))\nfout.close()\n", "prediction": "def read_input_file(input_file_path):\n    with open(input_file_path, 'r') as f"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print food items along with their prices from a given dictionary of food items and prices.\n\n### Input:\nfood_items = {\n 'Burger': 3.99,\n 'Fries': 1.99,\n 'Pizza': 12.99 \n}\n\n", "label": "for item, price in food_items.items():\n print(f'{item}: ${price}')", "prediction": "for food, price in food_items.items():\n    print(f'{food}: ${price}')"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to find the count of all prime numbers between two given numbers.\n\n### Input:\nstart_number = 10\nend_number = 20\n\n", "label": "def count_primes(start_number, end_number):\n    count = 0\n    for i in range (start_number, end_number+1):\n        is_prime = True\n        for j in range (2, i-1):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            count += 1\n    return count", "prediction": "def count_prime(start_number, end_number):\n    count = 0\n    for i in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum.\n\n### Input:\n2, 2\n\n", "label": "def calculate_sum(a, b):\n    if a == b:\n        return (a + b) * 3\n    else:\n        return a + b\n    \na = 2\nb = 2\nresult = calculate_sum(a, b)\nprint(result)", "prediction": "### Output:\n12"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to subtract two given integers.\n\n### Input:\nint1=-5\nint2=3\n\n", "label": "# Program to subtract two integers\n\nint1 = -5\nint2 = 3\n\n# Subtract\nsubtract = int1 - int2\n \nprint(\" Difference of two given integers is :\", subtract)", "prediction": "def subtract(int1, int2):\n    return int1-int2\n\nprint(subtract(int1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform a linear search of an array.\n\n### Input:\n\n\n", "label": "def linear_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "prediction": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to multiply all numbers in a list by a given number and return the result as a new list.\n\n### Input:\nmultiply [2, 4, 6] by 2\n\n", "label": "def multiplyListByNumber(list, number):\n  return [element*number for element in list]", "prediction": "def multiply_list(numbers, multiplier):\n    return [number * multiplier for number in numbers]\n\nprint(m"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning program in Python that will classify text data into 3 different categories.\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to sort the characters of a string in alphabetical order.\n\n### Input:\n\n\n", "label": "def sort_string(string):\n    # convert string to list\n    chars = list(string)\n    # sort the list \n    chars.sort()\n    # return the sorted string\n    return ''.join(chars)\n\nsorted_string = sort_string('abzcdr')\nprint(sorted_string)", "prediction": "def sort_string(string):\n    sorted_string = sorted(string)\n    return ''.join(sorted_string)\n\nstring"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python GUI application to display the sum of two numbers entered in two separate text fields.\n\n### Input:\n\n\n", "label": "import tkinter as tk\n\nroot = tk.Tk()\nroot.title('Sum Application')\n\nnum1 = tk.StringVar()\nnum2 = tk.StringVar()\n\ndef calculate():\n    try:\n        result = int(num1.get()) + int(num2.get())\n        sumLabel.configure(text=\"The sum is %d\" % result)\n    except ValueError:\n        sumLabel.configure(text=\"Please enter numbers\")\n\nnum1Field = tk.Entry(root, width=10, textvariable=num1)\nnum2Field = tk.Entry(root, width=10, textvariable=num2)\n\nsumButton = tk.Button(root, text=\"Sum\", command=calculate)\nsumLabel = tk.Label(root, text=\"\")\n\nnum1Field.grid(row=0, column=0)\nnum2Field.grid(row=0, column=1)\nsumButton.grid(row=1, column=0, columnspan=2)\nsumLabel.grid(row=2, column=0, columnspan=2)\n\nroot.mainloop()", "prediction": "import tkinter as tk\nfrom tkinter import ttk\n\nclass App(tk.Tk):\n    def __init"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search engine in Python to quickly search through a given array.\n\n### Input:\nArray: ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n", "label": "# Define the array\narray = ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n# Function to perform linear search\ndef linearSearch(search_item):\n    # Loop through array\n    for i in range(len(array)):\n        # If search item is found, return its position\n        if array[i] == search_item:\n            return i\n    # If item is not found, return -1\n    return -1\n\n# Input search item\ns = input(\"Enter the item to be searched: \")\n\n# Search the item\nresult = linearSearch(s)\n\n# Print result\nif result == -1:\n    print(\"Item not found.\")\nelse:\n    print(\"Item is found at position \"+str(result))", "prediction": "def search_engine(array):\n    search = input(\"Enter the word you want to search: \")\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class which will contain all the necessary methods to implement the str method.\n\n### Input:\n\n\n", "label": "class MyClass:\n    \n    def __init__(self, *args):\n        self.args = args\n        \n    def __str__(self):\n        return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))", "prediction": "class String:\n    def __init__(self, string):\n        self.string = string\n\n    def"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following python program such that it reaches an O(logN) complexity\n\n### Input:\ndef power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n return power(x, n / 2) * power(x, n / 2) \n else:\n return x * power(x, n / 2) * power(x, n / 2)\n\n", "label": "def power(x, n): \n if (n == 0): \n return 1\n elif (n % 2 == 0): \n y = power(x, n / 2) \n return y * y\n else:\n y = power(x, (n - 1) / 2) \n return x * y * y", "prediction": "def main():\n print(power(2, 3))\n\nif __name__ == '__main__':\n main"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python which sorts an array of numbers using the quicksort algorithm.\n\n### Input:\n[42,56,2,67,23,10,14,7]\n\n", "label": "def quickSort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quickSort(left) + middle + quickSort(right)\n\nunsorted_list = [42, 56, 2, 67, 23, 10, 14, 7]\nsorted_list = quickSort(unsorted_list)\n\nprint(sorted_list)", "prediction": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python for computing the maximum difference between any two elements in an array.\n\n### Input:\nArray: [2, 9, 4, 1, 5]\n\n", "label": "def max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array))", "prediction": "def max_diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which reverses the characters in a string.\n\n### Input:\n\n\n", "label": "\"\"\"\nCreate a function which reverses the characters in a string\n\"\"\"\n\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string\n\nstring = \"Python\"\nreversed_string = reverse_string(string)\n\nprint(\"The original string is:\", string)\nprint(\"The reversed string is:\", reversed_string)", "prediction": "def reverse_string(string):\n    return string[::-1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect anomalies in sensor data.\n\n### Input:\nNot applicable\n\n", "label": "import numpy as np\nfrom scipy import stats\n\ndef detect_anomalies(data):\n # Set upper and lower limit to 3 standard deviation\n u_limit = np.mean(data) + 3 * np.std(data)\n l_limit = np.mean(data) - 3 * np.std(data)\n \n # Detect anomalies\n anomalies = []\n for outlier in data:\n  if outlier > u_limit or outlier < l_limit:\n   anomalies.append(outlier)\n\n return anomalies\n\n# Generate example data\nexample_data = stats.norm.rvs(loc = 2, scale = 0.3, size = 1000)\n\n# Detect anomalies\nanomalies = detect_anomalies(example_data)\n\n# Print anomalies\nprint('Anomalies: ', anomalies)", "prediction": "### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary for alphabetical order of numeric input\n\n### Input:\n[2, 3, 1]\n\n", "label": "def createDict(arr):\n  res = {}\n  for i in range(len(arr)):\n    res[arr[i]] = i + 1\n  return res\n\nd = createDict([2, 3, 1])\nprint(d)", "prediction": "def sort_dict(input):\n    return {k: v for v, k in sorted(zip(input,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a Python Class using the given description.\n\n### Input:\ndescription = \"This class should store the name, age, and height of a person.\"\n\n", "label": "class Person:\n def __init__(self, name, age, height):\n self.name = name\n self.age = age\n self.height = height\n \n def get_name(self):\n return self.name\n \n def get_age(self):\n return self.age\n \n def get_height(self):\nreturn self.height", "prediction": "### Output:\nclass Person:\n    def __init__(self, name, age, height):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that computes the area of a circle using Radius.\n\n### Input:\n\n\n", "label": "def get_area(radius): \n    return math.pi*(radius**2)", "prediction": "def area_of_circle(radius):\n    return 3.14 * radius * radius\n\nprint(area_of"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to take two lists as input and combine them into a 3rd list.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n", "label": "def combine_lists(list1, list2):\n    output = list1 + list2\n    return output\n\ncombined_list = combine_lists(list1, list2)\nprint(combined_list)", "prediction": "def combine_lists(list1, list2):\n    return list1 + list2\n\nprint(combine"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a text generator in Python that can generate poem based on a given input.\n\n### Input:\n\n\n", "label": "def generate_poem(input): \n  poem = []\n  for i in range(len(input)):\n      line = ''\n      for j in range(i):\n          line += input[j] + ' '\n      poem.append(line)\n  return poem", "prediction": "def generate_poem(input):\n    \"\"\"\n    Generate a poem based on the given input.\n    \"\"\"\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class called Student that can store students' information, such as name, gender, and age.\n\n### Input:\n\n\n", "label": "class Student():\n    def __init__(self, name, gender, age):\n        self.name = name\n        self.gender = gender\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_gender(self):\n        return self.gender\n\n    def get_age(self):\n        return self.age", "prediction": "class Student:\n    def __init__(self, name, gender, age):\n        self.name ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula.\n\n### Input:\nTemperature in Celsius: 30\n\n", "label": "def celsius_to_fahrenheit(celsius):\n fahrenheit = (celsius * 9/5) + 32\n return fahrenheit\n\ncelsius_to_fahrenheit(30) # returns 86.0", "prediction": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code in Python to remove a given element from a given list.\n\n### Input:\nList: [2, 3, 4, 5, 6]\nElement to remove: 5\n\n", "label": "list = [2, 3, 4, 5, 6]\n\nlist.remove(5)", "prediction": "def remove_element(list, element):\n    return [x for x in list if x != element]\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an HTTP request in Python which requests a resource from a given URL.\n\n### Input:\n\n\n", "label": "import requests \n\nresponse = requests.get('<url>')", "prediction": "import requests\nurl = \"https://www.example.com/resource\"\nresponse = requests.get(url)\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that extrapolates the most frequent word from a given text.\n\n### Input:\nText = \"This is an example of a text with some words\"\n\n", "label": "from collections import Counter\n\ndef most_frequent_word(string):\n    split_string = string.split(\" \")\n    counter = Counter(split_string)\n    return counter.most_common(1)[0][0]\n\nprint(most_frequent_word(\"This is an example of a text with some words\"))", "prediction": "def most_frequent_word(text):\n    words = text.split()\n    counts = {}\n    for word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a Python program that creates a dictionary of students with their names and grades as the key-value pair?\n\n### Input:\n[{'name':'John', 'grade':'A'}, \n{'name':'Steve', 'grade':'B'}, \n{'name':'Bob', 'grade':'C'}]\n\n", "label": "data = [{'name':'John', 'grade':'A'}, \n        {'name':'Steve', 'grade':'B'}, \n        {'name':'Bob', 'grade':'C'}]\n\n# Create a dictionary of students\nstudent_dict = {}\nfor student in data:\n    student_dict[student['name']] = student['grade']\n\n# Print the dictionary\nprint(student_dict)", "prediction": "### Output:\n{'John': 'A', 'Steve': 'B', 'Bob': 'C"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python script for a Sudoku solving algorithm. The script should accept an unsolved Sudoku board as input and output the solved board.\n\n### Input:\ninput_board = [\n  [7,8,0,4,0,0,1,2,0],\n  [6,0,0,0,7,5,0,0,9],\n  [0,0,0,6,0,1,0,7,8],\n  [0,0,7,0,4,0,2,6,0],\n  [0,0,1,0,5,0,9,3,0],\n  [9,0,4,0,6,0,0,0,5],\n  [0,7,0,3,0,0,0,1,2],\n  [1,2,0,0,0,7,4,0,0],\n  [0,4,9,2,0,6,0,0,7]\n]\n\n", "label": "output_board = [\n  [7,8,5,4,3,9,1,2,6],\n  [6,1,2,8,7,5,3,4,9],\n  [4,9,3,6,2,1,5,7,8],\n  [8,5,7,9,4,3,2,6,1],\n  [2,6,1,7,5,8,9,3,4],\n  [9,3,4,1,6,2,7,8,5],\n  [5,7,6,3,9,4,8,1,2],\n  [1,2,8,5,8,7,4,9,6],\n  [3,4,9,2,1,6,5,7,7]\n]", "prediction": "def solve_sudoku(board):\n    find = find_empty(board)\n    if not find:\n        return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code template for a class in Python.\n\n### Input:\n\n\n", "label": "class ClassName:\n def __init__(self, parameters):\n\t # initialization code\n \n def some_method(self):\n\t # method code\n \n # additional methods and class variables", "prediction": "class MyClass:\n    def __init__(self, name, age):\n        self.name = name\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement linear search algorithm in a Python list.\n\n### Input:\n\n\n", "label": "def linear_search(list, target):\n    \"\"\"\n    This function will implement linear search algorithm in a Python list\n    and return the index of the target value or -1 if the target value is not found.\n    \"\"\"\n    for index, element in enumerate(list):\n        if element == target:\n            return index\n    return -1\n\nif __name__ == '__main__':\n    list = [1, 3, 5, 7, 9]\n    target = 7\n    print(linear_search(list, target))", "prediction": "def linear_search(list, target):\n    for i in range(len(list)):\n        if list[i]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nwrite a python code to filter 'mylist' and remove odd numbers\n\n### Input:\nmylist = [2, 3, 5, 7, 11, 13, 17, 19]\n\n", "label": "mylist = [x for x in mylist if x % 2 == 0]", "prediction": "def filter_odd(mylist):\n    return [x for x in mylist if x % 2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCategorize the following Github repositories:\n\n### Input:\nRepo A: Languages: Python, JavaScript, HTML.\nRepo B: Languages: Java, JavaScript, CSS.\n\n", "label": "Repo A: Python, JavaScript, HTML\nRepo B: Java, JavaScript, CSS", "prediction": "### Output:\nRepo A: Python, JavaScript, HTML.\nRepo B: Java, JavaScript, CSS"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper with Python and Beautiful Soup to scrape data from a single webpage.\n\n### Input:\nURL: http://example.com/page\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/page'\n\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nresults = soup.find_all('div', {'class': 'result'})\n\nfor result in results:\n title = result.find('h2').text\n description = result.find('p').text \n print(title, description)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com/page"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the total cost of an item given its unit price and number of units.\n\n### Input:\nTotal Quantity: 10\nUnit Price in Dollar: 4.50\n\n", "label": "\"\"\"\nCalculate total cost of an item given its unit price and number of units\n\"\"\"\n\n# Function to calculate total cost \ndef calculate_total_cost(total_quantity, unit_price): \n    total_cost = total_quantity * unit_price \n    return total_cost\n\n# main \nif __name__ == \"__main__\": \n    # Given quantity \n    total_quantity = 10\n    \n    # Given price \n    unit_price = 4.50\n    \n    total_cost = calculate_total_cost(total_quantity, unit_price) \n    print(\"Total cost: \", total_cost)", "prediction": "### Output:\nTotal Cost: 45.00"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to handle the following Student object.\n\n### Input:\nName: John\nAge: 20\nMarks: [80, 90, 85, 100]\n\n", "label": "class Student:\n    def __init__(self, name, age, marks):\n        self.name = name\n        self.age = age\n        self.marks = marks\n        \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_total_marks(self):\n        return sum(self.marks)", "prediction": "class Student:\n    def __init__(self, name, age, marks):\n        self.name ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to test the equality of two given strings\n\n### Input:\nSt1= \"Python\"\nSt2= \"Programming\"\n\n", "label": "if st1 == st2:\n    print(\"Strings are equal.\")\nelse:\n    print(\"Strings are not equal.\")", "prediction": "if St1==St2:\nprint(\"Strings are equal\")\nelse:\nprint(\"Strings are not"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a list of numbers and an integer threshold as inputs and returns the list elements that are greater than or equal to the threshold.\n\n### Input:\n[2, 8, 10, 13, 15], 10\n\n", "label": "def filter_numbers(nums, threshold):\n return [num for num in nums if num >= threshold]\n \n numbers = [2, 8, 10, 13, 15]\n threshold = 10\n \n print(filter_numbers(numbers, threshold))\n# Output: [10, 13, 15]", "prediction": "### Output:\n[10, 13, 15]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.\n\n### Input:\n\"This is a test string\"\n\n", "label": "def replace_spaces(s,replace_with):\n    return s.replace(\" \",replace_with)\n\ns = \"This is a test string\"\nreplace_with = \"X\"\n\nprint(replace_spaces(s,replace_with))", "prediction": "def replace_blank_spaces(string):\n    return string.replace(\" \", \"string\")\n\nprint(replace_blank_spaces"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to return the average value of numbers in the given list.\n\n### Input:\nnumbers = [2, 4, 6, 8]\n\n", "label": "def avg_list(numbers): \n    total = 0\n    for x in numbers: \n        total += x \n    return total / len(numbers)", "prediction": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average(numbers))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a machine learning algorithm to classify emails into two categories: junk and non-junk using Python.\n\n### Input:\n\n\n", "label": "from sklearn.naive_bayes import MultinomialNB\n\n# Load training data\nX_train = ...\ny_train = ...\n\n# Create classifier\nclf = MultinomialNB()   \n\n# Train the classifier\nclf.fit(X_train, y_train)   \n\n# Make predictions\ny_predicted = clf.predict(X_test)", "prediction": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping program in Python to scrape movie reviews from IMDb.\n\n### Input:\nhttps://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv\n\n", "label": "import requests\nimport bs4\n \nurl = \"https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv\"\npage = requests.get(url).text\nsoup = bs4.BeautifulSoup(page, 'html.parser')\n\nreviews = soup.find_all(class_=\"text show-more__control\")\nfor review in reviews:\n    print(review.get_text())", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.imdb.com/title/t"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to use the natural language processing library NLTK to classify emails into two categories: spam and non-spam.\n\n### Input:\nThe following are five sample emails:\n1. \u201cHey, I'm offering a 50% discount on our services!\u201d\n2. \u201cDid you see the latest news about the software update?\u201d\n3. \u201cDo you want to make money fast and easy?\u201d\n4. \u201cPlease save the date for our upcoming event on April 15th.\u201d\n5. \u201cYou have one last chance to get this limited offer!\u201d\n\n", "label": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# sample emails\nemails = [\n\"Hey, I'm offering a 50% discount on our services!\",\n\"Did you see the latest news about the software update?\",\n\"Do you want to make money fast and easy?\",\n\"Please save the date for our upcoming event on April 15th.\",\n\"You have one last chance to get this limited offer!\"\n]\n\nlabels = [1, 0, 1, 0, 1]\n\n# pre-process the emails\nemail_words = []\nfor email in emails:\n email_words.append(' '.join(nltk.word_tokenize(email)))\n\n# feature extraction\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(email_words)\n\n#naive bayes calssifier\nclassifier = MultinomialNB()\nclassifier.fit(features, labels)\n\n# test the model\ntest_email = \"Will you join us at the upcoming meeting?\u201d\ntest_email_words = ' '.join(nltk.word_tokenize(test_email))\ntest_features = vectorizer.transform([test_email_words])\n\n# predict the class\nprint(classifier.predict(test_features))  # output: [0] - non-spam email", "prediction": "### Output:\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetL"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve linear equations of two variables.\n\n### Input:\n\n\n", "label": "def solve_linear_equations(a,b,c,d,e,f):\n    x = (e*d - b*f) / (a*d - b*c)\n    y = (a*f - e*c) / (a*d - b*c)\n    return (x,y)\n\na,b,c,d,e,f = 1,2,3,4,5,6\nsolution = solve_linear_equations(a,b,c,d,e,f)\nprint(solution)", "prediction": "def solve_linear_equations(a, b, c, d):\n    x = (b * d"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a Social Networking user that has properties such as name, age, interests.\n\n### Input:\n\n\n", "label": "class SocialNetworkUser:\n    def __init__(self, name, age, interests):\n        self.name = name\n        self.age = age\n        self.interests = interests\n        \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n        \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age\n        \n    def get_interests(self):\n        return self.interests\n    \n    def set_interests(self, interests):\n        self.interests = interests", "prediction": "class SocialNetworkingUser:\n    def __init__(self, name, age, interests):\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python call to a list of numbers in an efficient way with the help of itertools library.\n\n### Input:\nimport itertools\nlist_of_nums = [4, 6, 2, 9, 7, 3]\n\n", "label": "from itertools import combinations\nlist_of_nums = [4, 6, 2, 9, 7, 3]\n\n# Get the combinations\ncombo = combinations(list_of_nums, 3)\n\n# Iterate over the combinations\nmax_sum = 0\nmax_combo = None\n\nfor i in combo: \n    current_sum = sum(i)\n    if current_sum > max_sum:\n        max_sum = current_sum\n        max_combo = i\n\n# Print the result\nprint(\"The maximum sum is: \", max_sum)\nprint(\"The combination is: \", max_combo)", "prediction": "def optimize_call(list_of_nums):\n    return list(itertools.chain.from_iterable(itertools.combinations"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to convert a given number from decimal format to its binary equivalent.\n\n### Input:\nnum = 25\n\n", "label": "def decToBin(num):\n    if num > 1:\n        decToBin(num//2) \n    print(num % 2,end = '')\n  \n# Driver code to test above\nif __name__ == '__main__': \n    num = 25\n    decToBin(num)", "prediction": "def decimalToBinary(num):\n    if num == 0:\n        return 0\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModel a simple linear regression in Python using the Boston housing data.\n\n### Input:\nBoston house features:\nRM \u2013 average number of rooms per dwelling \nLSTAT \u2013 % lower status of the population \nPTRATIO \u2013 pupil-teacher ratio by town\n\n", "label": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read Boston housing data in\nboston_df = pd.read_csv(\n    'https://raw.githubusercontent.com/PacktWorkshops/The-Data-Science-Workshop/master/Chapter02/Dataset/boston_house_prices.csv'\n)\n\n# Visualize data\nplt.style.use('ggplot')\nplt.scatter(boston_df.RM, boston_df.MEDV, color='black')\nplt.xlabel('Average number of rooms per dwelling (RM)')\nplt.ylabel('Median Value of Homes in $1000s (MEDV)')\nplt.title(\"Modeling Simple Linear Regression in Boston Housing Data\")\n\n# Calculate regression line\nX = boston_df[['RM']]\ny = boston_df['MEDV']\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Calculate predicted value\npredicted_MEDV = model.predict(X)\n\n# Plot regression line\nplt.plot(boston_df.RM, predicted_MEDV, color='blue', linewidth=2)\nplt.show()", "prediction": "Boston house prices:\nMEDV \u2013 median value of owner-occupied homes in $1000's\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a computer vision system for a specific application.\n\n### Input:\nDesign a computer vision system that can detect the presence of a person in a given room.\n\n", "label": "Create a Python script that can recognize the presence of a person in a given frame of an image/video. The script should incorporate a trained computer vision model that can detect human faces or other characteristics that can be used to differentiate a person from other objects.", "prediction": "### Output:\nThe computer vision system should be able to detect the presence of a person in a given"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that automatically generates bar charts for given data\n\n### Input:\n[1, 2, 3, 6, 5, 4, 7]\n\n", "label": "import matplotlib.pyplot as plt \n \n# Data to plot\ndata = [1, 2, 3, 6, 5, 4, 7]\n \n# Create the graph object\nplt.bar(range(len(data)), data, align='center')\n \n# Label the graph\nplt.xticks(range(len(data)), range(1, len(data)+1))\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Bar Graph')\n \n# Display the graph\nplt.show()", "prediction": "def bar_chart(data):\n    import matplotlib.pyplot as plt\n    plt.bar(range(len(data)), data"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following python code to take in an argument to carry out a specific operation and print it out.\n\n### Input:\ndef operation():\n    result = 2*2\n    print(result)\n\n", "label": "def operation(op):\n    result = eval(op)\n    print(result)\n\noperation('2*2') # prints 4", "prediction": "operation()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this Python function to return the result with two decimal points.\n\n### Input:\ndef area_of_circle(radius):\n    return 3.14 * radius * radius\n\n", "label": "def area_of_circle(radius):\n    return round(3.14 * radius * radius, 2)", "prediction": "### Output:\ndef area_of_circle(radius):\n    return round(3.14 * radius * radius"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to delete an element from the give list.\n\n### Input:\nList: [1,2,3,4,5]\nElement to delete: 3\n\n", "label": "def delete_element(arr, element): \n    new_arr = [i for i in arr if i!=element]\n    return new_arr", "prediction": "### Output:\n[1,2,4,5]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to build an API using python and Flask\n\n### Input:\n\n\n", "label": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef greet():\n    return \"Hello world!\"\n\nif __name__ == \"__main__\":\n    app.run()", "prediction": "```python\nfrom flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate a process using an AI model in Python to determine if an email is spam or not.\n\n### Input:\n\n\n", "label": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\n\n# Load data \ndata = pd.read_csv('data.csv')\n\n# Separate labels and features\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split the dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy is:', round(accuracy*100, 2), '%', sep='')\n\n# Print confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nprint('Confusion matrix:')\nprint(cm)", "prediction": "def is_spam(email):\n    # Load the model\n    model = load_model('spam_classifier"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python code for extracting the first word from a sentence?\n\n### Input:\n\n\n", "label": "def extract_first_word(sentence):\n    words = sentence.split()\n    return words[0]\n\nsentence = \"This is a sentence\"\nfirst_word = extract_first_word(sentence)\nprint(first_word)", "prediction": "def extract_first_word(sentence):\n    return sentence.split()[0]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that calculates the average hours of sunlight in a given city during a month. Assume the city name and month are provided as user input.\n\n### Input:\nCity Name: Tokyo\nMonth: February\n\n", "label": "# Get user input\ncity = input(\"City Name: \")\nmonth = input(\"Month: \")\n\n# Calculate the average hours of sunlight in a given city during a month\ndef average_sunlight(city, month):\n    # Your code goes here\n    ...\n\n# Print the result\nprint(average_sunlight(city, month))", "prediction": "### Output:\nThe average hours of sunlight in Tokyo during February is 10.5 hours."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to create a linked list in python nodes.\n\n### Input:\n\n\n", "label": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "prediction": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a system in Python for detecting plagiarism.\n\n### Input:\n\n\n", "label": "import difflib\n\ndef plagiarism_detector(string_a, string_b):\n    sequence = difflib.SequenceMatcher(None, string_a, string_b)\n    similarity = sequence.ratio() * 100\n    print('Similarity = {:.2f}%'.format(similarity))\n\nplagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')", "prediction": "def detect_plagiarism(text):\n    \"\"\"\n    Detects plagiarism in a given text by comparing"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to generate a random color code (RGB).\n\n### Input:\n\n\n", "label": "# Generate a random color code (RGB) \nimport random\n\ndef get_random_color():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return (r, g, b)\n\nif __name__ == '__main__':\n    print(get_random_color())", "prediction": "import random\ndef random_color():\n    return (random.randint(0,255),random.randint("}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to convert a given list of integers to a new list of strings.\n\n### Input:\n[1, 2, 3]\n\n", "label": "def to_string_list(lst):\n    return [str(x) for x in lst]\n\nint_list = [1, 2, 3]\nstring_list = to_string_list(int_list)\nprint(string_list)\n\n## Output\n['1', '2', '3']", "prediction": "### Output:\n['1', '2', '3']"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that will accept an array of integers and return an array with alternate elements removed starting from the even indices.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n", "label": "def alternating_elements(arr):\n    new_arr = [arr[i] for i in range(0, len(arr), 2)]\n    return new_arr\n\nresult = alternating_elements([1, 2, 3, 4, 5, 6])\nprint(result) #[2, 4, 6]", "prediction": "### Output:\n[1, 3, 5]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for a Python program that removes all instances of a given character from a string.\n\n### Input:\n'Hello World!', 'o'\n\n", "label": "def remove_letter(word, letter):\n    new_word = ''\n    for char in word:\n        if char != letter:\n            new_word += char\n    return new_word \n\nprint(remove_letter('Hello World!', 'o'))", "prediction": "def remove_char(string, char):\n    return ''.join([c for c in string if c !="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWe have a list of names and scores as shown below. Write a Python program to print out a list of names and their corresponding average scores\n\n### Input:\nlist = [['Bob', 43, 54, 66], ['James', 53, 45, 42], ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]]\n\n", "label": "def getAverageScores(list):\n    output = []\n    for item in list:\n        name = item[0]\n        scores = item[1:]\n        average_score = sum(scores) / len(scores)\n        output.append([name, average_score])\n    \n    return output\n\nlist = [['Bob', 43, 54, 66], ['James', 53, 45, 42], \n        ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]]\n\naverageScores = getAverageScores(list)\nprint(\"Name: Average Score\")\nfor item in averageScores:\n    print(\"{}: {:.2f}\".format(item[0], item[1]))", "prediction": "### Output:\nBob 54.33\nJames 46.67\nGrace 48.67"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a basic web scraper in Python to scrape the text of Wikipedia articles.\n\n### Input:\nA URL of any Wikipedia page, for example, \"https://en.wikipedia.org/wiki/Google\".\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make an HTTP GET request to the Wikipedia page\nurl = \"https://en.wikipedia.org/wiki/Google\"\nresponse = requests.get(url)\n\n# Parse the response HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Extract the raw content of the Wikipedia page\ncontent = soup.find(\"div\", {\"id\": \"mw-content-text\"}).text\n\nprint(content)", "prediction": "### Output:\nThe text of the Wikipedia article."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain a method of hashing a string in Python.\n\n### Input:\n\n\n", "label": "One method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string\u2019s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input.", "prediction": "def hash_string(s):\n    return sum([ord(c) for c in s])"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints out the multiplication table of 9.\n\n### Input:\nNot applicable\n\n", "label": "# Function to display the multiplication table\ndef displayTable():\n    # Nested loop to iteratre through the table\n    for i in range(1, 11):\n        for j in range(1, 11):\n            print(f'{i} x {j} = {i*j}')\n\n# Call the Function\ndisplayTable()", "prediction": "### Output:\nfor i in range(1, 11):\n    print(9, \"x"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes a positive integer and finds its prime factors.\n\n### Input:\n\n\n", "label": "def prime_factors(num):\n  factors = []\n  n = 2\n  while n * n <= num:\n    if num % n == 0:\n      factors.append(n)\n      num //= n\n    else:\n      n += 1\n  if num > 1:\n    factors.append(num)\n\n  return factors", "prediction": "def prime_factors(n):\n    factors = []\n    d = 2\n    while d * d"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a n by n multiplication table.\n\n### Input:\n3\n\n", "label": "# Function to generate multiplication table  \ndef multiplication_table(n): \n    # set the initial value and iters\n    num = 1\n    iters = n + 1\n      \n    # outer loop\n    for i in range(1, iters): \n          \n        # inner loop \n        for j in range(1, iters): \n              \n            # print statement \n            print(num, end = \" \") \n              \n            num = num + 1\n        print()\n  \n# Driver code\nn = 3\nmultiplication_table(n)", "prediction": "def multiplication_table(n):\n    for i in range(1, n + 1):\n        for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment analysis web application, using Python.'\n\n### Input:\nNot applicable\n\n", "label": "import flask\nfrom flask import request, jsonify\nfrom textblob import TextBlob\n\n#Initialize the Flask App\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n#Create a route for the web application\n@app.route('/', methods=['GET'])\ndef home():\n return '<h1> Sentiment Analysis Web Application </h1>'\n\n#Create a route for the API\n@app.route('/api/v1/sentiment', methods=['GET'])\ndef sentiment():\n #Get the text\n text = request.args.get('text')\n if text is None:\n  return jsonify({'error': 'no text received'})\n\n #Create a TextBlob from the text\n sentiment = TextBlob(text).sentiment\n\n #Return the sentiment as JSON\n return jsonify({'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity})\n\napp.run()", "prediction": "### Output:\nI have created a sentiment analysis web application using Python. The application takes in a text"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.\n\n### Input:\n\n\n", "label": "#! /usr/bin/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com/stefantkeller/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '../24_LL_ev/20150211_sample21-1-d6/spot333um.csv'\n    calib_folder = '../24_LL_ev/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot\n    ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity)\n    xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength)\n    ylim3 = str2lst(instr['ylim3']) # 3rd y-axis\n    plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it.\n    textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot\n    texty3 = str2lst(instr['texty3']) # 3rd y-coordinate\n    llow0 = {}\n    lhigh0 = {}\n    texty1 = {}\n    for T in Temperatures:\n        llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity\n        lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops\n        texty1[T] = float(instr['texty1[{0}]'.format(T)])\n\n    \n    \n    #\n    #\n    #------------------------------------\n    #------------------------------------\n    # plot\n    cols = varycolor(3*len(Temperatures))\n\n\n    plt.subplot(3,1,1)\n    cnt = 0 # color counter\n\n    q0,m0 = {},{} # for linreg\n    for T in Temperatures:\n\n        # linreg\n        q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].v()[llow0[T]:lhigh0[T]],\n                                emitted[T].e()[llow0[T]:lhigh0[T]],\n                                overwrite_zeroerrors=True)\n\n        emax,emaxi = ev.max(emitted[T],True)\n        amax = absorbed[T][emaxi]\n        print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax)\n        # plot\n        plt.errorbar(absorbed[T].v(),emitted[T].v(),\n                     xerr=absorbed[T].e(),yerr=emitted[T].e(),\n                     c=cols[cnt],linestyle=' ')\n        plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1])\n\n        plt.text(textx,texty1[T],\n                 '${0}$$^\\circ$C: ${1}$ %'.format(T_out[T],m0[T].round(3)*100),\n                 color=cols[cnt],fontsize=fontsize)\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Emited power (W)')\n    plt.xlim(xlim)\n    plt.ylim(ylim1)\n    plt.grid('on')\n    \n    #plt.show()\n\n    \n    #------------------------------------\n    plt.subplot(3,1,2)\n    cnt = 0 # reset color counter\n\n    q1,m1 = {},{}\n    for T in Temperatures:\n        relref = reflected[T]/pumped[T]*100\n        \n        # plot\n        plt.errorbar(absorbed[T].v(),relref.v(),\n                     xerr=absorbed[T].e(),yerr=relref.e(),\n                     c=cols[cnt],linestyle=' ')\n        cnt+=3\n\n    plt.title(title)\n    plt.xlabel('Absorbed power (W)')\n    plt.ylabel('Reflectivity (%)')\n    plt.xlim(xlim)\n    plt.ylim(ylim2)\n    plt.grid('on')\n\n    #plt.show()\n    \n    #------------------------------------\n    # plot dissipation and spectra\n    plt.subplot(3,1,3)\n    cnt = 0 # reset\n    \n    q3,m3 = {},{}\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            # lambda_short\n            #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), \n            #             xerr=dissipated[T].e(),yerr=spectra[T][0].e(),\n            #             c=cols[cnt],linestyle=' ')\n        \n            # lambda_long\n            # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1\n            q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].v()[llow0[T]:lhigh0[T]],\n                                    spectra[T][1].e()[llow0[T]:lhigh0[T]],\n                                    overwrite_zeroerrors=True)\n            \n            # show only a part, not to confuse reader\n            #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], \n            #             xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]],\n            #             c=cols[cnt],linestyle=' ')\n            \n            # show the whole range\n            plt.errorbar(dissipated[T].v(),spectra[T][1].v(), \n                         xerr=dissipated[T].e(),yerr=spectra[T][1].e(),\n                         c=cols[cnt],linestyle=' ')\n            \n        cnt += 3\n\n    plt.title(title)\n    plt.xlim(xlim3)\n    plt.ylim(ylim3)\n    plt.xlim()\n    plt.xlabel('Dissipated power (W)')\n    plt.ylabel('Wavelength (nm)')\n    plt.grid('on')\n    cnt = 0 # reset\n    \n    \n    wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets\n    slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes\n    T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3])\n    \n    dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th\n    R_th = dldD/dldT\n    for T in Temperatures:\n        if T in plot_temps_for_3:\n            plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1])\n        cnt+=3\n    \n    plt.text(textx3,texty3[0],\n             '$\\lambda=$'+'$({})$'.format(dldT.round(3))+'$T_{hs}+$'+'$({})$'.format(dldD.round(3))+'$D+$'+'${}$'.format(l0.round(3)),\n             color='k')\n    \n    R_th = R_th.round(2)\n    therm_imp = 'Thermal impedance: $({0})$ K/W'.format(R_th)\n    plt.text(textx3,texty3[1],\n             therm_imp,color='k')\n    print therm_imp\n\n    \n    for T in Temperatures:\n        print meantemp[T]\n    \n    plt.show()\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "prediction": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import optimize\nfrom calibration import cal"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that fills in the missing data with median values.\n\n### Input:\n[1, None, 4, 5, None, 10]\n\n", "label": "import numpy as np\n\ndef fillWithMedian(data):\n    data = np.array(data)\n    median_val = np.nanmedian(data)\n    data[np.isnan(data)] = median_val \n    return data\n\ndata = [1, None, 4, 5, None, 10]\nprint(fillWithMedian(data))", "prediction": "### Output:\n[1, 3, 4, 5, 3, 10"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to design and implement a knapsack problem.\n\n### Input:\nn = 5, W = 8, weights = [2, 3, 4, 5, 6], values = [2, 5, 6, 12, 9]\n\n", "label": "def knapsack(n, W, weights, values): \n    # create a 2D array, dp[n+1][W+1], and fill with zeros \n    dp = [[0 for x in range(W+1)] for x in range(n+1)] \n\n\u3000\u3000#iterating over array rows \n    for i in range(n+1): \n        #iterating over array columns \n        for w in range(W+1): \n            if i==0 or w==0 : \n                dp[i][w] = 0\n            elif weights[i-1] <= w: \n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]],  dp[i-1][w]) \n            else: \n                dp[i][w] = dp[i-1][w] \n  \n    return dp[n][W] \n\n# test\nprint(knapsack(5, 8, [2, 3, 4, 5, 6], [2, 5, 6, 12, 9]))\n# Output: 20", "prediction": "def knapsack(n, W, weights, values):\n    dp = [[0 for _ in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this Python code for inserting a large number of records into an existing MongoDB collection.\n\n### Input:\npeople = [\n  {\n    'name': 'John Doe',\n    'age': 30\n  },\n  {\n    'name': 'Jane Doe',\n    'age': 28\n  },\n  ...\n]\n\n", "label": "import pymongo\n\nclient = pymongo.MongoClient('mongodb://localhost:27017/') \ndb = client['database_name'] \ncollection = db['collection_name']\n\n# Use bulk_write to insert a large number of documents\ncollection.bulk_write([\n   pymongo.InsertOne(document) \n   for document in people\n])", "prediction": "def insert_people(people):\n  for person in people:\n    db.people.insert_one(person)\n\ninsert"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to find the nth term of the Fibonacci sequence for a given number n.\n\n### Input:\nn = 10\n\n", "label": "# Python 3 program to find the nth\n# Fibonacci number\ndef Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    # First Fibonacci number is 0\n    elif n==1:\n        return 0\n    # Second Fibonacci number is 1\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n \n# Driver Program\nprint(Fibonacci(10))\n\n# Output\n34", "prediction": "### Output:\nThe nth term of the Fibonacci sequence is 55."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two dictionaries.\n\n### Input:\ndict1 = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3',\n}\n\ndict2 = {\n    'key1': 'value1',\n    'key2': 'value4',\n    'key4': 'value5',\n}\n\n", "label": "def compare_dictionaries(dict1, dict2):\n  result = {} \n  for key in dict1:    \n    if (key in dict2):\n      if (dict1[key] == dict2[key]):\n        result[key] = \"Same Value\"\n      else:\n        result[key] = \"Different Value\"\n    else:\n      result[key] = \"dict2 doesn't contains this keys\"\n\n  for key in dict2:\n    if (key not in dict1):\n      result[key] = \"dict1 doesn't have this key\"\n  \n  return result", "prediction": "def compare(dict1, dict2):\n    if dict1 == dict2:\n        return True\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to convert a given address into its equivalent latitude and longitude coordinates.\n\n### Input:\nTokyo Tower, Tokyo\n\n", "label": "import requests\nimport json\n\ndef get_lat_long_from_address(address):\n    \"\"\"\n    Converting a given address into its equivalent latitude and longitude coordinates.\n    \"\"\"\n    try:\n        url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address\n        response = requests.get(url).json()\n\n        geography = response['results'][0]['geometry']\n        latitude = geography['location']['lat']\n        longitude = geography['location']['lng']\n        return latitude, longitude\n    except:\n        return None\n\nlat, lng = get_lat_long_from_address(\"Tokyo Tower, Tokyo\")\nprint(\"Latitude: %.06f \\t Longitude: %.06f\" % (lat, lng))", "prediction": "### Output:\nLatitude: 35.658056\nLongitude: 139.745556"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to calculate the value of an employee\u2019s paycheck given the hours worked and the hourly rate.\n\n### Input:\n\n\n", "label": "def calc_paycheck(hours_worked, hourly_rate):\n return hours_worked * hourly_rate", "prediction": "def calculate_pay(hours, rate):\n    return hours * rate"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to create an NxN matrix with the values in the range 0 to NxN-1\n\n### Input:\n\n\n", "label": "def generate_matrix(N):\n    matrix = [] \n    for i in range(N): \n        row = [] \n        for j in range(N): \n            row.append(i * N + j) \n        matrix.append(row) \n    return matrix", "prediction": "def create_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = []\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python game that allows a user to guess a number from 1 to 10. The game should display appropriate messages based on the player's input.\n\n### Input:\nNot applicable\n\n", "label": "# Game script\nimport random\n\n# Welcome message\nprint(\"Welcome to the guessing game!\")\n\n# Generate a random number\ntarget_number = random.randint(1, 10)\n\n# Initialise variables and flags\nguessed = False\nattempts = 0\n\nwhile not guessed:\n attempts += 1\n guess = int(input(\"Guess a number (1-10): \"))\n\n if guess < target_number:\n  print(\"That's too low. Try again!\")\n elif guess > target_number:\n  print(\"That's too high. Try again!\")\n else:\n  guessed = True\n\n# Congratulations message\nif guessed:\n print(\"Congratulations! You guessed the number in {} attempts\".format(attempts))", "prediction": "### Output:\nimport random\nimport time\n\ndef game():\n    print(\"Welcome to the Number Guess"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest palindromic subsequence of a given string.\n\n### Input:\nroadrace\n\n", "label": "def longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if string[i] == string[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]", "prediction": "### Output:\nrace"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python program according to the input:\n\n### Input:\nReverse the elements of a list.\n\n", "label": "def reverse_list(list):\n    for i in range(int(len(list) / 2)):\n        temp = list[i]\n        list[i] = list[len(list) - i - 1]\n        list[len(list) - i - 1] = temp\n    return list", "prediction": "def reverse_list(lst):\n    return lst[::-1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python script to make sure the program will run correctly\n\n### Input:\n# This program prints out the numbers from 1 to 10\nfor x in range(9):\n    print(x + 1)\n\n", "label": "# This program prints out the numbers from 1 to 10\nfor x in range(10):\n    print(x + 1)", "prediction": "# This program prints out the numbers from 1 to 10\nfor x in range(9"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to predict whether a given customer is going to pay next month's bill.\n\n### Input:\nA dataset containing customer information such as credit score, payment history etc.\n\n", "label": "# Load the data\ndf = pd.read_csv('data.csv')\n\n# Create the necessary features \nX = df.drop('Payment', axis=1)\ny = df['Payment']\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Check accuracy of predictions\naccuracy = accuracy_score(y,predictions)\nprint(accuracy)", "prediction": "### Output:\nA prediction of whether the customer is going to pay next month's bill or not."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the provided data to create a machine learning model in Python that can predict the purchase amount of a customer.\n\n### Input:\n[ \n  { \n    \"age\": 52,\n    \"gender\": \"Male\",\n    \"income\": 16000,\n    \"purchase_amount\": 2100\n  },\n  { \n    \"age\": 44,\n    \"gender\": \"Female\",\n    \"income\": 19000,\n    \"purchase_amount\": 3500\n  },\n ....\n]\n\n", "label": "#import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n#load data\ndata = pd.read_csv(...)\n\n#split data into train and test sets\nx = data.drop('purchase_amount', axis = 1)\ny = data['purchase_amount']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)\n\n#fit model to training data\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n\n#predict on testing data\npredictions = model.predict(x_test)\n\n#calculate accuracy\nscore = model.score(x_test,y_test)\nprint(\"Model accuracy:\", score)", "prediction": "### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI Assistant in Python that can identify Web sites and classify them based on category.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nimport json \nimport time\n\n# Define a function to process the text\ndef process_text(text):\n    # Make an API request and get the results in JSON\n    response = requests.get('https://api.example.com', params={\n        'request': text\n        })\n    data = json.loads(response.text)\n    \n    # Get the category from the results\n    category = data['category']\n    \n    # Return the category\n    return category\n\n# Loop as long as the user keeps talking\nwhile True:\n    # Get the user's input\n    user_input = input('> ')\n    \n    # Process the input\n    category = process_text(user_input)\n    \n    # Print the category\n    if category:\n        print(f\"This is a {category} website.\")\n    else:\n        print(\"I'm not sure what to make of this.\")\n    \n    # Wait 5 seconds before asking for the user's input again\n    time.sleep(5)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_category(url):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program that performs Sentiment Analysis on text input. The program should take a string as input and output whether the sentiment of the string is positive or negative.\n\n### Input:\n\"The customer service was superb!\"\n\n", "label": "class SentimentAnalyzer():\n def __init__(self): # Constructor\n pass\n\n def analyze(self, text):\n sentiment = 0.0\n \n # Your logic to analyze the sentiment here\n # ...\n \n if sentiment > 0:\n return 'positive'\n elif sentiment < 0:\n return 'negative'\n else:\n return 'neutral'\n\nanalyzer = SentimentAnalyzer()\nsentiment = analyzer.analyze(\"The customer service was superb!\")\nprint(sentiment)", "prediction": "### Output:\nThe sentiment of the input string is positive."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake an iterative Binary Search algorithm using Python\n\n### Input:\n\n\n", "label": "def binary_search_iterative(arr, start, end, target):\n    while start <= end:\n        mid = (start + end) //2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid+1\n        else:\n            end = mid-1\n    return -1", "prediction": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) -"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given string to an integer by removing all non-numeric characters.\n\n### Input:\n\"29A3B8746\"\n\n", "label": "def remove_non_numeric(str):\n res = \"\"\n for c in str:\n if c.isnumeric():\n res += c\n return int(res)\n\ns = \"29A3B8746\"\ninteger = remove_non_numeric(s)\nprint(integer) // 2938746", "prediction": "def remove_non_numeric(string):\n    return int(\"\".join(filter(str.isdigit, string)))\n\nprint(remove"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out all the combination of a given set of numbers.\n\n### Input:\n[1, 2, 3]\n\n", "label": "def combinations(arr):\n    res = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res.append([arr[i], arr[j]])\n    return res\n\nprint(combinations([1, 2, 3]))", "prediction": "def combination(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print the characters at even positions in a given string.\n\n### Input:\nHello World!\n\n", "label": "def even_positions(string):\n    result = \"\"\n    for i in range(0, len(string), 2):\n        result += string[i]\n    return result\n\nprint(even_positions(\"Hello World!\"))", "prediction": "def print_even_positions(string):\n    for i in range(0, len(string), 2):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random array of numbers\n\n### Input:\n\n\n", "label": "import random\n\ndef generate_random_array(size):\n    return random.sample(range(100), size)", "prediction": "import random\ndef random_array():\n    return random.sample(range(1, 100), 10"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to find a missing number in an array of n distinct numbers.\n\n### Input:\n[1, 3, 8, 5, 6]\n\n", "label": "def find_missing_num(arr):\n    n = len(arr)+1\n    sum_of_n = int(n*(n+1)/2)\n    sum_of_arr = 0\n    for i in arr:\n        sum_of_arr += i\n    return sum_of_n - sum_of_arr", "prediction": "### Output:\n7"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to convert a student's grade from a 0 to 100 scale to the corresponding letter grade according to the following grade scale.\n\n### Input:\n90\n\n", "label": "def grade_converter(score):\n    if score >= 90:\n        return 'A'\n    elif score >= 80:\n        return 'B'\n    elif score >= 70:\n        return 'C'\n    elif score >= 60:\n        return 'D'\n    else:\n        return 'F'", "prediction": "### Output:\nA\n\n### Input:\n80\n\n### Output:\nB\n\n### Input:\n70\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse automated refactoring to make Python code more readable.\n\n### Input:\ndef concat(str1, str2):\n    output = str1 + str2\n    return output\n\n", "label": "def concat(str1: str, str2: str) -> str:\n    \"\"\"Concatenate two strings.\n\n    Args:\n        str1: The first string\n        str2: The second string\n\n    Returns:\n        str: The concatenated string\n    \"\"\"\n    return str1 + str2", "prediction": "def concat(str1, str2):\n    return str1 + str2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print a sorted list of the given input string.\n\n### Input:\nInput string: computer\n\n", "label": "def sortString(inputString): \n  \n    words = inputString.split() \n    words.sort() \n  \n    for i in words: \n        print(i) \n          \nsortString(inputString)", "prediction": "def sort_string(input_string):\n    return sorted(input_string)\n\nprint(sort_string(\"computer\"))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following JavaScript code to its equivalent Python code.\n\n### Input:\nconst array = [1, 2, 3];\n\n", "label": "array = [1, 2, 3]", "prediction": "const result = array.map((element) => element * 2);\n\nconsole.log(result);\n\n### Output"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that contains a method to find the intersection of two sorted integer arrays with no duplicates.\n\n### Input:\n\n\n", "label": "class ArrayIntersection():\n    def __init__(self, arr1, arr2):\n        self.arr1 = arr1\n        self.arr2 = arr2\n    \n    def intersection(self):\n        intersection = []\n        i, j = 0, 0\n        while i < len(self.arr1) and j < len(self.arr2):\n            if self.arr1[i] == self.arr2[j]:\n                intersection.append(self.arr1[i])\n                i += 1\n                j += 1\n            elif self.arr1[i] < self.arr2[j]:\n                i += 1\n            else:\n                j += 1\n        return intersection\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [3, 5, 6]\n    intersection = ArrayIntersection(arr1, arr2)\n    print(intersection.intersection())", "prediction": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int])"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of numbers and checks if a given number is present in the list.\n\n### Input:\nGiven list: [12, 45, 37, 13, 4]\nGiven number: 4\n\n", "label": "list = [12, 45, 37, 13, 4]\nx = 4\n\nif x in list:\n print(\"Given number is present in the list\") \nelse: \n print(\"Given number is not present in the list\")", "prediction": "### Output:\nThe given number is present in the list."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array in Python, write a code to calculate the sum of all elements.\n\n### Input:\narr = [[1, 2, 3], [4, 5, 6], [7 , 8, 9]]\n\n", "label": "total = 0\nfor row in arr: \n    for num in row: \n        total += num \nprint(total) # 45", "prediction": "### Output:\nsum = 45"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to perform sentiment analysis on an input string and output the sentiment score.\n\n### Input:\nExample sentence: I had a great day yesterday\n\n", "label": "import nltk\n\nsentence = \"I had a great day yesterday\"\n\nwords = nltk.word_tokenize(sentence)\n\ntext = nltk.Text(words)\n\npolarity_score = text.polarity_scores()\n\nprint(polarity_score)", "prediction": "### Output:\nThe sentiment score for the input sentence is 0.8."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to calculate the sum of the squares of the first 100 natural numbers\n\n### Input:\n\n\n", "label": "def sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 2\n    return total\n \nprint(sum_of_squares(100))", "prediction": "def sum_of_squares(n):\n    return sum([i**2 for i in range(1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that reverses a given linked list.\n\n### Input:\n\n\n", "label": "# Node class \nclass Node: \n \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n \n    # Function to initialize the Linked List object \n    def __init__(self):  \n        self.head = None\n \n    # Function to reverse linked list \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev \n\n# Code execution starts here \nif __name__=='__main__': \n    # Start with the empty list \n    llist = LinkedList() \n    llist.head = Node(1) \n    second = Node(2) \n    third = Node(3) \n    llist.head.next = second; # Link first node with second  \n    second.next = third; # Link second node with the third node \n    llist.reverse()", "prediction": "def reverse_linked_list(head):\n    prev = None\n    current = head\n    while current is"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to count how many words are in the given string.\n\n### Input:\n\"Do not stand at my grave and weep\"\n\n", "label": "def count_words(string):\n    words = string.split(' ')\n    return len(words)\n\nsentence = \"Do not stand at my grave and weep\"\ncount = count_words(sentence)\nprint(\"The given string has {} words.\".format(count))", "prediction": "def count_words(string):\n    return len(string.split())"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a list of email addresses as argument and stores them in a CSV.\n\n### Input:\n\n\n", "label": "\"\"\"\nCreate a Python program that takes in a list of email addresses and stores them in a CSV.\n\"\"\"\n\nimport csv\n\ndef store_emails(emails):\n    with open('emails.csv', 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for email in emails:\n            writer.writerow([email])\n\nif __name__ == '__main__':\n    emails = [\"example@gmail.com\",\"example2@gmail.com\",\"example3@gmail.com\"]\n    store_emails(emails)", "prediction": "import csv\ndef store_emails(emails):\n    with open('emails.csv', 'w') as"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Program to sort an array without using any built-in functions.\n\n### Input:\n\n\n", "label": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array", "prediction": "def sort_array(arr):\n    for i in range(len(arr)):\n        for j in range(i+"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to concatenate two strings.\n\n### Input:\n\n\n", "label": "def concatenate(word1, word2):\n    return word1 + word2", "prediction": "def concatenate_strings(str1, str2):\n    return str1 + str2\n\nstr1 ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code provides a Python class called \"Provider\" that generates user agent strings for various web browsers. To use this code, import the \"Provider\" class from this module and call its methods to generate user agent strings for specific browsers.\n\n### Input:\n\n\n", "label": "from __future__ import unicode_literals\nfrom . import BaseProvider\nfrom . import date_time\nfrom datetime import datetime\nimport random\n\n\nclass Provider(BaseProvider):\n    user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari')\n\n    windows_platform_tokens = (\n        'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1',\n        'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90',\n        'Windows 98', 'Windows 95', 'Windows CE'\n    )\n\n    linux_processors = ('i686', 'x86_64',)\n\n    mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC')\n\n    langs = ('en-US', 'sl-SI', 'it-IT')\n\n    @classmethod\n    def mac_processor(cls):\n        return cls.random_element(cls.mac_processors)\n\n    @classmethod\n    def linux_processor(cls):\n        return cls.random_element(cls.linux_processors)\n\n    @classmethod\n    def user_agent(cls):\n        name = cls.random_element(cls.user_agents)\n        return getattr(cls, name)()\n\n    @classmethod\n    def chrome(cls):\n        saf = str(random.randint(531, 536)) + str(random.randint(0, 2))\n\n        platforms = (\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n            \"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\".format(\n                cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def firefox(cls):\n        ver = (\n            'Gecko/{0} Firefox/{1}.0'.format(\n            date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)),\n            'Gecko/{0} Firefox/3.6.{1}'.format(\n                date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)),\n            'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ),\n        )\n\n        platforms = (\n            \"({0}; {1}; rv:1.9.{2}.20) {3}\".format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)),\n            \"({0}; rv:1.9.{1}.20) {2}\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)),\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def safari(cls):\n        saf = \"{0}.{1}.{2}\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))\n        if random.randint(0, 1) == 0:\n            ver = \"{0}.{1}\".format(random.randint(4, 5), random.randint(0, 1))\n        else:\n            ver = \"{0}.0.{1}\".format(random.randint(4, 5), random.randint(1, 5))\n\n        platforms = (\n            '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format(\n                cls.windows_platform_token(), saf, ver, saf),\n            '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format(\n                cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf),\n            '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format(\n                random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4),\n                random.randint(111, 119), saf\n            )\n        )\n\n        return 'Mozilla/5.0 ' + cls.random_element(platforms)\n\n    @classmethod\n    def opera(cls):\n\n        platforms = (\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n            '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(\n                cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190),\n                random.randint(10, 12)),\n        )\n\n        return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms))\n\n    @classmethod\n    def internet_explorer(cls):\n        return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format(\n            random.randint(5, 9),\n            cls.windows_platform_token(),\n            random.randint(3, 5),\n            random.randint(0, 1)\n        )\n\n    @classmethod\n    def windows_platform_token(cls):\n        return cls.random_element(cls.windows_platform_tokens)\n\n    @classmethod\n    def linux_platform_token(cls):\n        return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors))\n\n    @classmethod\n    def mac_platform_token(cls):\n        return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format(\n            cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))\n\n", "prediction": "```python\nimport provider\n\n# Generate a user agent string for Chrome\nchrome_user_agent = provider"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code connects to the Pocket API, retrieves a user's unread articles, and saves them to a JSON file. To use this code, you will need to replace the POCKET_CONSUMER_KEY and REDIRECT_URI variables with your own values. You will also need to install the Pocket Python library and the Django web framework. Once you have done this, you can run the code and it will prompt you to authorize the app with your Pocket account. After you have authorized the app, it will retrieve your unread articles and save them to a JSON file.\n\n### Input:\n\n\n", "label": "import os\nimport sys\nimport requests\nimport time\nfrom pocket import Pocket\nimport webbrowser\nimport collections\nimport json\n\nsys.dont_write_bytecode = True\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"trex.settings\")\nimport django\n\ndjango.setup()\nfrom restapi.models import *\nfrom random import randint\n\n# POCKET_CONSUMER_KEY = '67853-fa80baf944f56fd495dab319' #Desktop\nPOCKET_CONSUMER_KEY = '67853-17e07228b29f7c44ef6d2784'  # Web\nREDIRECT_URI = 'http://localhost:8000/home/about'\n'''\n# connecting to pocket API; pocket_api stores the http response\npocket_api = requests.post('https://getpocket.com/v3/oauth/request',\n                           data={'consumer_key': POCKET_CONSUMER_KEY,\n                                 'redirect_uri': 'http://localhost:8000/home/about'})\n\nprint pocket_api.status_code  # if 200, it means all ok.\n\nprint pocket_api.headers  # prints in JSON format\n\nprint pocket_api.text\n\ncode = pocket_api.text.split('=')[1]\n\nprint code\n\nos.system('chrome \"https://getpocket.com/auth/authorize?request_token={}&redirect_uri={}\"'.format(code, 'http://localhost:8000/home/about'))\n\ntime.sleep(5)\n\nprint '--------------------------------------------'\n\npocket_auth = requests.post('https://getpocket.com/v3/oauth/authorize',\n                            data={'consumer_key': POCKET_CONSUMER_KEY,\n                                  'code': code})\nprint pocket_auth.status_code\nprint pocket_auth.text\npocket_access_token = pocket_auth.text.split('=')[1].split('&')[0]\nprint '--------------------------------------------'\n\nrequest_token = Pocket.get_request_token(consumer_key=POCKET_CONSUMER_KEY, redirect_uri=REDIRECT_URI)\nprint 1\n# URL to redirect user to, to authorize your app\nauth_url = Pocket.get_auth_url(code=request_token, redirect_uri=REDIRECT_URI)\nprint 2\n# os.system('chrome \"{}\"'.format(auth_url))\nprint auth_url\nwebbrowser.open_new_tab(auth_url)\nuser_credentials = Pocket.get_credentials(consumer_key=POCKET_CONSUMER_KEY, code=request_token)\ntime.sleep(3)\nprint 3\naccess_token = user_credentials['access_token']\nprint 4\npocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token)\n\n\n\n\npocket_get = open('pocket_get.txt', 'w')\n\n\ndef recursive_keys(d, depth=0):\n    for key in d:\n        if isinstance(d[key], collections.Mapping):\n            print ' ' * depth + key\n            pocket_get.write(' ' * depth + key + '\\n')\n            recursive_keys(d[key], depth + 1)\n        else:\n            print ' ' * depth + key + ' ->' + unicode(d[key])\n            pocket_get.write(' ' * depth + key + ' ->' + unicode(d[key]) + '\\n')\n\n\nd = pocket_instance.get()[0]['list']\nfor key in d:\n    print d[key]['resolved_title'], d[key]['given_url']\n# open('test.txt', 'w').write(str(pocket_instance.get()))\n\nprint '--------------------------------'\n\n#access_token = 'd8830338-65cd-ef39-64db-ec5b99'\n\n#pocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token)\n\n#sample = pocket_instance.get(detailType='complete')[0]\n'''\n\nwith open('../result.json', 'r') as fp:\n    pocket_request = json.load(fp)\n\npocket_posts = pocket_request['list']\n\n\ndef pretty(d, indent=0):\n    for key, value in d.iteritems():\n        print '  ' * indent + unicode(key)\n        if isinstance(value, dict):\n            pretty(value, indent + 1)\n        else:\n            print '  ' * (indent + 1) + unicode(value)\n\ndata = {'posts': {}}\n\nfor post in pocket_posts:\n    data['posts'][post] = {}\n    data['posts'][post]['name'] = pocket_posts[post]['given_title']\n    data['posts'][post]['embed_link'] = pocket_posts[post]['resolved_url']\n    if 'tags' in pocket_posts[post]:\n        data['posts'][post]['tags'] = [tag for tag in pocket_posts[post]['tags']]\n    else:\n        data['posts'][post]['tags'] = []\n\nprint pocket_posts[pocket_posts.keys()[0]]\n# print [tag for tag in pocket_posts[post]]\n'''\ntags = []\n\nfor post in pocket_posts:\n    #print post\n    if 'tags' in pocket_posts[post]:\n        tags.append(pocket_posts[post]['tags'])\n\nprint tags\n\npocket_api = requests.post('https://getpocket.com/v3/get',\n                           data={'consumer_key': POCKET_CONSUMER_KEY,\n                                 'access_token': access_token,\n                                 'count': 30,\n                                 'state': 'unread',\n                                 'detailType': 'complete',\n                                 })\n\n# print pocket_api.headers\n\nprint pocket_api.text\n\n\ne = json.loads(requests.post('https://getpocket.com/v3/get',\n                             data={'consumer_key': POCKET_CONSUMER_KEY,\n                                   'access_token': access_token,\n                                   'count': 30,\n                                   'state': 'unread',\n                                   }).text)['list']\nd = json.loads(pocket_api.text)['list']\nfor key in d:\n    print set(d[key].keys()).difference(set(e[key].keys()))\n\ne = [key]\n\n# print d\n\n# recursive_keys(pocket_instance.get()[0])\n'''\n", "prediction": "```python\nimport pocket\nimport json\nfrom django.shortcuts import render\nfrom django.http import HttpResponse"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the circumference of a circle when the radius of the circle is given.\n\n### Input:\n4\n\n", "label": "def calc_circle_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\ncircle_circumference = calc_circle_circumference(4)\nprint(circle_circumference)", "prediction": "### Output:\nCircumference of the circle is 25.12"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraper in Python to extract product details from an eCommerce website.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n \n# Target page\nurl = 'https://example.com/products.html'\n \n# Get page content\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n \n# Scrape product details\nitems = soup.find_all(class_='item')\n \nfor item in items:\n # Title\n title = item.find(class_='title').get_text()\n \n # Price\n price = item.find(class_='price').get_text()\n \n # Description\n description = item.find(class_='description').get_text()\n \n # Image URL\n image_url = item.find('img', src=True)['src']\n \n # Print details\n print(title)\n print(price)\n print(description)\n print(image_url)\n print('\\n')", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef get_product"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the harmonic mean of three numbers.\n\n### Input:\n\n\n", "label": "def harmonic_mean(x, y, z):\n return 3/((1/x + 1/y + 1/z))", "prediction": "def harmonic_mean(a, b, c):\n    return 3 / (1/a + 1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function that takes as input a string and returns the length of the longest word in the string.\n\n### Input:\n\"This is an example string.\"\n\n", "label": "def longest_word_length(input_string):\n    longest_word_length = 0\n    words = input_string.split()\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length", "prediction": "def longest_word(string):\n    words = string.split()\n    longest = 0\n    for word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples by increasing order of the second item of each tuple.\n\n### Input:\n\n\n", "label": "def sort_list(list_of_tuples): \n    list_of_tuples.sort(key = lambda x: x[1]) \n    return list_of_tuples", "prediction": "def sort_by_second_item(tuples):\n    return sorted(tuples, key=lambda x: x["}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the maximum of two numbers.\n\n### Input:\na = 15, b = 20\n\n", "label": "def get_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\na = 15\nb = 20\n\nmax_value = get_max(a, b)\nprint(\"The maximum value is:\", max_value)", "prediction": "def max(a, b):\n    if a > b:\n        return a\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to remove odd numbers from a list of numbers.\n\n### Input:\ndata = [10, 20, 30, 5, 6, 7]\n\n", "label": "def remove_odd_numbers(arr):\n    result = [i for i in arr if i % 2 == 0]\n    return result", "prediction": "def remove_odd_numbers(data):\n    new_data = []\n    for i in data:\n        if i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions, as well as the ability to add additional global variables. The environment can execute Python code and analyze it for variable usage and imports. The environment also includes a stdout object that can be used to capture and display output from executed code.\n\n### Input:\n\n\n", "label": "import os\nimport ast\nimport traceback\nimport time\nimport sys\nimport types\nimport builtins\nimport collections\nimport astor\nimport weakref\nfrom .jsonify import jsonify, jsonify_print, jsonify_print_expr\nfrom .datalayer import Analysis, Execution, FileEdit\nfrom .router import send\nfrom . import stdlib\n\ndef now():\n    return int(time.time() * 1000)\n\nclass Environment:\n\n    extra_globals = {}\n\n    active = weakref.WeakSet()\n\n    def __init__(self, path):\n        self.path = path\n        self.globals = {\n            \"print\": jsonify_print,\n            \"print_expr\": jsonify_print_expr,\n            \"jsonify\": jsonify,\n            \"jsonify_print\": jsonify_print,\n            \"listdir\": stdlib.listdir,\n            \"__builtins__\": __builtins__,\n            \"FILES\": stdlib.FilesDict(self.path),\n        }\n        for name in stdlib.builtin_names:\n            self.globals[name] = getattr(stdlib, name)\n        self._cached_analysis = {}\n        self.active.add(self)\n\n    predefined_names = set([\"parsed\"])\n\n    def init_commands(self):\n        \"\"\"Returns a list of commands that represent the existing state of the\n        filesystem\"\"\"\n        for path in os.listdir(self.path):\n            if path.endswith(\".json\"):\n                continue\n            if not os.path.isfile(os.path.join(self.path, path)):\n                continue\n            try:\n                with open(os.path.join(self.path, path), \"r\") as fp:\n                    content = fp.read()\n                yield FileEdit(filename=path, content=content, external_edit=True)\n            except UnicodeDecodeError:\n                pass\n\n    def fixup_globals(self):\n        for name, value in self.extra_globals.items():\n            self.globals.setdefault(name, value)\n\n    def execute(self, filename, content, subexpressions=False):\n        print(\"Executing\", filename, subexpressions)\n        self.fixup_globals()\n        stdout = Stdout()\n        compiled = None\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            RewriteExprToPrint(subexpressions).walk(parsed)\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n            print(\"varsed used:\", sorted(var_inspect.used), \"set:\", sorted(var_inspect.set), \"imported:\", var_inspect.imports)\n            compiled = compile(parsed, filename, 'exec')\n        except:\n            stdout.write(traceback.format_exc())\n\n        def displayhook(value):\n            stdout.write_repr(value)\n\n        orig_displayhook = sys.displayhook\n        sys.displayhook = displayhook\n        orig_stdout = sys.stdout\n        orig_stderr = sys.stderr\n        sys.stdout = stdout\n        sys.stderr = stdout\n        self.globals[\"parsed\"] = parsed\n        self.globals[\"ast\"] = ast\n        globals_before = self.globals.copy()\n        start = time.time()\n        try:\n            try:\n                if compiled:\n                    exec(compiled, self.globals)\n            except:\n                traceback.print_exc()\n        finally:\n            end = time.time()\n            sys.dipslayhook = orig_displayhook\n            sys.stdout = orig_stdout\n            sys.stderr = orig_stderr\n        local_scope = dict(\n            (name, value)\n            for name, value in self.globals.items()\n            if name not in globals_before or globals_before[name] is not value)\n        defines = dict(\n            (key, {\n                \"json\": jsonify(local_scope[key]),\n                \"type\": str(type(local_scope[key])),\n            })\n            for key in local_scope\n            if not isinstance(local_scope[key], types.ModuleType))\n        command = Execution(\n            filename=filename,\n            content=content,\n            emitted=stdout.emitted,\n            defines=defines,\n            start_time=int(start * 1000),\n            end_time=int(end * 1000),\n            exec_time=int((end - start) * 1000),\n            with_subexpressions=subexpressions,\n        )\n        send(command)\n\n    def analyze(self, filename, content):\n        print(\"Analyzing\", filename)\n        properties = {}\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n        except:\n            return\n            properties[\"parse_error\"] = jsonify(traceback.format_exc())\n        else:\n            properties = var_inspect.json\n        if properties != self._cached_analysis.get(filename):\n            self._cached_analysis[filename] = properties\n            send(Analysis(filename=filename, content=content, properties=properties))\n\n\nclass VariableInspector(astor.TreeWalk):\n\n    builtin_names = dir(builtins)\n\n    def init_variables(self):\n        self.used = set()\n        self.set = set()\n        self.imports = set()\n        self.in_target = False\n\n    @property\n    def json(self):\n        used = set(self.used)\n        for key in self.builtin_names:\n            used.discard(key)\n        for key in self.set:\n            used.discard(key)\n        for key in Environment.predefined_names:\n            used.discard(key)\n        return {\n            \"variables_used\": list(used),\n            \"variables_set\": list(self.set),\n            \"imports\": list(self.imports)\n        }\n\n    def pre_arg(self):\n        self.set.add(self.cur_node.arg)\n\n    def pre_Name(self):\n        if self.in_target:\n            # Actually this is a set\n            self.set.add(self.cur_node.id)\n        else:\n            self.used.add(self.cur_node.id)\n\n    def pre_For(self):\n        self.process_assignment(self.cur_node.target)\n\n    def pre_Assign(self):\n        self.process_assignment(self.cur_node.targets)\n\n    def pre_withitem(self):\n        self.process_assignment(self.cur_node.optional_vars)\n\n    def pre_ExceptHandler(self):\n        if self.cur_node.name:\n            self.set.add(self.cur_node.name)\n\n    def pre_alias(self):\n        # Used in imports\n        name = self.cur_node.asname or self.cur_node.name\n        name = name.split(\".\")[0]\n        self.set.add(name)\n        self.imports.add(name)\n\n    def pre_FunctionDef(self):\n        self.set.add(self.cur_node.name)\n\n    def pre_ListComp(self):\n        self.process_assignment(self.cur_node.elt)\n\n    def process_assignment(self, item):\n        if isinstance(item, list):\n            for x in item:\n                self.process_assignment(x)\n            return\n        old_in_target = self.in_target\n        self.in_target = True\n        try:\n            self.walk(item)\n        finally:\n            self.in_target = old_in_target\n\nclass RewriteExprToPrint(astor.TreeWalk):\n\n    expr_node_types = \"\"\"\n    UnaryOp\n    BinOp\n    BoolOp\n    Compare\n    Call\n    IfExp\n    Attribute\n    Subscript\n    ListComp SetComp GeneratorExp DictComp\n    \"\"\".split()\n    # Skipped:\n    #  UAdd USub Not Invert\n    #  Add Sub Mult Div FloorDiv Mod Pow LShift RShift BitOr BitXor BitAnd MatMult\n    #  And Or\n    #  Eq NotEq Lt Gt GtE Is IsNot In NotIn\n    #  Index Slice ExtSlice\n\n    def __init__(self, subexpressions=False):\n        self.subexpressions = subexpressions\n        self.id_counter = 0\n        astor.TreeWalk.__init__(self)\n        if self.subexpressions:\n            for method in self.expr_node_types:\n                self.pre_handlers[method] = self.save_node_name\n                self.post_handlers[method] = self.fixup_subexpressions\n            del self.post_handlers['Module']\n\n    def post_Name(self):\n        if not self.subexpressions:\n            return\n        if isinstance(self.cur_node.ctx, ast.Load):\n            self.replace(self.rewrite_expr(self.cur_node))\n\n    def post_Module(self):\n        node = self.cur_node\n        node.body = [\n            self.rewrite_expr(n) if isinstance(n, ast.Expr) else n\n            for n in node.body]\n\n    def save_node_name(self):\n        self.cur_node.astor_repr = astor.to_source(self.cur_node)\n\n    def fixup_subexpressions(self):\n        new_node = self.rewrite_expr(self.cur_node, self.cur_node.astor_repr)\n        self.replace(new_node)\n\n    def rewrite_expr(self, node, expr_string=None):\n        if expr_string is None:\n            expr_string = astor.to_source(node)\n        node_string = ast.Str(s=expr_string)\n        self.id_counter += 1\n        if isinstance(node, ast.Expr):\n            new_node = ast.Expr(\n                ast.Call(\n                    func=ast.Name(id='print_expr', ctx=ast.Load()),\n                    args=[node_string, node.value, ast.Num(n=self.id_counter)],\n                    keywords=[],\n                    starargs=None,\n                )\n            )\n            new_node.is_print_expr = True\n        else:\n            new_node = ast.Call(\n                func=ast.Name(id='print_expr', ctx=ast.Load()),\n                args=[node_string, node, ast.Num(n=self.id_counter)],\n                keywords=[],\n                starargs=None,\n            )\n            new_node.is_print_expr = True\n        ast.fix_missing_locations(new_node)\n        return new_node\n\n\nclass Stdout:\n\n    total_exprs_limit = 100\n    expr_limit = 10\n\n    def __init__(self):\n        self.emitted = []\n        self.total_exprs_printed = 0\n        self.exprs_printed = collections.Counter()\n\n    def write(self, content):\n        self.emitted.append({\n            \"type\": \"print\",\n            \"time\": now(),\n            \"parts\": [{\"type\": \"str\", \"str\": content}],\n        })\n\n    def writejson(self, json):\n        assert json.get(\"type\"), \"JSON objects must have a type\"\n        json.setdefault(\"time\", now())\n        self.emitted.append(json)\n\n    def write_repr(self, o):\n        self.emitted.append(jsonify(o))\n\n    def flush(self):\n        pass\n\ndef add_global(name, value):\n    Environment.extra_globals[name] = value\n    Environment.predefined_names.add(name)\n    for env in Environment.active:\n        env.globals.setdefault(name, value)\n", "prediction": "def create_environment():\n    env = {}\n    env['global_vars'] = {}\n    env['functions"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a string as input and counts the number of occurrences of each character in that string.\n\n### Input:\nString: 'python'\n\n", "label": "def count_characters(string):\n    counts = {}\n    for s in string:\n        counts[s] = counts.get(s, 0) + 1\n    return counts\n\nresult = count_characters('python')\nprint(result)", "prediction": "def count_characters(string):\n    char_count = {}\n    for char in string:\n        if char in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python to collect data from an e-commerce website.\n\n### Input:\nwww.example.com\n\n", "label": "import requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com')", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python that downloads all article headlines from BBC's business news section.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL you want to webscrape from\nurl = 'https://www.bbc.co.uk/news/business/'\n\n# Connect to the URL\nresponse = requests.get(url)\n\n# Parse HTML and save to BeautifulSoup object\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# To download the whole data set, let's do a for loop through all a tags\nfor link in soup.find_all('a'):\n    # Get the text of the link\n    headline = link.get('title')\n    if headline is not None and headline != \"\":\n        print(headline)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_article_headlines"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that encrypts a given string using 'Caeser Cipher'\n\n### Input:\nstring = 'Hello World'\n\n", "label": "def caesarCipherEncryptor(string, key):\n  newLetters = []\n  newKey = key % 26\n  for letter in string:\n   newLetters.append(getNewLetter(letter, newKey))\n  return ''.join(newLetters)\n \ndef getNewLetter(letter, key):\n   newLetterCode = ord(letter) + key\n   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)", "prediction": "def caesar_cipher(string, shift):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class which represents a bank account. This class should contain attributes and methods to create an account, to deposit money, to withdraw money, to check the balance and to transfer money to another account.\n\n### Input:\nNot applicable\n\n", "label": "class BankAccount:\n    def __init__(self,name,balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance\n  \n    def checkBalance(self):\n        return self.balance\n\n    def transfer(self, target, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            target.balance += amount\n        else:\n            print(\"Insufficient funds\")\n        return self.balance", "prediction": "### Output:\nclass BankAccount:\n    def __init__(self, name, balance):\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python and write a function to reverse an array.\n\n### Input:\n[1,2,3,4]\n\n", "label": "def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while(start < end):\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr", "prediction": "def reverseArray(arr):\n    return arr[::-1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that reads in a 2D list of size NxM and returns a list of list of size MxN.\n\n### Input:\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]\n\n", "label": "def transposeMatrix(list2D):\n return list(map(list, zip(*list2D)))", "prediction": "### Output:\n[[1, 2, 3],\n [4, 5, 6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python library to find sequences of similar strings in a given text.\n\n### Input:\nNot applicable\n\n", "label": "import difflib\n\n# Define input text\ntext = \"this is a string with a few similar words\"\n\n# Find sequences of similar strings\nmatcher = difflib.SequenceMatcher(None, a=text.split(), b=text.split())\nfor tag, i1, i2, j1, j2 in matcher.get_opcodes():\n if tag == 'equal':\n    print(text[i1:i2])", "prediction": "### Output:\nimport difflib\ndef find_similar_sequences(text):\n    sequences = diffl"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a 10 digit random phone number using Python.\n\n### Input:\n\n\n", "label": "import random\n\ndef get_random_phone_number():\n    \"\"\"Generates a 10 digit random phone number\"\"\"\n    phone_number = ''\n    for i in range(10):\n        phone_number += str(random.randint(0, 9))\n    return phone_number\n\nprint(get_random_phone_number())", "prediction": "import random\nprint(\"Your phone number is: \", random.randint(1000000000, "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to access a REST API.\n\n### Input:\n`https://example.com/api/v1/data`\n\n", "label": "import requests\n\nurl = 'https://example.com/api/v1/data'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# process the data here\n# ...", "prediction": "### Output:\n```python\nimport requests\n\nurl = \"https://example.com/api/v1/data"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to remove duplicate characters from a string.\n\n### Input:\nInputString=\"tree traversal\"\n\n", "label": "def remove_duplicate_characters(string): \n result = \"\" \n  \n for i in range(len(string)): \n  if string[i] not in result: \n   result += string[i] \n  \n return result \n  \nprint(remove_duplicate_characters(\"tree traversal\"))", "prediction": "def removeDuplicateChars(InputString):\n    return ''.join(sorted(set(InputString)))\n\nprint(removeDuplicateChars"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to solve the below dynamic programming problem: Given a set of integers and a target sum, find a subset whose sum is equal to this target sum.\n\n### Input:\n\n\n", "label": "def subset_sum(nums, s):\n n = len(nums)\n dp_table = [ [False] * (s + 1) for _ in range(n + 1)]\n \n # initialize top row as true\n for i in range(s+1):\n dp_table[0][i] = True\n \n # fill up the dp_table using bottom-up approach\n for i in range(1, n+1):\n for j in range(1, s+1):\n # if current element is greater than sum s\n if nums[i-1] > j:\n dp_table[i][j] = dp_table[i-1][j]\n # else, we can include the element or not include the element\n else:\n dp_table[i][j] = dp_table[i-1][j] or dp_table[i-1][j-nums[i-1]]\n \n # return true is sum s is reachable\n return dp_table[n][s]", "prediction": "def find_subset_sum(numbers, target_sum):\n    # Initialize a dictionary to store the results of sub"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you implement a k-nearest neighbor model using Python?\n\n### Input:\n\n\n", "label": "Yes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python.", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a for loop to print out all numbers between 1 and 10 in Python.\n\n### Input:\n\n\n", "label": "for i in range(1, 11):\n    print(i)", "prediction": "for i in range(1, 11):\n    print(i)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to round the number up to the nearest integer\n\n### Input:\nnum = 5.6\n\n", "label": "def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))", "prediction": "def round_up(num):\n    return int(num + 0.5)\n\nprint(round_up(num))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the average of all the numbers in a list.\n\n### Input:\n[1, 5, 9.7, 8, 5.6]\n\n", "label": "def avg(list):\n    if len(list) == 0:\n        return 0\n    else:\n        sum = 0\n        for num in list:\n            sum += num\n        return sum / len(list)", "prediction": "def average(numbers):\n    total = 0\n    for number in numbers:\n        total += number"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers\n\n### Input:\n\n\n", "label": "def remove_negatives(list):\n    filtered_list = list(filter(lambda x: x>=0,list))\n    return filtered_list", "prediction": "def remove_negative_numbers(numbers):\n    return [number for number in numbers if number >= 0]\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AWS Lambda function in Python that handles GET requests to the URL /hello and responds with a welcome message.\n\n### Input:\nNot applicable\n\n", "label": "import json\n\ndef lambda_handler(event, context):\n    if event['httpMethod'] == 'GET':\n        response =  {\n            'statusCode': 200,\n            'headers': {'Content-Type': 'application/json'},\n            'body': json.dumps({'message': 'Welcome!'})\n        }\n        return response", "prediction": "### Output:\n```python\nimport json\nimport boto3\n\ndef lambda_handler(event, context):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet in Python to tokenize a given string.\n\n### Input:\n\n\n", "label": "def tokenize(s):\n  tokens = []\n  current_token = \"\"\n  for c in s:\n    if c.isspace():\n      tokens.append(current_token)\n      current_token = \"\"\n    else:\n      current_token += c\n  if current_token:\n    tokens.append(current_token)\n  return tokens", "prediction": "def tokenize(string):\n    return string.split()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to print the smallest number in a given list of numbers.\n\n### Input:\n[24, 14, 67, 89, 34, 52]\n\n", "label": "list_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))", "prediction": "def smallest_number(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the area of a triangle when three sides are given.\n\n### Input:\na = 3\nb = 4\nc = 5\n\n", "label": "# calculate the semi-perimeter\ns = ( a + b + c ) / 2\n  \n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n  \nprint('The area of the triangle is %0.2f' %area)\n// Output: The area of the triangle is 6.00", "prediction": "def area_of_triangle(a, b, c):\n    s = (a + b + c)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to identify the position and type of all the symbols in a given expression.\n\n### Input:\nexpression = \"2 + 3 * (4 - 5)\"\n\n", "label": "def process_expression(exp):\n    symbols = []\n    pos = 0\n\n    # process the expression in order\n    for c in exp:\n        if c in \"+-/*()\":\n            # identify and store the symbol\n            symbol = {\n                \"type\": c,\n                \"pos\": pos\n            }\n            symbols.append(symbol)\n        pos += 1\n    return symbols", "prediction": "def find_symbols(expression):\n    symbols = []\n    for char in expression:\n        if char in \"+"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to extract all the values for a given key from a dictionary.\n\n### Input:\ndictionary = {\n    'key1': 'val1',\n    'key2': 'val2',\n    'key3': 'val3',\n    'key4': 'val4',\n}\n\n", "label": "def get_key_values(dictionary, key):\n    return [value for key, value in dictionary.items() if key == key]", "prediction": "key = 'key2'\n\nfor k, v in dictionary.items():\n    if k == key:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a URL, write a Python script to fetch and decode the HTML web page using the `requests` library.\n\n### Input:\n\"https://example.org/\"\n\n", "label": "import requests\n\nurl = \"https://example.org/\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n  html_page = response.content.decode('utf-8')", "prediction": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.org/\"\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.\n\n### Input:\nArray: [5, 3, 7, 2]\nSearch value: 7\n\n", "label": "def linearSearch(arr, value):\n  for i in range(len(arr)):\n    if arr[i] == value:\n      return i  # value found, return index\n  return -1  # value not found\n\narr = [5, 3, 7, 2]\nsearchValue = 7\n\nresult = linearSearch(arr, searchValue)\n\nif result == -1:\n  print(\"Element not found\")\nelse:\n  print(\"Element present at index\", result)", "prediction": "### Output:\nThe index of the value is 2."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code to find out the maximum occurring character in a given String.\n\n### Input:\nmy_string = \"Python is an interesting language\"\n\n", "label": "my_string = \"Python is an interesting language\"\n\n# create an empty dictionary\ndi = {}\n\n# iterate through each character\nfor char in my_string:\n    # check if the character is already present in the dict\n    if char in di.keys():\n        # if present, increment the value of the character\n        di[char] += 1\n    else:\n        # if not present, set the value to 1\n        di[char] = 1\n\n# find the character with the maximum count\nmax_char = max(di, key=di.get)\n\n# display the maximum occurring character\nprint(f\"Maximum occurring character is: {max_char}\")", "prediction": "def max_occur(my_string):\n    my_string = my_string.lower()\n    my_string = my"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to predict the class labels of a given set of data.\n\n### Input:\nThe dataset contains 4 features: Length, Width, Height and Weight.\n\n", "label": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label", "prediction": "def predict_class(data):\n    # Import the necessary libraries\n    import pandas as pd\n    from"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a Python program to check if two strings are a palindrome.\n\n### Input:\n\n\n", "label": "def palindrome_checker(string1, string2): \n    m = len(string1) \n    n = len(string2) \n  \n    if m != n: \n        return False    \n  \n    string1 = string1.lower() \n    string2 = string2.lower() \n      \n    # create empty 2-D matrix \n    C = [[0] * (n + 1) for i in range(m + 1)] \n  \n    # palindromic substring of length 0 \n    for i in range(m + 1): \n        C[i][0] = 0\n  \n    # palindromic substring of length 1 \n    for j in range(n + 1): \n        C[0][j] = 0\n  \n    # fill the matrix in bottom-up manner \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if string1[i - 1] == string2[j - 1]: \n                C[i][j] = C[i - 1][j - 1] + 1\n    return m == n == C[m][n]", "prediction": "def is_palindrome(s):\n    return s == s[::-1]\n\ns = input(\"Enter a"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to store a list of student names and their ages.\n\n### Input:\n\n\n", "label": "student_data = {\n \"student1\" : {\"name\": \"John\", \"age\": 20},\n \"student2\" : {\"name\": \"Sam\", \"age\": 22},\n \"student3 : {\"name\": \"Alice\", \"age\": 19}\n}", "prediction": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic Python program to simulate a game of Rock, Paper, Scissors. The program should randomly generate one of the choices for both players.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\npieces = ['rock','paper','scissors']\n\nplayer1 = random.choice(pieces)\nplayer2 = random.choice(pieces)\n\nprint(\"Player 1 chose\", player1)\nprint(\"Player 2 chose\", player2)\n\nif player1 == player2:\n  print('Draw!')\nelif player1 == 'rock':\n  if player2 == 'scissors':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!')\nelif player1 == 'scissors':\n  if player2 == 'paper':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!')\nelse:\n  if player2 == 'rock':\n    print('Player 1 won!')\n  else:\n    print('Player 2 won!')", "prediction": "### Output:\nimport random\ndef rock_paper_scissors():\n    player1 = input(\"Player "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to multiply two given numbers and print their product\n\n### Input:\nnum1 = 10\nnum2 = 8\n\n", "label": "product = num1 * num2\nprint(product)", "prediction": "def multiply(num1, num2):\n    return num1 * num2\n\nprint(multiply(num"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that takes two arrays of equal size as input and returns the sum of the two arrays.\n\n### Input:\n[1,2,3], [4,5,6]\n\n", "label": "def sum_arrays(arr1, arr2):\n    result = []\n    for i in range(len(arr1)):\n        result.append(arr1[i] + arr2[i])\n    return result\n\nsummed = sum_arrays([1,2,3], [4,5,6])\nprint(summed)", "prediction": "### Output:\n[5,7,9]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game AI in Python that plays Tic-Tac-Toe.\n\n### Input:\nNot applicable\n\n", "label": "#import necessary libraries\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\n# define the board\nboard=np.zeros([3,3], dtype=int)\n\n# define the winning combos\nwin_combos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n]\n\n# define the game AI\ndef game_ai(board:np.ndarray) -> Optional[Tuple[int, int]]:\n  # analyze the board\n  diags=[]\n  diags.append(board.trace())\n  diags.append(np.fliplr(board).trace()) \n\n  # generate all possible moves\n  moves = [i for i, x in enumerate(board.reshape(-1)) if x == 0] \n  \n  # get winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 1  \n      if any(all(val==1 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n  \n  # block opponent's winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 2  \n      if any(all(val==2 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n\n  # do random move        \n  return moves[np.random.choice(len(moves))] // 3, moves[np.random.choice(len(moves))] % 3\n\n#sample call\nrow, col = game_ai(board)\nprint(row, col)\n# Output: 0 1", "prediction": "### Output:\nimport random\ndef play_tic_tac_toe():\n    board = [\n        [\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to get the GCD (Greatest Common Divisor) of two positive integers.\n\n### Input:\n46, 24\n\n", "label": "def gcd(a,b): \n      \n    if b == 0: \n        \n        return a \n      \n    return gcd(b, a % b)", "prediction": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms.\n\n### Input:\n\n\n", "label": "# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))", "prediction": "def product(a, b):\n    if b == 0:\n        return 0\n    else"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the performance of the following Python code.\n\n### Input:\ndef find_max(a, b):\n max_val = a\n if b > a:\n max_val = b\n return max_val\n\n", "label": "def find_max(a, b):\n return max(a, b)", "prediction": "def find_max(a, b):\n return a if a > b else b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a circle having radius, color and area as its data members.\n\n### Input:\n\n\n", "label": "class Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n        self.area = 3.14 * (radius**2)\n\n    def get_radius(self):\n        return self.radius\n    \n    def get_color(self):\n        return self.color\n    \n    def get_area(self):\n        return self.area\n\nif __name__ == '__main__':\n    c = Circle(4, 'blue')\n    print(\"Radius of circle:\", c.get_radius())\n    print(\"Color of circle:\", c.get_color())\n    print(\"Area of circle:\", c.get_area())", "prediction": "class Circle:\n    def __init__(self, radius, color):\n        self.radius = radius\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random matrix of size mXn where all numbers are greater than k.\n\n### Input:\n\n\n", "label": "import numpy as np\n\ndef generate_matrix(m, n, k):\n    matrix = np.random.randint(k + 1, high=9, size=(m, n))\n    return matrix\n\nm = 5\nn = 5\nk = 6\nmatrix = generate_matrix(m, n, k)\nprint(matrix)", "prediction": "import numpy as np\nm = 3\nn = 4\nk = 5\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that takes an array of numbers and returns an array of the squares of the numbers.\n\n### Input:\n[1,2,3]\n\n", "label": "\"\"\"\nA function to return the squares of an array in Python \n\"\"\"\n\ndef square_array(input_array): \n  squared_array = []\n  for i in input_array: \n    squared_array.append(i*i)\n  return squared_array", "prediction": "def square_array(array):\n    return [x**2 for x in array]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integer values, write a Python program to find the number of consecutive values that are increasing.\n\n### Input:\nnumbers = [1, 2, 3, 4, 9, 8, 7, 6]\n\n", "label": "count = 0\n\nfor i in range(len(numbers) - 1):\n    if numbers[i] < numbers[i + 1]:\n        count += 1\n\nprint(count)", "prediction": "### Output:\nThe number of consecutive values that are increasing is 4."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to find the two longest consecutive common substrings in two strings.\n\n### Input:\nString 1: Hawaii\nString 2: Alaska\n\n", "label": "def longest_common_substring(string1, string2):\n # Create a 2D array to save all substrings\n substring_length = [[0 for _ in range(len(string1)+1)] for _ in range(len(string2)+1)]\n \n # Save the length of longest substring\n longest_length = 0\n \n # Iterate over the string and save the length of common substrings\n for row in range(1, len(string2)+1):\n  for col in range(1, len(string1)+1):\n   if string2[row-1] == string1[col-1]:\n    substring_length[row][col] = substring_length[row-1][col-1] + 1\n    if substring_length[row][col] > longest_length:\n     longest_length = substring_length[row][col]\n \n return longest_length\n\nstring1 = 'Hawaii'\nstring2 = 'Alaska'\n\nlongest_length = longest_common_substring(string1, string2)\n\nprint('The longest consecutive common substring has length %d.' % (longest_length))", "prediction": "### Output:\nThe longest consecutive common substring is \"a\" and the second longest consecutive common substring is"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing input string, write a Python program to sort the string in ascending order.\n\n### Input:\nhello\n\n", "label": "def sort_string(string):\n    lst = list(string)\n    lst.sort()\n    return ''.join(lst)\n\nsorted_str = sort_string('hello')\nprint(sorted_str) # expected output: ehllo", "prediction": "### Output:\nehllo"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.\n\n### Input:\ndict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6}\n\n", "label": "def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict", "prediction": "### Output:\n{'a':1, 'b':2, 'c':3, 'd"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a linked list of numbers from 0 to n.\n\n### Input:\n\n\n", "label": "def generateLinkedList(n): \n\thead = Node(0) \n\tprev = head \n\tfor i in range(1, n + 1): \n\t\tnode = Node(i) \n\t\tprev.next = node \n\t\tprev = node \n\treturn head", "prediction": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove an item from a list whose index is specified.\n\n### Input:\nlist = ['Apple', 'Orange', 'Banana', 'Mango']\n\n", "label": "def removeSpecifiedIndex(list, index): \n  # using list comprehension \n  new_list = [list[i] for i in range(len(list)) if i != index]  \n\n  return new_list \n\nlist = ['Apple', 'Orange', 'Banana', 'Mango']  \nindex = 2\n\nprint(removeSpecifiedIndex(list, index))", "prediction": "def remove_item(list, index):\n    del list[index]\n    return list\n\nprint(remove_item(list"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYour client has asked you to convert an existing Java program into a Python program. The Java program takes a list of integers and returns the maximum value.\n\n### Input:\nlistOfIntegers = [1, 3, 8, 2, 9]\n\n", "label": "def get_max_value(listOfIntegers):\n maxValue = listOfIntegers[0]\n for num in listOfIntegers:\n if num > maxValue:\n maxValue = num\n return maxValue\n\nprint(get_max_value(listOfIntegers))", "prediction": "def findMax(listOfIntegers):\n    max = listOfIntegers[0]\n    for i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web service (REST API) in Python to get the student information from the database.\n\n### Input:\n\n\n", "label": "import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n@app.route('/students', methods=['GET'])\ndef get_students():\n    # get the information from the database\n    data = [{'id':1, 'name':'John Doe'}, {'id':2, 'name':'Jane Doe'}]\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run(debug=True)", "prediction": "import requests\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that takes in two lists and compares their elements\n\n### Input:\nList1 = [1, 5, 6, 4]\nList2 = [3, 7, 4, 2]\n\n", "label": "def compare_lists(list1, list2):\n    \n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n\n    return True", "prediction": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python function to find the largest consecutive sum of elements in the list.\n\n### Input:\nnums = [1, 2, -5, 9, 0, 10]\n\n", "label": "def largest_consecutive_sum(nums):\n    max_sum = 0\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        if total_sum > max_sum:\n            max_sum = total_sum\n    return max_sum", "prediction": "### Output:\nThe largest consecutive sum of elements in the list is 21."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python function for computing Fibonacci numbers.\n\n### Input:\ndef fib(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n", "label": "def fibonacci(n): \n    if n <= 1: \n        return n \n    else:\n        fibonacci_num=[0,1] #creating a fibonacci list\n        i=2\n        while i<=n:\n            fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2])\n            i+=1\n        return fibonacci_num[n]", "prediction": "def fib_optimized(n):\n    if n == 0 or n == 1:\n        return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to search for a particular string in a given text.\n\n### Input:\n\n\n", "label": "def search(query, text):\n  n = len(query)\n  result = []\n  # Loop through the text\n  for i in range(len(text)): \n    # Compare the current n characters of the text \n    # with the query string\n    if text[i: i + n] == query: \n      # If matches, append the current index of text to \n      # the result \n      result.append(i) \n  # Return the list of indices  \n  return result", "prediction": "def search_string(text, string):\n    \"\"\"Search for a string in a text.\"\"\"\n    # Initialize"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstablish an automated machine learning workflow in Python.\n\n### Input:\nNo input\n\n", "label": "# Import Libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\n# Load data\nX_train, X_test, y_train, y_test = load_data()\n\n# Create a Machine Learning Pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', LogisticRegression(solver='lbfgs', random_state=42))\n])\n\n# Fit the pipeline to the training data\npipeline.fit(X_train, y_train)\n\n# Evaluate the pipeline on the test data\npredicted = pipeline.predict(X_test)\nprint('Test Accuracy:', accuracy_score(predicted, y_test))", "prediction": "### Output:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to access a database and query a table.\n\n### Input:\nNot applicable\n\n", "label": "import sqlite3\n\n# Create or open a database\nconn = sqlite3.connect('database.db')\n\n# Create a cursor\nc = conn.cursor()\n\n# Execute a query\nc.execute(\"SELECT * FROM `table_name`;\")\n\n# Get the result\nrows = c.fetchall()\n\n# Iterate over the result\nfor row in rows:\n print(row)\n\n# Close the connection\nc.close()\nconn.close()", "prediction": "### Output:\nimport sqlite3\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of numbers andarranges them in ascending order.\n\n### Input:\nnums = [4, 5, 2, 1, 6, 5]\n\n", "label": "def sort_ascending(nums):\n    sorted_list = sorted(nums) \n  \n    return sorted_list\n\nprint(sort_ascending(nums)) # [1, 2, 4, 5, 5, 6]", "prediction": "def sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line Python script to generate random numbers within a given range.\n\n### Input:\nMinimum Number: 10 and Maximum Number: 25\n\n", "label": "import random\n\nmin_num = 10\nmax_num = 25\n \n# Generate a random number\nrand_num = random.randint(min_num, max_num)\n \n# Print the random number\nprint(rand_num)", "prediction": "import random\ndef random_number(min, max):\n    return random.randint(min, max)\n\nprint(random"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a python program so that it can sort the list of numbers in ascending order.\n\n### Input:\nnumbers = [3, 5, 9, 1, 2]\n\n", "label": "numbers = [3, 5, 9, 1, 2] \n\nnumbers.sort() \n\nprint(numbers)", "prediction": "def sort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to compute the average value in an array.\n\n### Input:\nvalues = [2,4,6,8,10]\n\n", "label": "# Funciton to compute the average value in an array\ndef computeAverage(values):\n # Initialize sum\n sum = 0\n \n # Iterate through values\n for value in values:\n sum+=value\n \n # Compute average\n average = sum / len(values)\n \n # Return average\n return average\n \n# Call function\ncomputeAverage(values); // Returns 6.0", "prediction": "def average(values):\n    return sum(values)/len(values)\n\nprint(average(values))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function which, when given a string of text and a n number, returns a list of all n-grams within that string.\n\n### Input:\nstring = 'this is a simple string'\nn = 3\n\n", "label": "def n_grams(string, n):\n  tokens = string.split()\n  n_grams = []\n  for i in range(len(tokens)-n+1):\n    n_grams.append(tokens[i:i+n])\n  return n_grams", "prediction": "### Output:\n['this', 'his', 'is', 'si', 'is', 'sim"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.\n\n### Input:\nsequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\n", "label": "sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)", "prediction": "sorted_sequence = sorted(sequence)\n\nfor item in sorted_sequence:\n    print(item)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print all combinations of three numbers from the given list.\n\n### Input:\nnum_list = [1, 2, 3, 4]\n\n", "label": "import itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item)", "prediction": "def combinations(num_list):\n    for i in range(len(num_list)):\n        for j in range(i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to output the maximum number from a set of user-inputted numbers.\n\n### Input:\n\n\n", "label": "def find_max_number(numbers):\n    maximum = numbers[0]\n    for i in numbers:\n        if i > maximum:\n            maximum = i\n    return maximum", "prediction": "def max_num():\n    numbers = []\n    while True:\n        num = input(\"Enter a number"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Black scholes pricing model using Python classes\n\n### Input:\nNot applicable\n\n", "label": "import math\n\n\nclass BlackScholes():\n def __init__(self, S, K, T, r, sigma):\n self.S = S\n self.K = K\n self.T = T\n self.r = r\n self.sigma = sigma\n \n def d1(self):\n return (math.log(self.S/self.K) + (self.r + 0.5 * self.sigma ** 2)*self.T)/(self.sigma * math.sqrt(self.T))\n \n def d2(self):\n return self.d1() - self.sigma * math.sqrt(self.T)\n \n def call_price(self):\n return self.S * stats.norm.cdf(self.d1()) - self.K * math.exp(-self.r * self.T) * stats.norm.cdf(self.d2())\n \n def put_price(self):\n return -self.S * stats.norm.cdf(-self.d1()) + self.K * math.exp(-self.r * self.T) * stats.norm.cdf(-self.d2())", "prediction": "### Output:\nclass BlackScholes:\n    def __init__(self, S0, K"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Class that retrieves and displays web page content.\n\n### Input:\n\n\n", "label": "import requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content()", "prediction": "class WebPage:\n    def __init__(self, url):\n        self.url = url\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to print a multiplication table for all the numbers from 1 to 10.\n\n### Input:\n\n\n", "label": "for i in range(1, 11):\n  for j in range(1, 11):\n    print(i*j, end=\"\\t\")\n  print()", "prediction": "for i in range(1, 11):\n    for j in range(1, 11"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program for the following task\n\n### Input:\nWrite a function to calculate the sum of the first n natural numbers.\n\n", "label": "def sum_n(n):\n    result = (n * (n+1)) / 2\n    return result\n\nn = 10\n\nsum = sum_n(n)\nprint(sum)", "prediction": "def sum_of_natural_numbers(n):\n    sum = 0\n    for i in range("}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a JSON string and convert it into a dictionary.\n\n### Input:\n'{\"name\": \"GPT\", \"type\": \"AI\"}'\n\n", "label": "import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)", "prediction": "### Output:\n{'name': 'GPT', 'type': 'AI'}"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\n\n### Input:\nNot applicable\n\n", "label": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\nprint(\"Accuracy:\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))", "prediction": "### Output:\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\nmn"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST API in Python that allows users to get and post data on a table.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask\nfrom flask_restful import Resource, Api\n \napp = Flask(__name__)\napi = Api(app)\n \nclass TableData(Resource):\n def get(self):\n  # Get data from table\n  return {'data': 'formatted data'}\n  \n def post(self):\n # Post data to table\n return {'message': 'Data posted successfully'}\n \napi.add_resource(TableData, '/table')\n\nif __name__ == '__main__':\n app.run(debug=True)", "prediction": "### Output:\nimport requests\nfrom flask import Flask, jsonify, request\napp = Flask(__name"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a generic sorting algorithm in Python.\n\n### Input:\n\n\n", "label": "def sort(data):\n    \"\"\"Generic sorting algorithm.\"\"\"\n    if len(data) == 0:\n        return []\n    else:\n        pivot = data[0]\n        less = [i for i in data[1:] if i <= pivot]\n        greater = [i for i in data[1:] if i > pivot]\n        return sort(less) + [pivot] + sort(greater)", "prediction": "def sort_list(lst):\n    for i in range(len(lst) - 1):\n        for j"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the iris dataset. The program should have an input field for the train and test data and output a confusion matrix.\n\n### Input:\nTrain data: \n\nSepalLengthCm\tSepalWidthCm\tPetalLengthCm\tPetalWidthCm\tSpecies\n6.0\t\t\t\t\t3.2\t\t\t\t\t4.7\t\t\t\t\t1.4\t\t\t\t\tIris-versicolor\n5.4\t\t\t\t\t3.7\t\t\t\t\t1.5\t\t\t\t\t0.2\t\t\t\t\tIris-setosa\nTest data: \n\nSepalLengthCm\tSepalWidthCm\tPetalLengthCm\tPetalWidthCm\tSpecies\n5.7\t\t\t\t\t2.8\t\t\t\t\t4.5\t\t\t\t\t1.3\t\t\t\t\t\n6.1\t\t\t\t\t2.9\t\t\t\t\t4.7\t\t\t\t\t1.4\n\n", "label": "from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load and split the dataset\niris_data = load_iris()\nx_train, x_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size=0.2)\n\n# Train the classifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(x_train, y_train)\n\n# Make predictions\npreds = clf.predict(x_test)\n\nfrom sklearn.metrics import confusion_matrix\n\n# Output confusion matrix\nconfusion_matrix(y_test, preds)", "prediction": "### Output:\nConfusion matrix: \n\nIris-setosa\tIris-versicolor\tIris-vir"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of lists of integers by the first element of the sublists. The list should be sorted in ascending order.\n\n### Input:\n[[2, 4, 6], [1, 9, 8], [3, 7, 5]]\n\n", "label": "def sortList(lst): \n    lst.sort(key = lambda x: x[0]) \n    return lst \n  \nresult = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) \nprint(result)", "prediction": "### Output:\n[[1, 9, 8], [2, 4, 6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the following JSON string into a Python dictionary.\n\n### Input:\n{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}\n\n", "label": "import json\n\ndata = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'\n\nparsed_data = json.loads(data)\nprint(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}", "prediction": "### Output:\n{'name': 'John', 'age': 30, 'city': 'New"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to compute the Fibonacci sequence.\n\n### Input:\nNot applicable\n\n", "label": "def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n - 1) + fibonacci(n - 2)", "prediction": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n =="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python to represent a rectangle as an object.\n\n### Input:\n\n\n", "label": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def get_area(self):\n        return self.width * self.height\n\n    def get_perimeter(self):\n        return 2 * (self.width + self.height)", "prediction": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you build a function in Python that accepts two strings and returns true or false depending on whether the strings are an anagram?\n\n### Input:\n\"silent\", \"listen\"\n\n", "label": "def isAnagram(str1, str2):\n    # Count the number of character occurrences in both strings\n    str1_dict = {}\n    str2_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in str1_dict:\n            str1_dict[str1[i]] += 1\n        else:\n            str1_dict[str1[i]] = 1\n    for j in range(len(str2)):\n        if str2[j] in str2_dict:\n            str2_dict[str2[j]] += 1\n        else:\n            str2_dict[str2[j]] = 1\n  \n    # Compare both dictionaries\n    for char in str1_dict:\n        if char in str2_dict and str1_dict[char] == str2_dict[char]:\n            return True\n        else:\n            return False\n\nstr1 = \"silent\"\nstr2 = \"listen\"\nif isAnagram(str1, str2):\n    print(\"true\")\nelse:\n    print(\"false\") # output: true", "prediction": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following Java code to Python\n\n### Input:\nfor (int i = 0; i < n; i++)\n System.out.println(\"Hello World\");\n\n", "label": "for i in range(n):\n print(\"Hello World\")", "prediction": "### Output:\nfor i in range(n):\n print(\"Hello World\")"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which prints out all prime numbers between 1 and 100.\n\n### Input:\n\n\n", "label": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nfor n in range(1, 101):\n    if is_prime(n):\n        print(n)", "prediction": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to parse an XML document.\n\n### Input:\n\n\n", "label": "import xml.etree.ElementTree as ET \n\ntree = ET.parse('data.xml') \nroot = tree.getroot() \n\n# print all items\nfor item in root.findall('.//item'):\n    print(item.attrib)", "prediction": "import xml.etree.ElementTree as ET\ntree = ET.parse('example.xml')\nroot = tree"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python which reverses each word of a given sentence.\n\n### Input:\n\n\n", "label": "# Function to reverse each word\ndef word_reverse(s) : \n    # Splitting each word\n    words = s.split() \n    rev_str = \"\" \n    for word in words: \n        # Reversing each word\n        rev_str += word[::-1] + \" \"\n    return rev_str", "prediction": "def reverse_words(sentence):\n    return ' '.join([word[::-1] for word in sentence.split"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that can generate a frequency table for a given string.\n\n### Input:\nsample_string = \"This is a sample string\"\n\n", "label": "sample_string = \"This is a sample string\"\n\n# Create an empty dictionary to store the counts for each character \ncounts = {}\n\n# Traverse through the string and update the count of each character\nfor ch in sample_string:\n    if ch not in counts:\n        counts[ch] = 1\n    else:\n        counts[ch] += 1\n\n# Print the frequency table\nprint(\"Character \\t Frequency\")\nfor key in counts.keys():\n    print(key + '\\t\\t' + str(counts[key]))", "prediction": "def frequency_table(sample_string):\n    frequency = {}\n    for char in sample_string:\n        if char"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a custom sorting algorithm in Python that sorts a list of integers from highest to lowest.\n\n### Input:\nint_list = [8, 5, 9, 3, 4, 6]\n\n", "label": "def custom_sort(int_list):\n  for i in range(len(int_list)): \n    for j in range(i+1, len(int_list)): \n        if int_list[i] < int_list[j]: \n            int_list[i], int_list[j] = int_list[j], int_list[i] \n  return int_list\n\nint_list = [8, 5, 9, 3, 4, 6]\n\nsorted_list = custom_sort(int_list) \nprint(\"Sorted list: \", sorted_list)", "prediction": "def custom_sort(int_list):\n    sorted_list = []\n    while int_list:\n        max_value ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a user input and sorts it in ascending order.\n\n### Input:\n9,5,4,7\n\n", "label": "def my_function(values):\n    sorted_values = sorted(values)\n    return sorted_values\n\nif __name__ == \"__main__\":\n    values = [int(value) for value in input().split(',')]\n    print(my_function(values))", "prediction": "def sort_list(user_input):\n    user_input = list(map(int, user_input.split(',')))\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert imperial length units to metric length units.\n\n### Input:\n5 inches\n\n", "label": "\"\"\"\nImperial to Metric conversion program.\n\"\"\"\n\ndef inches_to_cm(inches):\n    return inches * 2.54\n\nif __name__ == '__main__':\n    print(inches_to_cm(5))", "prediction": "### Output:\n12.7 centimeters"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter a list of emails addresses. The program should remove any emails from a list of valid domain names.\n\n### Input:\nemails = [\n 'jane@domain1.com',\n 'john@domain2.com',\n 'dave@domain3.com',\n 'sarah@domain4.com'\n]\nvalid_domains = ['domain1.com', 'domain2.com']\n\n", "label": "def filter_emails(emails, valid_domains):\n filtered_emails = []\n for email in emails:\n domain = email.split('@')[1]\n if domain in valid_domains:\n filtered_emails.append(email)\n return filtered_emails\n\nemails = [\n 'jane@domain1.com',\n 'john@domain2.com',\n 'dave@domain3.com',\n 'sarah@domain4.com'\n]\nvalid_domains = ['domain1.com', 'domain2.com']\n\nfiltered_emails = filter_emails(emails, valid_domains)\nprint(filtered_emails) // ['jane@domain1.com', 'john@domain2.com']", "prediction": "def filter_emails(emails, valid_domains):\n    filtered_emails = []\n    for email in emails:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a patient in a hospital. The class should store name, age, medical history, current prescriptions, and allergies.\n\n### Input:\nNot applicable\n\n", "label": "class Patient:\n def __init__(self, name, age, medical_history, prescriptions, allergies):\n self.name = name\n self.age = age\n self.medical_history = medical_history\n self.prescriptions = prescriptions\n self.allergies = allergies\n    \n def getName(self):\n return self.name\n    \n def getAge(self):\n return self.age\n    \n def getMedicalHistory(self):\n return self.medical_history\n    \n def getPrescriptions(self):\n return self.prescriptions\n    \n def getAllergies(self):\n return self.allergies", "prediction": "### Output:\nclass Patient:\n    def __init__(self, name, age, medical_history,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python that takes a text input and returns a list of the most frequent words.\n\n### Input:\nNot applicable\n\n", "label": "import re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()", "prediction": "### Output:\n```python\nimport requests\nfrom collections import Counter\n\ndef get_most_frequent_words"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify inputs into one of three classes.\n\n### Input:\n[-2, 10, 11, 4, -1]\n\n", "label": "def classify_inputs(lst):\n    result = []\n    for num in lst:\n        if num <= 0:\n            result.append('negative')\n        elif num > 0 and num <= 10:\n            result.append('non-negative')\n        else:\n            result.append('positive')\n    return result\n\nprint(classify_inputs([-2, 10, 11, 4, -1]))", "prediction": "def classify(input):\n    if input < 0:\n        return \"negative\"\n    elif input >"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a supervised Machine Learning regression model in Python to predict the price of a car (continuous variable) based on four features (odometer, age, make, and model).\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('dataset.csv')\n\n# Define features and labels\nX = dataset.iloc[:, :4]\ny = dataset.iloc[:, -1]\n\n# Split the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Normalize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy)", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two sets of strings, and print the longest common substring of the two sets.\n\n### Input:\nset1: [\"pineapple\" ,\"mango\",\"apple\",\"orange\"]\nset2: [\"grandfather\",\"grandmother\",\"father\",\"mother\"]\n\n", "label": "s1 = set([\"pineapple\" ,\"mango\",\"apple\",\"orange\"])\ns2 = set([\"grandfather\",\"grandmother\",\"father\",\"mother\"])\n\nlongest_common_string = \"\"\n\nfor word1 in s1:\n  for word2 in s2:\n    if word1 not in longest_common_string and word2 not in longest_common_string:\n      common_string = \"\"\n      for i in range(min(len(word1),len(word2))):\n        if word1[i] == word2[i]:\n          common_string += word1[i]\n    \n      if len(common_string) > len(longest_common_string):\n        longest_common_string = common_string\n\nprint(longest_common_string)", "prediction": "def longest_common_substring(set1, set2):\n    # Initialize a dictionary to store the length"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for a person in Python which includes name and age as attributes.\n\n### Input:\n\n\n", "label": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\np = Person(\"John\", 18)\nprint(p.name, p.age)", "prediction": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python function to include an exception handling code block.\n\n### Input:\ndef convert_to_integer(x):\n    return int(x)\n\n", "label": "def convert_to_integer(x):\n    try:\n        return int(x)\n    except Exception:\n        print('Unable to convert to integer.')\n        return x", "prediction": "def convert_to_integer(x):\n    try:\n        return int(x)\n    except ValueError:\n        print"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python to predict customer churn using the given dataset.\n\n### Input:\nThe given dataset contains customers demographic information and their past month usage records.\n\n", "label": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# read dataset\ndataset = pd.read_csv('customer_churn.csv')\n\n# separate features(X) and labels (y)\ny = dataset.churn\nX = dataset.drop('churn', axis=1)\n\n# split dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\n# create and train the model\nmodel = LogisticRegression(solver='liblinear').fit(X_train, y_train)\n\n# predict using the model\ny_pred = model.predict(X_test)\n\n# calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)", "prediction": "### Output:\nThe model should be able to predict whether a customer will churn or not based on their"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to reverse an array in place.\n\n### Input:\n\n\n", "label": "def reverse_in_place(arr): \n  \n    # Initializing start and end \n    start = 0\n    end = len(arr) - 1\n  \n    while start < end: \n        # swapping the elements \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end -= 1\n    return arr \n  \narr = [1, 2, 3, 4, 5, 6] \nprint(reverse_in_place(arr))", "prediction": "def reverseArray(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to copy elements of one array into another array.\n\n### Input:\nArray 1=[1,2,3,4]\n\n", "label": "array_1 = [1,2,3,4] \narray_2 = [] \n  \n# Copying all the elements \nfor i in range(0, len(array_1)): \n    array_2.append(array_1[i]) \n     \nprint (\"Elements Copied from the Array1 to Array2 are : \" + str(array_2))", "prediction": "Array 2=[5,6,7,8]\n\ndef copy_array(arr1, arr2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given functions, write a Python program that takes an n-dimensional vector vector as an argument and returns its norm.\n\n### Input:\ndef vector_length(vector): \n    return math.sqrt(sum(c * c for c in vector))\n\n", "label": "def vector_norm(vector):\n    return vector_length(vector)\n\nvector = [1, 2, 3]\nnorm = vector_norm(vector)\nprint(norm)", "prediction": "def vector_norm(vector): \n    return vector_length(vector) / len(vector)\n\nvector = [1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named `Movie` that contains two parameters `title` and `rating`.\n\n### Input:\n\n\n", "label": "class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n        self.rating = rating", "prediction": "class Movie:\n    def __init__(self, title, rating):\n        self.title = title\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a sorting feature to this Python script.\n\n### Input:\nmy_list = [1, 5, 7, 2, 8]\n\n", "label": "my_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list)", "prediction": "def sort_list(my_list):\n    my_list.sort()\n    return my_list\n\nprint(sort_list(my"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a given code snippet into a Python Lambda function.\n\n### Input:\ndef some_method(x, y):\n    result = x + y\n    return result\n\n", "label": "some_method = lambda x, y: x + y", "prediction": "def lambda_handler(event, context):\n    x = event['x']\n    y = event['y"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given Python code to add exception handling.\n\n### Input:\ndef divide(a,b):\n    return a/b\n\n", "label": "def divide(a,b):\n    try:\n        return a/b\n    except (ZeroDivisionError) as e:\n        print('Division by zero')\n    except Exception as e:\n        print(str(e))\n        return None", "prediction": "def main():\n    try:\n        print(divide(10,2))\n    except ZeroDivisionError"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that takes a list of numbers, calculates the mean, and returns it.\n\n### Input:\n[1, 7, 11, 13]\n\n", "label": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nlist_of_numbers = [1, 7, 11, 13]\nmean = calculate_mean(list_of_numbers)\nprint(mean) # 7.5", "prediction": "def mean(numbers):\n    return sum(numbers) / len(numbers)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for optimizing a web page for speed. The program should use the PageSpeed Insights API to identify page resource optimization opportunities.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nimport json\n\nAPI_KEY = \"YOUR_API_KEY\"\n\ndef get_website_score(website):\n    url = f'https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url={website}&key={API_KEY}&strategy=mobile'\n    response = requests.get(url)\n    if response.status_code == 200:\n        ps_data = json.loads(response.content.decode('utf-8'))\n        return ps_data['lighthouseResult']['categories']['performance']['score']*100\n    else:\n        return 'unable to get website score'", "prediction": "### Output:\nimport requests\nimport json\n\n# Set your API key\nAPI_KEY = 'YOUR"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store and access user information.\n\n### Input:\nThe program should store 4 pieces of data for each user: name, age, gender, and phone number.\n\n", "label": "# Create database to store user information \ndb = sqlite3.connect('user_information.db')\n\n# Create table in the database \ncursor = db.cursor()\ncursor.execute(\"CREATE TABLE IF NOT EXISTS User_Info (Name TEXT, Age INTEGER, Gender TEXT, Phone_Number INTEGER)\")\n\n# Function to store user information in database \ndef store_info(name, age, gender, number):\n    cursor.execute(\"INSERT INTO User_Info (Name, Age, Gender, Phone_Number) VALUES(?, ?, ?, ?)\", (name, age, gender, number))\n    db.commit()\n\n# Function to get user information from database\ndef get_info(name):\n    cursor.execute(\"SELECT * FROM User_Info WHERE Name = ?\", (name,))\n    results = cursor.fetchall()\n    return results\n\n# Example \nstore_info(\"John\", 20, \"Male\", 8054839479)\njohn_info = get_info(\"John\")\nprint(john_info)", "prediction": "The program should allow the user to enter the data for a new user and store it in a dictionary"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code in Python to check if a number is prime or not.\n\n### Input:\ndef checkPrime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n\n", "label": "def checkPrime(n):\n    if n <= 1:\n        return False\n\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    \n    return True", "prediction": "print(checkPrime(5))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm in Python that uses two lists.\n\n### Input:\nlist1 = [3, 2, 5, 4, 1]\nlist2 = [0, 1, 1, 0, 1]\n\n", "label": "def sort_two_lists(list1, list2):\n    \"\"\"Function to sort two lists by the order of list2\"\"\"\n    zipped_lists = zip(list1, list2)\n    zipped_lists = sorted(zipped_lists, key=lambda x: x[1])\n    sorted_list1, sorted_list2 = zip(*zipped_lists)\n    return list(sorted_list1), list(sorted_list2)", "prediction": "def sort(list1, list2):\n    for i in range(len(list1)):\n        for j"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a Fibonacci series up to a given number.\n\n### Input:\n50\n\n", "label": "def fibonacci(num):\n    a = 0\n    b = 1\n    if num == 1:\n        print(a)\n    elif num == 2:\n        print(a,b)\n    else:\n        print(a,b, end=\" \")\n        for i in range(2,num):\n            c = a + b\n            a = b\n            b = c\n            print(b, end=\" \")\n\nfibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181", "prediction": "def fibonacci(n):\n    a, b = 0, 1\n    while a < n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Ruby code snippet to Python\n\n### Input:\nname = \"Jared\"\nputs \"Hello #{name}\"\n\n", "label": "name = \"Jared\"\nprint(f\"Hello {name}\")", "prediction": "### Output:\nname = \"Jared\"\nprint(\"Hello \" + name)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script for extracting data from a web page.\n\n### Input:\nURL of a web page containing relevant data.\n\n", "label": "Properly functioning Python script for extracting data from a web page.", "prediction": "### Output:\nA Python script that extracts data from the web page."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you find the smallest number in a given list using Python?\n\n### Input:\n[4, 5, 6, 7, 8, 1, 2]\n\n", "label": "def smallest_num(lst):\n   min_num = lst[0]\n   \n   for num in lst:\n       if num < min_num:\n           min_num = num\n           \n   return min_num\n\nlst = [4, 5, 6, 7, 8, 1, 2]\n\nprint(smallest_num(lst))", "prediction": "def find_smallest_number(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to call a web service using Python.\n\n### Input:\n\n\n", "label": "import requests\n\ndef call_web_service(url):\n    # send a GET request\n    response = requests.get(url) \n  \n    # check for HTTP codes other than 200\n    if response.status_code != 200: \n        raise Exception('Failed to get data:', response.status_code) \n  \n    # return the data \n    return response.json()", "prediction": "import requests\nimport json\n\ndef call_web_service(url, method, data):\n    headers = {'"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to find the largest number from the given list\n\n### Input:\n[10, 20, 40, 19]\n\n", "label": "def largest_number(list):\n    largest = list[0]\n    for number in list:\n        if number > largest:\n            largest = number\n    return largest", "prediction": "def largest_number(list):\n    largest = list[0]\n    for i in list:\n        if"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code that takes in two sets of coordinates and prints the distance between them\n\n### Input:\n(2,3), (4,5)\n\n", "label": "def calculate_distance(p1, p2):\n  x1, y1 = p1\n  x2, y2 = p2\n  return ((x2 - x1)**2 + (y2 - y1)**2)**0.5", "prediction": "def distance(x1, y1, x2, y2):\n    return ((x2 -"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that calculates the mean, median and mode of 15 input numbers.\n\n### Input:\n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\n", "label": "# List of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Calculate mean\nmean = sum(numbers) / len(numbers)\n\n# Calculate median\nmedian = sorted(numbers)[len(numbers) // 2]\n\n# Calculate mode\nmodes = []\nmax_freq = 0\nfreqs = {}\nfor number in numbers:\n\tif number not in freqs:\n\t\tfreqs[number] = 0\n\tfreqs[number] += 1\n\tif freqs[number] > max_freq:\n\t\tmax_freq = freqs[number]\n\t\tmodes = [number]\n\telif freqs[number] == max_freq:\n\t\tmodes.append(number)\n\n# Print results\nprint(\"Mean:\", mean)\nprint(\"Median:\", median)\nprint(\"Mode(s):\", modes)", "prediction": "def mean(numbers):\n    return sum(numbers) / len(numbers)\n\ndef median(numbers):\n    numbers.sort"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimized program in Python code to coordinate multiple deliveries from a single source to multiple destinations\n\n### Input:\nWe are given a list of pickup and delivery locations with start times, finish times and travel times between locations.\n\n", "label": "import networkx as nx \n \ndef delivery_coordinates(pickup_locations, delivery_locations, start_times, finish_times, travel_times):\n    # Create a graph\n    G = nx.DiGraph()\n \n    # Add nodes\n    for i in range(len(pickup_locations)):\n        G.add_node(pickup_locations[i])\n        G.add_node(delivery_locations[i])\n \n    # Add edges and corresponding weights\n    for i in range(len(pickup_locations)):\n        G.add_edge(pickup_locations[i], delivery_locations[i], \n                   start_time=start_times[i],\n                   finish_time=finish_times[i],\n                   weight = travel_times[i])\n \n    return G", "prediction": "def optimize_deliveries(pickups, deliveries):\n    # Sort pickups and deliveries by start time"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the most frequent elements in a list.\n\n### Input:\n[3, 4, 2, 5, 4, 3, 2, 5, 4]\n\n", "label": "def most_frequent_elements(lst):\n count = {}\n for item in lst:\n if item in count:\n count[item] += 1\n else:\n count[item] = 1\n max_count = 0\n max_element = None\n for item in count:\n if count[item] > max_count:\n max_count = count[item]\n max_element = item\n\nreturn max_element\n\nprint(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4]))\n# Output: 4", "prediction": "def most_frequent(my_list):\n    return max(set(my_list), key=my_list.count)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code contains unit tests for the CollectionQuery class. To use this code, create a new Python file and import the unittest and CollectionQuery classes. Then, create a new TestCollectionClass class that inherits from unittest.TestCase. Within this class, define test methods that call methods of the CollectionQuery class and use assertions to verify that the expected results are returned. Use the test_archive_center method to test the archive_center method of the CollectionQuery class, the test_keyword method to test the keyword method, the test_valid_formats method to test the format method with valid formats, the test_invalid_format method to test the format method with invalid formats, the test_valid_concept_id method to test the concept_id method with valid concept IDs, and the test_invalid_concept_id method to test the concept_id method with invalid concept IDs.\n\n### Input:\n\n\n", "label": "import unittest\n\nfrom cmr.queries import CollectionQuery\n\nclass TestCollectionClass(unittest.TestCase):\n\n    def test_archive_center(self):\n        query = CollectionQuery()\n        query.archive_center(\"LP DAAC\")\n\n        self.assertIn(\"archive_center\", query.params)\n        self.assertEqual(query.params[\"archive_center\"], \"LP DAAC\")\n    \n    def test_keyword(self):\n        query = CollectionQuery()\n        query.keyword(\"AST_*\")\n\n        self.assertIn(\"keyword\", query.params)\n        self.assertEqual(query.params[\"keyword\"], \"AST_*\")\n    \n    def test_valid_formats(self):\n        query = CollectionQuery()\n        formats = [\n            \"json\", \"xml\", \"echo10\", \"iso\", \"iso19115\",\n            \"csv\", \"atom\", \"kml\", \"native\", \"dif\", \"dif10\",\n            \"opendata\", \"umm_json\", \"umm_json_v1_1\" \"umm_json_v1_9\"]\n\n        for _format in formats:\n            query.format(_format)\n            self.assertEqual(query._format, _format)\n    \n    def test_invalid_format(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.format(\"invalid\")\n            query.format(\"jsonn\")\n            query.format(\"iso19116\")\n    \n    def test_valid_concept_id(self):\n        query = CollectionQuery()\n\n        query.concept_id(\"C1299783579-LPDAAC_ECS\")\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\"])\n        \n        query.concept_id([\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n    \n    def test_invalid_concept_id(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.concept_id(\"G1327299284-LPDAAC_ECS\")\n        \n        with self.assertRaises(ValueError):\n            query.concept_id([\"C1299783579-LPDAAC_ECS\", \"G1327299284-LPDAAC_ECS\"])\n\n", "prediction": "```python\nimport unittest\nfrom collection_query import CollectionQuery\n\nclass TestCollectionClass(unittest.TestCase):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random list of numbers ranging from 1 to 10 without duplicates in Python.\n\n### Input:\nNot applicable\n\n", "label": "import random\n\n# Generate a list of numbers ranging from 1 to 10 without duplicates\nnumbers = list(range(1,11))\nrandom.shuffle(numbers)\n\n# Print shuffled numbers\nprint(numbers)", "prediction": "### Output:\nimport random\nnumbers = random.sample(range(1, 11), 5)\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to reverse the words in a given sentence.\n\n### Input:\nsentence = \"hello world how are you\"\n\n", "label": "def reverseWords(sentence): \n    words = sentence.split(' ') \n    words = words[::-1] \n    return ' '.join(words) \n      \nprint(reverseWords(sentence))", "prediction": "def reverse_words(sentence):\n    words = sentence.split()\n    return \" \".join(reversed(words))\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate the powers of two up to a given number.\n\n### Input:\n8\n\n", "label": "def powersOfTwo(n):\n    powers = []\n    for i in range(n + 1):\n        powers.append(2**i)\n    return powers\n\nn = 8\nprint(powersOfTwo(n))", "prediction": "def powers_of_two(n):\n    for i in range(1, n + 1):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python command line interface to search a given array.\n\n### Input:\nSix colors: red, orange, yellow, green, blue, purple\n\n", "label": "def search_colors():\n    colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\n    query = input(\"What color would you like to search for? \")\n    if query in colors:\n        print(\"The color exists in the list.\")\n    else:\n        print(\"The color does not exist in the list.\")", "prediction": "def search_array(array, color):\n    for i in range(len(array)):\n        if array[i]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to compare two sets of data and print the differences.\n\n### Input:\nset1 = [1, 2, 3, 4, 5]\nset2 = [2, 4, 6, 8, 10]\n\n", "label": "set1 = [1, 2, 3, 4, 5]\nset2 = [2, 4, 6, 8, 10]\n\ndifference = []\nfor i in set1:\n if i not in set2:\n difference.append(i)\n \nprint(f\"The difference between set1 and set2 is: {difference}\")", "prediction": "def compare_sets(set1, set2):\n    diff = set1.difference(set2)\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python module for the SKiDL library. To use it, import the necessary functions and classes from the module. The module contains a class `SkidlCfg` for handling SKiDL configuration, a function `get_kicad_lib_tbl_dir` for getting the path to the global fp-lib-table file, and a number of global variables and functions for working with SKiDL. To prevent creation of output files, call the `no_files` function with the default Circuit object.\n\n### Input:\n\n\n", "label": "# -*- coding: utf-8 -*-\n\n# MIT license\n#\n# Copyright (C) 2016 by XESS Corp.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport json\nimport os\nfrom builtins import open, super\n\nfrom future import standard_library\n\nfrom . import tools  # Import EDA tool-specific stuff.\nfrom .circuit import Circuit\nfrom .common import *\nfrom .defines import *\nfrom .logger import erc_logger, get_script_name, logger\nfrom .part_query import footprint_cache\nfrom .pin import Pin\nfrom .utilities import *\n\nstandard_library.install_aliases()\n\n\nclass SkidlCfg(dict):\n    \"\"\"Class for holding SKiDL configuration.\"\"\"\n\n    CFG_FILE_NAME = \".skidlcfg\"\n\n    def __init__(self, *dirs):\n        super().__init__()\n        self.load(*dirs)\n\n    def load(self, *dirs):\n        \"\"\"Load SKiDL configuration from JSON files in given dirs.\"\"\"\n        for dir in dirs:\n            path = os.path.join(dir, self.CFG_FILE_NAME)\n            path = os.path.expanduser(path)\n            path = os.path.abspath(path)\n            try:\n                with open(path) as cfg_fp:\n                    merge_dicts(self, json.load(cfg_fp))\n            except (FileNotFoundError, IOError):\n                pass\n\n    def store(self, dir=\".\"):\n        \"\"\"Store SKiDL configuration as JSON in directory as .skidlcfg file.\"\"\"\n        path = os.path.join(dir, self.CFG_FILE_NAME)\n        path = os.path.expanduser(path)\n        path = os.path.abspath(path)\n        with open(path, \"w\") as cfg_fp:\n            json.dump(self, cfg_fp, indent=4)\n\n\ndef get_kicad_lib_tbl_dir():\n    \"\"\"Get the path to where the global fp-lib-table file is found.\"\"\"\n\n    paths = (\n        \"$HOME/.config/kicad\",\n        \"~/.config/kicad\",\n        \"%APPDATA%/kicad\",\n        \"$HOME/Library/Preferences/kicad\",\n        \"~/Library/Preferences/kicad\",\n    )\n    for path in paths:\n        path = os.path.normpath(os.path.expanduser(os.path.expandvars(path)))\n        if os.path.lexists(path):\n            return path\n    return \"\"\n\n\n###############################################################################\n# Globals that are used by everything else.\n###############################################################################\n\n# Get SKiDL configuration.\nskidl_cfg = SkidlCfg(\"/etc\", \"~\", \".\")\n\n# If no configuration files were found, set some default lib search paths.\nif \"lib_search_paths\" not in skidl_cfg:\n    skidl_cfg[\"lib_search_paths\"] = {tool: [\".\"] for tool in ALL_TOOLS}\n\n    # Add the location of the default KiCad part libraries.\n    try:\n        skidl_cfg[\"lib_search_paths\"][KICAD].append(os.environ[\"KICAD_SYMBOL_DIR\"])\n    except KeyError:\n        logger.warning(\n            \"KICAD_SYMBOL_DIR environment variable is missing, so the default KiCad symbol libraries won't be searched.\"\n        )\n\n    # Add the location of the default SKiDL part libraries.\n    default_skidl_libs = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)), \"libs\"\n    )\n    skidl_cfg[\"lib_search_paths\"][SKIDL].append(default_skidl_libs)\n\n# Shortcut to library search paths.\nlib_search_paths = skidl_cfg[\"lib_search_paths\"]\n\n# If no configuration files were found, set some default footprint search paths.\nif \"footprint_search_paths\" not in skidl_cfg:\n    dir_ = get_kicad_lib_tbl_dir()\n    skidl_cfg[\"footprint_search_paths\"] = {tool: [dir_] for tool in ALL_TOOLS}\n\n# Cause the footprint cache to be invalidated if the footprint search path changes.\ndef invalidate_footprint_cache(self, k, v):\n    footprint_cache.reset()\n\n\nskidl_cfg[\"footprint_search_paths\"] = TriggerDict(skidl_cfg[\"footprint_search_paths\"])\nskidl_cfg[\"footprint_search_paths\"].trigger_funcs[KICAD] = invalidate_footprint_cache\n\n# Shortcut to footprint search paths.\nfootprint_search_paths = skidl_cfg[\"footprint_search_paths\"]\n\n# Set default toolset being used with SKiDL.\ndef set_default_tool(tool):\n    \"\"\"Set the ECAD tool that will be used by default.\"\"\"\n    skidl_cfg[\"default_tool\"] = tool\n\n\ndef get_default_tool():\n    return skidl_cfg[\"default_tool\"]\n\n\nif \"default_tool\" not in skidl_cfg:\n    set_default_tool(KICAD)\n\n# Make the various EDA tool library suffixes globally available.\nlib_suffixes = tools.lib_suffixes\n\n# Definitions for backup library of circuit parts.\nBACKUP_LIB_NAME = get_script_name() + \"_lib\"\nBACKUP_LIB_FILE_NAME = BACKUP_LIB_NAME + lib_suffixes[SKIDL]\n\n# Boolean controls whether backup lib will be searched for missing parts.\nQUERY_BACKUP_LIB = INITIAL_QUERY_BACKUP_LIB = True\n\n\ndef set_query_backup_lib(val):\n    \"\"\"Set the boolean that controls searching for the backup library.\"\"\"\n    global QUERY_BACKUP_LIB\n    QUERY_BACKUP_LIB = val\n\n\ndef get_query_backup_lib():\n    return QUERY_BACKUP_LIB\n\n\n# Backup lib for storing parts in a Circuit.\nbackup_lib = None\n\n\ndef set_backup_lib(lib):\n    \"\"\"Set the backup library.\"\"\"\n    global backup_lib\n    backup_lib = lib\n\n\ndef get_backup_lib():\n    return backup_lib\n\n\n@norecurse\ndef load_backup_lib():\n    \"\"\"Load a backup library that stores the parts used in the circuit.\"\"\"\n\n    global backup_lib\n\n    # Don't keep reloading the backup library once it's loaded.\n    if not backup_lib:\n        try:\n            # The backup library is a SKiDL lib stored as a Python module.\n            exec(open(BACKUP_LIB_FILE_NAME).read())\n            # Copy the backup library in the local storage to the global storage.\n            backup_lib = locals()[BACKUP_LIB_NAME]\n\n        except (FileNotFoundError, ImportError, NameError, IOError):\n            pass\n\n    return backup_lib\n\n\n# Create the default Circuit object that will be used unless another is explicitly created.\nbuiltins.default_circuit = Circuit()\n# NOCONNECT net for attaching pins that are intentionally left open.\nbuiltins.NC = default_circuit.NC  # pylint: disable=undefined-variable\n\n# Create calls to functions on whichever Circuit object is the current default.\nERC = default_circuit.ERC\nerc_assert = default_circuit.add_erc_assertion\ngenerate_netlist = default_circuit.generate_netlist\ngenerate_xml = default_circuit.generate_xml\ngenerate_schematic = default_circuit.generate_schematic\ngenerate_svg = default_circuit.generate_svg\ngenerate_graph = default_circuit.generate_graph\nreset = default_circuit.reset\nbackup_parts = default_circuit.backup_parts\n\n# Define a tag for nets that convey power (e.g., VCC or GND).\nPOWER = Pin.drives.POWER\n\n\ndef no_files(circuit=default_circuit):\n    \"\"\"Prevent creation of output files (netlists, ERC, logs) by this Circuit object.\"\"\"\n    circuit.no_files = True\n    erc_logger.stop_file_output()\n    logger.stop_file_output()\n", "prediction": "```python\nimport skidl\nfrom skidl import *\nfrom skidl_cfg import SkidlCfg"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to calculate the average of the following array.\n\n### Input:\nitems = [1, 5, 6, 4, 8, 9]\n\n", "label": "def get_average(array):\n    array_length = len(array)\n    total_sum = 0\n    for i in array:\n        total_sum += i\n    average = total_sum / array_length\n    return average\n\nprint(get_average(items))", "prediction": "### Output:\ndef average(items):\n    return sum(items) / len(items)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a function in Python to take two numbers as input and return the greatest number.\n\n### Input:\n5 and 8\n\n", "label": "def getGreatestNumber(a, b):\n    if a > b:\n        return a\n    return b\n\ngreatest_num = getGreatestNumber(5, 8)\nprint(\"Greatest number is\", greatest_num)", "prediction": "def greatest(a, b):\n    if a > b:\n        return a\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python source code to print the last element from a given list.\n\n### Input:\n['Apple', 'Orange', 'Banana']\n\n", "label": "arr = ['Apple', 'Orange', 'Banana']\nlast_element = arr[-1]\nprint(last_element)  # Result: Banana", "prediction": "def last_element(list):\n    return list[-1]\n\nprint(last_element(['Apple', 'Orange',"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a histogram of the following data using Python.\n\n### Input:\ndata = [2, 3, 4, 6, 7, 8, 9, 10]\n\n", "label": "import matplotlib.pyplot as plt\n\ndata = [2, 3, 4, 6, 7, 8, 9, 10]\n\nplt.hist(data)\nplt.title('Histogram of Wind Direction')\nplt.xlabel('Direction (degrees)')\nplt.ylabel('Frequency')\nplt.show()", "prediction": "import matplotlib.pyplot as plt\nplt.hist(data)\nplt.show()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a basic web server using Python.\n\n### Input:\n\n\n", "label": "import socket\n\nHOST, PORT = '', 8888\n\nlisten_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nlisten_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nlisten_socket.bind((HOST, PORT))\nlisten_socket.listen(1)\nprint 'Serving HTTP on port %s ...' % PORT\nwhile True:\n    client_connection, client_address = listen_socket.accept()\n    request = client_connection.recv(1024)\n    print request\n\n    http_response = \"\"\"\\\nHTTP/1.1 200 OK\n\nHello, World!\n\"\"\"\n    client_connection.sendall(http_response)\n    client_connection.close()", "prediction": "import socket\n\nHOST = '127.0.0.1'  # Standard loopback interface"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the best way to sort an array of integers in descending order using Python?\n\n### Input:\n[99, 65, 43, 87, 21]\n\n", "label": "def sortDesc(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [99, 65, 43, 87, 21]\nprint(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]", "prediction": "### Output:\n[99, 87, 65, 43, 21]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the second most frequent value in the given array.\n\n### Input:\n[1, 2, 3, 3, 3, 2, 4, 4, 1, 5]\n\n", "label": "def second_most_frequent(arr):\n counts = {}\n # Count the frequency of the elements\n for item in arr:\n if item in counts:\n counts[item] += 1\n else:\n counts[item] = 1\n # Sort the list by frequency\n sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n # Return the second most frequent element\n return sorted_count[1][0]\n \nprint(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))", "prediction": "### Output:\n3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to receive user input and calculate the sum of every number entered.\n\n### Input:\n\n\n", "label": "numbers = []\nwhile True:\n    userInput = input(\"Enter a number: \") \n    if userInput == 'done':\n        break\n    try:\n        userInput = int(userInput)\n        numbers.append(userInput)\n    except ValueError:\n        print(\"Invalid input, please enter a valid number\")\n\nprint(\"Sum of entered numbers : \" + str(sum(numbers)))", "prediction": "def sum_of_numbers():\n    total = 0\n    while True:\n        num = input(\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to retrieve the name of the user from a given input.\n\n### Input:\nUser ID: uchefu\n\n", "label": "ID = input('User ID: ')\n\nuser_name = ID.split('che')[0]\nprint('User Name: ' + user_name)", "prediction": "### Output:\nThe name of the user is uchefu."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.\n\n### Input:\nNot applicable\n\n", "label": "import flask\nfrom flask import request, jsonify\n\n# Creating the application app\napp = flask.Flask(__name__)\n\n\n@app.route('/calculate', methods=['POST'])\ndef calculate():\n    # Get the input data from the user\n    data = request.get_json()\n\n    age = data['age']\n    gender = data['gender']\n    car_model = data['car_model']\n\n    # Calculate the insurance price\n    # ...\n    insurance_price = 0.00\n\n    # Return the calculated insurance price in JSON format\n    return jsonify({'insurance_price': insurance_price})\n\t\napp.run(host='0.0.0.0', port=8006)", "prediction": "### Output:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class to store information about a person's name, address and phone number.\n\n### Input:\n\n\n", "label": "class Person:\n    def __init__(self, name, address, phone_number):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n    \n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number", "prediction": "class Person:\n    def __init__(self, name, address, phone_number):\n        self.name"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a regular expression in Python to match the following words: \"apple\", \"banana\", \"strawberry\", \"orange\".\n\n### Input:\n\n\n", "label": "import re\n\nwords_regex = re.compile(r\"apple|banana|strawberry|orange\")", "prediction": "import re\npattern = re.compile(r'apple|banana|strawberry|orange')\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to generate unique random numbers between 1 and 100\n\n### Input:\n\n\n", "label": "import random\n\ndef generate_unique_randoms(n):\n    res = [] \n    while len(res) < n: \n        x = random.randint(1, 100 )\n        if x not in res: \n            res.append(x) \n    return res", "prediction": "import random\ndef generate_random_numbers():\n    random_numbers = []\n    for i in range(10"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python for implementing Merge Sort algorithm.\n\n### Input:\n\n\n", "label": "def merge_sort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n  \n        merge_sort(L)\n        merge_sort(R)\n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nif __name__ == '__main__':\n    arr = [0, 4, 1, 3, 6, 5, 8, 7]\n    print(\"Given array is\", arr)\n    merge_sort(arr) \n    print(\"Sorted array is: \", arr)", "prediction": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python that sorts an array using quick sort.\n\n### Input:\nmyList = [3, 8, 10, 2, 4]\n\n", "label": "def quick_sort(input_list):\n    if len(input_list) <= 1:\n        return input_list\n    pivot = input_list[0]\n    left = [x for x in input_list[1:] if x < pivot]\n    right = [x for x in input_list[1:] if x >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nmyList = [3, 8, 10, 2, 4]\n\nsortedList = quick_sort(myList)\nprint(sortedList)", "prediction": "def quickSort(myList):\n    if len(myList) <= 1:\n        return myList\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate datasets in Python with a feature combination of 5 features drawn randomly from a normal distribution.\n\n### Input:\n\n\n", "label": "import numpy as np\ndef generate_data(n_samples=1000):\n    # Generate 5 features randomly drawn from a normal distribution\n    features = np.random.randn(n_samples, 5)\n\n    # Generate labels\n    labels = np.zeros(n_samples)\n\n    return (features, labels)", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import make_classification\n\nX, y"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to tokenize the given text.\n\n### Input:\nText: This is a sentence containing words\n\n", "label": "import re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens", "prediction": "def tokenize(text):\n    return text.split()"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python application to compare the values of two given dictionary.\n\n### Input:\ndict1 = {\n  \"A\": 1,\n  \"B\": 2\n}\ndict2 = {\n  \"A\": 1,\n  \"B\": 4\n}\n\n", "label": "def compare_dicts(dict1, dict2):\n    if len(dict1) != len(dict2):\n        return False\n    \n    for key, value in dict1.items():\n        if key not in dict2 or dict2[key] != value:\n            return False\n    \n    return True", "prediction": "def compare(dict1, dict2):\n    if dict1 == dict2:\n        return True\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that uses a Decision Tree to classify a given dataset.\n\n### Input:\nNot applicable\n\n", "label": "import pandas as pd\nfrom sklearn import datasets\nfrom sklearn import tree\n\ndata = pd.read_csv('data.csv')\n\n# Split the data\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Train the model\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Test the model\ny_pred = clf.predict(X)\n\n# Evaluate accuracy\naccuracy = metrics.accuracy_score(y, y_pred)\nprint('Accuracy:', accuracy)", "prediction": "### Output:\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the inputs provided, write Python code to check if two integers are equal.\n\n### Input:\nFirst Integer: 10\nSecond Integer: 10\n\n", "label": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")", "prediction": "### Output:\nThe two integers are equal."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web API with Python and Flask to give the current date and time.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()", "prediction": "### Output:\nimport flask\nfrom datetime import datetime\napp = flask.Flask(__name__)\n@app"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class 'Person' in Python, which has attributes name, age, gender and blood group.\n\n### Input:\n\n\n", "label": "class Person:\n def __init__(self, name, age, gender, blood_group):\n  self.name = name\n  self.age = age\n  self.gender = gender\n  self.blood_group = blood_group", "prediction": "class Person:\n    def __init__(self, name, age, gender, blood_group):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCut at current position in a string by 1 letter in Python.\n\n### Input:\nmystring = \"This is my string\"\n\n", "label": "mystring = mystring[:-1]", "prediction": "def cut_string(mystring):\n    return mystring[:len(mystring)-1]\n\nprint(cut"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Classifier using Python and Scikit-Learn on the Iris dataset.\n\n### Input:\n\n\n", "label": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n \n# Load the dataset\nirisdataset = pd.read_csv('Iris.csv')\n \n# Separate the dependent variables and independent variables\nX = irisdataset.iloc[:, [0, 1, 2, 3]].values\nY = irisdataset.iloc[:, 4].values\n \n# Split the dataset into training and testing\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nsc = StandardScaler()\nX_Train = sc.fit_transform(X_Train)\nX_Test = sc.transform(X_Test)\n \n# Fit and Train the Model\nclassifier = SVC(kernel = 'rbf')\nclassifier.fit(X_Train, Y_Train)\n \n# Make predictions on the test set\nY_Pred = classifier.predict(X_Test)\n \n# Calculate the accuracy\nprint(\"Accuracy Score : \", accuracy_score(Y_Test, Y_Pred))", "prediction": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to calculate the n factorial.\n\n### Input:\n\n\n", "label": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)", "prediction": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the sum of series 1 +1/2 + 1/4 +\u2026.+ 1/n\n\n### Input:\n\n\n", "label": "def series_sum(n):\n    sum_series = 0\n    for i in range(1, n + 1):\n        sum_series += 1/i\n    return sum_series", "prediction": "def sum_series(n):\n    sum = 0\n    for i in range(1, n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRemove all the commented code from Python program.\n\n### Input:\n# This code will print \"Hello World!\"\nprint(\"Hello World!\")\n# This code can be used to increment i\ni=i+1\n\n", "label": "print(\"Hello World!\")\ni=i+1", "prediction": "### Output:\nThis code will print \"Hello World!\"\nprint(\"Hello World!\")\nThis code can be"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get the latest news article from a news website.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/news'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'lxml')\n\nlatest_news = soup.find('div', id='latest_news')\nlatest_article = latest_news.find('h2')\n\nprint(latest_article.text)", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nurl = \"https://www.nytimes"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python code to reduce the response time.\n\n### Input:\n\"\"\"\nOriginal Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    for i in range(10000000):\n        iter += i\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\"\n\n", "label": "\"\"\"\nOptimized Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    max_val = 10000000\n    i = 0\n    while i < max_val:\n        iter += i\n        i += 1\n    return iter\n\nstart = time.time()\nfoo()\nend = time.time()\nduration = end - start\nprint(\"Time taken: \", duration)\n\"\"\"", "prediction": "Optimized Python code:\n\nimport time\n\ndef foo():\n    iter = 0\n    for i"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the sum of squares of all numbers between 1 and 10\n\n### Input:\n\n\n", "label": "def sum_of_squares(start, end):\n    \"\"\" This function calculates the sum of squared\n    numbers from start to end\n    \n    Input:\n        start: starting number\n        end: ending number\n    \n    Output:\n        total: total sum of squares\n    \"\"\"\n    \n    total = 0\n    for num in range(start, end + 1):\n        total += num ** 2\n    return total\n\ntotal_sum = sum_of_squares(1, 10)\nprint(total_sum)", "prediction": "def sum_of_squares():\n    sum = 0\n    for i in range(1,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: \n- --owner: set the new owner of the book\n- --new-book-title: set the new title of the book\n- --new-book-url: set the new URL of the book\n\nFor example, to rename a book called \"old_name\" with a new title of \"new_title\" and a new URL of \"new_url\" and a new owner of \"new_owner\", run the command:\npython manage.py rename_book old_name --new-book-title=new_title --new-book-url=new_url --owner=new_owner\n\n### Input:\n\n\n", "label": "# This file is part of Booktype.\n# Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org>\n#\n# Booktype is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Booktype is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with Booktype.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom django.core.management.base import BaseCommand, CommandError\nfrom optparse import make_option\nfrom django.contrib.auth.models import User\n\nfrom booki.editor import common\nfrom booki.editor import models\nfrom django.conf import settings\n\nclass Command(BaseCommand):\n    args = \"<book name>\"\n    help = \"Rename book.\"\n\n    option_list = BaseCommand.option_list + (\n        make_option('--owner',\n                    action='store',\n                    dest='owner',\n                    default=None,\n                    help='Set new owner of the book.'),\n        \n        make_option('--new-book-title',\n                    action='store',\n                    dest='new_book_title',\n                    default=None,\n                    help='Set new book title.'),\n\n        make_option('--new-book-url',\n                    action='store',\n                    dest='new_book_url',\n                    default=None,\n                    help='Set new book url name.'),\n\n        )\n\n    requires_model_validation = False\n\n    def handle(self, *args, **options):\n        if len(args) != 1:\n            raise CommandError(\"You must specify book name.\")\n\n        try:\n            book = models.Book.objects.get(url_title__iexact=args[0])\n        except models.Book.DoesNotExist:\n            raise CommandError('Book \"%s\" does not exist.' % args[0])\n\n        if options['new_book_title']:\n            book.title = options['new_book_title']\n\n        if options['new_book_url']:\n            import os\n            os.rename('%s/books/%s' % (settings.DATA_ROOT, book.url_title), '%s/books/%s' % (settings.DATA_ROOT, options['new_book_url']))\n\n            book.url_title = options['new_book_url']\n\n            # TODO: test this\n            n = len(settings.DATA_ROOT)+len('books/')+1\n\n            for attachment in models.Attachment.objects.filter(version__book=book):\n                name = attachment.attachment.name\n                j = name[n:].find('/')\n                newName = '%s/books/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:])\n\n                attachment.attachment.name = newName\n                attachment.save()\n\n        if options['owner']:\n            try:\n                user = User.objects.get(username=options['owner'])\n            except User.DoesNotExist:\n                raise CommandError('User \"%s\" does not exist. Can not finish import.' % options['owner'])\n\n            book.owner = user\n\n        book.save()\n            \n", "prediction": "```python\nfrom django.core.management.base import BaseCommand\nfrom books.models import Book\n\nclass Command"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that finds all combinations of two given numbers that sum up to a given goal.\n\n### Input:\n\n\n", "label": "def combination sums(nums, target):\n  result = []\n  for i in range(len(nums)):\n    x = nums[i]\n    for j in range(i + 1, len(nums)):\n      if (x + nums[j]) == target: \n        result.append([x,nums[j]]) \n  \n  return result", "prediction": "def find_combinations(goal, numbers):\n    for i in range(len(numbers)):\n        for j in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two numbers as arguments and returns their average.\n\n### Input:\n2, 3\n\n", "label": "def average(a, b): \n    return (a + b) / 2\n\nprint(average(2, 3))", "prediction": "def average(a, b):\n    return (a + b) / 2\n\nprint(average"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that fetches a web page and scrapes the HTML to extract the top 5 headlines from the page.\n\n### Input:\nURL to scrape: https://www.nytimes.com/\n\n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.nytimes.com/'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n html_data = response.text\n soup = BeautifulSoup(html_data, 'html.parser')\n\n headlines = soup.find_all('h2', {'class': 'e1voiwgp0'})\n \nfor headline in headlines[:5]:\n print(headline.text)", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.nytimes.com/\"\nresponse"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in Python to print out the first 20 perfect squares.\n\n### Input:\nNot applicable\n\n", "label": "perfect_squares = []\ni = 1\nwhile len(perfect_squares) < 20:\n perfect_square = i * i \n perfect_squares.append(perfect_square)\n i = i + 1\n\nprint(perfect_squares)", "prediction": "### Output:\ndef perfect_squares(n):\n    for i in range(1, n+1"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to filter out all words containing 10 or more characters.\n\n### Input:\n\"This is a sample sentence\"\n\n", "label": "sentence = \"This is a sample sentence\"\n\nwords = sentence.split()\nlong_words = [word for word in words if len(word) > 10]\n\nprint(long_words)", "prediction": "def filter_words(sentence):\n    words = sentence.split()\n    filtered_words = [word for word in"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Flask application for efficient performance.\n\n### Input:\nNot applicable\n\n", "label": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here", "prediction": "### Output:\n1. Use a WSGI server that supports asynchronous processing, such as Gunicorn"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to fetch all the emails from a given mailbox using IMAP.\n\n### Input:\nNot applicable\n\n", "label": "import imaplib, email\n\n#Connect to the mail server\nmail = imaplib.IMAP4_SSL('imap.example.com')\n\n#Login\nmail.login('username', 'password')\n\n#Select the mailbox\nmail.select('INBOX')\n\n#Search for emails\n_, data = mail.search(None, 'ALL')\n\n#Fetch the emails\nfor num in data[0].split():\n  _, data = mail.fetch(num, '(RFC822)')\n  email_message = email.message_from_bytes(data[0][1])\n  #Process the email", "prediction": "### Output:\nimport imaplib\nimport email\nimport getpass\ndef fetch_emails(mailbox):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a simple Twitter bot in Python that retweets other user\u2019s tweets.\n\n### Input:\nNot applicable\n\n", "label": "# import required modules\nimport tweepy \nimport time \n\n# Set access credentials\nconsumer_key = 'YourConsumerKey'\nconsumer_secret = 'YourConsumerSecret'\naccess_token = 'YourAccessToken'\naccess_token_secret = 'YourAccessTokenSecret'\n \n# Set authentication and API object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \napi = tweepy.API(auth) \n\n# Search for tweets with hashtag #python. \n# 150 tweets will be retreived\nsearch_query = '#python'\nsearch_result = api.search(q=search_query, count=150)\n\n# Retweet each of the tweets\nfor tweet in search_result:\n    api.retweet(tweet.id)\n    time.sleep(1)", "prediction": "### Output:\nimport tweepy\nimport time\nfrom datetime import datetime\nimport os\nimport sys"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the K-means algorithm in Python to cluster similar data points.\n\n### Input:\nData points: [[0, 0], [4, 5], [6, 2], [-2, 4]]\n\n", "label": "\"\"\"\nImplement the K-Means Algorithm\n\"\"\"\n\nimport numpy as np\n\ndef k_means_clustering(X, k):\n    # Get data points\n    points = np.array(X)\n\n    # Generate cluster centers randomly\n    centers = np.random.uniform(points.min(), points.max(), (k, points.shape[1]))\n\n    while True:\n        # Calculate the distances between each point and the clusters\n        distances = np.array([np.sqrt(np.sum((points - c)**2, axis=1)) for c in centers])\n\n        # Assign each point to the closest cluster\n        clusters = np.argmin(distances, axis=0)\n\n        # Calculate the centroids of each cluster\n        new_centers = np.array([points[clusters == i].mean(axis=0) for i in range(k)])\n\n        # Stop if the centroids haven't moved\n        if np.linalg.norm(new_centers - centers) == 0:\n            break\n\n        # Update the cluster centers\n        centers = new_centers\n\n    return clusters\n\nif __name__ == '__main__':\n    X = [[0, 0], [4, 5], [6, 2], [-2, 4]]\n    k = 2\n\n    clusters = k_means_clustering(X, k)\n    print(clusters)", "prediction": "def kmeans(data, k):\n    # Initialize k centroids\n    centroids = np.random.choice(data"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to determine if the given number is an Armstrong number in Python.\n\n### Input:\n\n\n", "label": "def is_armstrong(num): \n    n = len(str(num)) \n    total = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        total += digit**n\n        temp //= 10\n    if num == total:\n        return True\n    else:\n        return False", "prediction": "def is_armstrong(n):\n    n = str(n)\n    sum = 0\n    for"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the probability of an event based on the input data.\n\n### Input:\ndata = {'success': 833, 'failure': 917}\n\n", "label": "def probability_calc(data):\n    total = data['success'] + data['failure']\n    return data['success']/total", "prediction": "def compute_probability(data):\n    success = data['success']\n    failure = data['failure']\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the following code as either a python function or code section.\n\n### Input:\nx = \"hello\" \nz = x + \" world\"\n\n", "label": "Code section.", "prediction": "### Output:\nCode section"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the most frequent item in a list.\n\n### Input:\n[1, 3, 1, 3, 2, 1]\n\n", "label": "def most_frequent(list): \n    counter = 0\n    num = list[0] \n    \n    for i in list: \n        curr_frequency = list.count(i) \n        if(curr_frequency> counter): \n            counter = curr_frequency \n            num = i \n  \n    return num \n  \nlist = [1, 3, 1, 3, 2, 1]\nprint(most_frequent(list))", "prediction": "def most_frequent(my_list):\n    return max(set(my_list), key=my_list.count)\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that returns the kth smallest element from an unsorted array of size n, without changing the order of elements.\n\n### Input:\nn = 5, k = 3\n\n", "label": "def kth_smallest(arr, k): \n    n = len(arr) \n    \n    # Iterate through all elements \n    for i in range(n): \n        # Iterate from k till n \n        for j in range(i+1, n): \n            if arr[i] > arr[j] : \n                arr[i], arr[j] = arr[j], arr[i] \n    \n    return arr[k-1] \n\n# Driver code \nn = 5\narr = [12, 3, 5, 7, 19] \nk = 3\nprint(kth_smallest(arr, k))", "prediction": "def kthSmallest(arr, k):\n    arr.sort()\n    return arr[k-1]\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to add 1 to every element of an array.\n\n### Input:\n[5, 6, 8, 9, 10]\n\n", "label": "def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr", "prediction": "def add_one_to_array(arr):\n    return [x + 1 for x in arr]\n\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution to parse an HTML document using Python.\n\n### Input:\n\n\n", "label": "Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.", "prediction": "import requests\nfrom bs4 import BeautifulSoup\n\ndef parse_html(url):\n    page = requests.get(url"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to transform an input string into an HTML table.\n\n### Input:\nName, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female\n\n", "label": "def create_html_table(inp):\n    lines = inp.split('\\n')\n    col_names = lines[0]\n    col_names = col_names.split(',')\n    \n    html = \"<table><thead><tr>\"\n    for c in col_names:\n        html += \"<th>{0}</th>\".format(c)\n    html += \"</tr></thead><tbody>\"\n\n    for i in range(1, len(lines)):\n        row = lines[i].split(',')\n        html += \"<tr>\"\n        for r in row:\n            html += \"<td>{0}</td>\".format(r)\n        html += \"</tr>\"\n\n    html += \"</tbody></table>\"\n    return html\n\ninp = \"\"\"Name, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female\"\"\"\n\nprint(create_html_table(inp))", "prediction": "def create_table(input_string):\n    table = \"<table>\"\n    for line in input_string.split(\"\\"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that when executed, prints out the sum of the first 10 even numbers.\n\n### Input:\n\n\n", "label": "sum = 0\nfor i in range(2,21,2): #Range(start,stop-1,step size)\n sum += i\n\nprint(sum)", "prediction": "def sum_of_even_numbers():\n    sum = 0\n    for i in range(1,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a visualization using Dash in Python that displays hospitality data. This visualization should include an interactive 3D line chart that shows the trend in data input by the user.\n\n### Input:\nNot applicable\n\n", "label": "import dash\nimport dash_cytoscape as cyto\nimport plotly.graph_objects as go\n\napp = dash.Dash(__name__)\n\n# create 3D line chart using Plotly\nx_values = [0,0.2,0.4,0.6,0.8,1] # just example values\ny_values = [0,0.5,1,2,1.5,3] # just example values\nz_values = [0,1,2,3,4,4] # just example values\n\ntrace1 = go.Scatter3d(x = x_values,\n y = y_values,\n z = z_values,\n mode = 'lines',\n line = dict(\n color = 'red',\n width = 5\n )\n)\n\nlayout= go.Layout(scene=dict(aspectmode='cube'))\n\n# create Dash Cytoscape component\ncyto_comp = cyto.Cytoscape(\n id='dash-cyto',\n elements=[],\n stylesheet=[],\n layout={'name': 'preset'}\n)\n\n# display elements\napp.layout = dash.Div([\n dash.Div([\n trace1\n ], style={'width': '50%'}),\n cyto_comp\n ])\n\nif __name__ == '__main__':\n app.run_server(debug=True)", "prediction": "### Output:\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class using Python that represents a bank account with a balance.\n\n### Input:\n\n\n", "label": "class BankAccount:\n \n    def __init__(self, balance=0.0):\n        self.balance = balance\n \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self.balance", "prediction": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that prints the sum of the numbers in the given range.\n\n### Input:\nStart: 10 End: 19\n\n", "label": "# Initialize one variable to store result\nresult = 0\n\n# Use a loop to iterate through the given range\nfor num in range(10, 20):\n    result += num\n\n# Print the result\nprint(result)", "prediction": "### Output:\nThe sum of the numbers in the given range is 90."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to implement an iterator that iterates over a given array.\n\n### Input:\n[2, 5, 6, 8, 9]\n\n", "label": "def iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)", "prediction": "def iterate_array(arr):\n    for i in arr:\n        yield i\n\narr = [2,"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Mnist dataset in Python using Keras.\n\n### Input:\nNot applicable\n\n", "label": "import keras\nfrom keras import datasets\n\n(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()\n\ntrain_images = train_images.reshape((60000, 28, 28, 1))\ntrain_images = train_images.astype('float32') / 255\n\ntest_images = test_images.reshape((10000, 28, 28, 1))\ntest_images = test_images.astype('float32') / 255\n\ntrain_labels = keras.utils.to_categorical(train_labels)\ntest_labels = keras.utils.to_categorical(test_labels)", "prediction": "### Output:\nimport numpy as np\nimport pandas as pd\nfrom keras.datasets import mnist\nfrom"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python program to add a minimum value of 10 to each element in a list.\n\n### Input:\nlist = [1, 2, 3, 4]\n\n", "label": "list = [x + 10 for x in [1, 2, 3, 4]]", "prediction": "def modify_list(list):\n    for i in range(len(list)):\n        list[i] += 10"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to check if two sequences are identical.\n\n### Input:\n[1,2,3], [1,2,3]\n\n", "label": "def check_seq(seq1, seq2):\n    if len (seq1) != len (seq2): \n        return False\n    else: \n        for i in range(len (seq1)):\n            if seq1[i] != seq2[i]:\n                return False\n    return True", "prediction": "def check_identical(seq1, seq2):\n    if len(seq1) != len(seq2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to calculate the average of five given numbers.\n\n### Input:\n\n\n", "label": "def average(nums):\n total = 0\n for num in nums:\n  total+=num\n return total / len(nums)\n\nprint(average([1, 2, 3, 4, 5]))\n// Output: 3", "prediction": "def average():\n    numbers = [1, 2, 3, 4, 5"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to scrape a website for movie titles and ratings.\n\n### Input:\nNot applicable\n\n", "label": "import requests\nimport lxml.html as lh\n\nmovies_url = 'https://www.imdb.com/chart/top?ref_=nv_mv_250_6'\n\npage = requests.get(movies_url)\ndoc = lh.fromstring(page.content)\n\n# Get the list of movie elements\nmovie_elements = doc.xpath('//tr')\n\n# Store the titles and ratings\ntitles = []\nratings = []\nfor movie in movie_elements:\n title_cell = movie.xpath('./td[@class=\"titleColumn\"]//a')\n if title_cell:\n title = title_cell[0].text_content()\n titles.append(title)\n rating_cell = movie.xpath('./td[@class=\"ratingColumn imdbRating\"]//strong')\n if rating_cell:\n rating = rating_cell[0].text_content()\n ratings.append(rating)\n\n# Print the titles and ratings\nfor i in range(len(titles)):\n print(titles[i], '-', ratings[i])", "prediction": "### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef get_movie_titles(url"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class to define a complex number and an operator overloading function to add two complex numbers.\n\n### Input:\n\n\n", "label": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __add__(self, other):\n        return ComplexNumber(self.real + other.real, \n                    self.imaginary + other.imaginary)", "prediction": "class Complex:\n    def __init__(self, real, imaginary):\n        self.real = real\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web-service using the Flask python library that returns a \"Hello, world!\" message when accessed through a browser.\n\n### Input:\n\n\n", "label": "#Import the Flask library\nfrom flask import flask\n\n# Initialize the Flask app\napp = Flask(__name__)\n\n#Define the hello function\n@app.route('/')\ndef hello():\n    return \"Hello, world!\"\n\n# Have the Flask app listen on port 500\nif __name__ == '__main__':\n    app.run(port=500)", "prediction": "import flask\napp = flask.Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python program to explore and retrieve data from a dataset using Pandas.\n\n### Input:\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df)\n\n", "label": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\nprint(df.head())\nprint(df.info())\nprint(\"Average age of passengers:\", df['Age'].mean())\nprint(\"Number of female passengers:\", df[df['Sex'] == 'female'].shape[0])\nprint(\"Oldest passenger:\", df.loc[df['Age'].idxmax()])", "prediction": "# Modify the code to explore and retrieve data from the dataset using Pandas\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program with a class that has both private and public members.\n\n### Input:\n\n\n", "label": "class Foo:\n    def __init__(self, private_var, public_var):\n        # Private members\n        self.__private_var = private_var\n        # Public members\n        self.public_var = public_var\n        \n    # Private method\n    def __private_method(self):\n        return self.__private_var\n    \n    # Public method\n    def public_method(self):\n        return self.public_var", "prediction": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to insert a new element into a given list in the correct order\n\n### Input:\nInput List: [1, 2, 3, 4]\nElement: 0\n\n", "label": "def insert_element(array, element):\n    if element >= array[len(array)-1]:\n        array.append(element)\n    else:\n        for i in range(len(array)):\n            if element < array[i]:\n                array.insert(i, element)\n                break\n    return array", "prediction": "def insert_element(input_list, element):\n    input_list.append(element)\n    input_list.sort()\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect if a given docstring contains Tensorflow code.\n\n### Input:\n\"\"\"This is an example docstring.\n\nimport tensorflow as tf\n\nx = tf.constant(42)\ny = tf.constant(4)\n\ndef add():\n    return x + y\n\"\"\"\n\n", "label": "import re\n\ndef contains_tensorflow_code(docstring):\n    \"\"\"\n    Detects if the given docstring contains Tensorflow code\n    :param docstring: The docstring to check\n    :type docstring: string\n    \"\"\"\n    # check if there are any TensorFlow import statements\n    has_import_tf = False\n    lines = docstring.split('\\n')\n    for line in lines:\n        if re.search('^import\\s+tensorflow', line):\n            has_import_tf = True\n\n    # check for the presence of any TensorFlow related strings\n    has_tf_string = False\n    for line in lines:\n        if re.search('^tf.', line):\n            has_tf_string = True\n\n    return has_import_tf or has_tf_string", "prediction": "def detect_tensorflow_code(docstring):\n    import re\n    return bool(re.search(r'tensor"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class called \"ClassName\" that sets options for a WIGLE query using the Builders module. The required options are \"bssid\", \"user\", and \"pass\", which should be set to specific values. The \"startx\" method should initiate the query using the WigleAgent class and print the resulting latitude, longitude, and BSSID. It should also use the kml_builder class to build a KML file with the latitude, longitude, and BSSID, and print a message to check the output.\n\n### Input:\n\n\n", "label": "from Builders import wigile_query\nfrom Builders import kml_builder\n\n\nclass ClassName():\n      #These are the options we will set\n    def __init__(self):\n      # Descriptions that are required!!!\n      self.name = \"Registry Network info corelation\"\n      self.description = \"WIGLE Query your known BSSID\"\n      self.language = \"python\"\n      self.extension = \"py\"\n      self.rating = \"Excellent\"    \n        \n      # options we require user interaction for- format is {Option : [Value, Description]]}\n      self.required_options = {\"bssid\" : ['00:22:55:DF:C8:01', \"Set BSSID or MAC of AP\"],\n                               \"user\" : ['offtest', \"Set Username to WIGLE\"],\n                               \"pass\" : ['83128312', \"Set Password to WIGLE\"]}\n\n    def startx(self):\n      wa = wigile_query.WigleAgent(self.required_options[\"user\"][0], self.required_options[\"pass\"][0])\n      final = wa.get_lat_lng(self.required_options[\"bssid\"][0])\n      print final\n      kml = kml_builder.kml()\n      kml.build(final[\"lat\"], final[\"lng\"], final[\"bssid\"]) #Pass SSID name of network\n      print \"[*] Check output\"\n", "prediction": "```python\nfrom wigle import WigleAgent, WigleBuilder, WigleKmlBuilder"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list comprehension in Python to extract the last two elements of a given list.\n\n### Input:\n\n\n", "label": "last_two_elements = [x[-2:] for x in lst]", "prediction": "def last_two_elements(lst):\n    return [lst[-2], lst[-1]]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to delete all the elements from the list which have a value greater than a given number.\n\n### Input:\nlist = [1, 5, 6, 8, 9, 10], num = 7\n\n", "label": "def removeGreaterNum(list, num): \n  \n    return [x for x in list if x < num] \n      \nlist = [1, 5, 6, 8, 9, 10] \nnum = 7\nprint(removeGreaterNum(list, num))", "prediction": "def delete_greater_than(list, num):\n    return [x for x in list if x <= num"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIs it possible to create a Python program that converts a given string to a different case?\n\n### Input:\n\n\n", "label": "def convert_string_case(string):\n    new_string = string.swapcase()\n    return new_string\n\nstring = \"this Is A TeST\"\nnew_string = convert_string_case(string)\nprint(new_string)", "prediction": "def convert_case(string):\n    \"\"\"Converts a given string to a different case.\"\"\"\n    return string"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find out the Armstrong number in a given range.\n\n### Input:\n\n\n", "label": "def is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers", "prediction": "def armstrong(n):\n    sum = 0\n    temp = n\n    while temp >"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the pyramid pattern.\n\n### Input:\nN = 5\n\n", "label": "# Function to print the pyramid pattern\ndef print_pyramid(n):\n    k = 2*n - 2\n \n    # outer loop to print rows\n    for i in range(0, n):\n      \n        # inner loop to print columns\n        for j in range(0, k):\n            print(end=\" \")\n      \n        # decrementing k after each loop\n        k = k - 1\n     \n        # inner loop to print foo pattern\n        for j in range(0, i+1):       \n            print(\"* \", end=\"\")\n        print(\"\\r\")\n\n# Driver Code\nn = 5\nprint_pyramid(n)", "prediction": "### Output:\n    *\n   ***\n  *****\n *******\n*********"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find the closest value to a given number in a given array.\n\n### Input:\n[5, 4, 8, 7], 5\n\n", "label": "def closest_num(arr, num):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n \n    if arr[right] <= num:\n        return arr[right]\n    elif arr[left] >= num:\n        return arr[left]\n    while right-left > 1:\n        mid = (right+left)//2\n        if arr[mid] == num:\n            return arr[mid]\n        elif arr[mid] > num:\n            right = mid\n        else:\n            left = mid\n    return sorted([arr[right], arr[left]])[0]\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest = closest_num(arr, num)\nprint(closest)", "prediction": "def closest_value(arr, target):\n    return min(arr, key=lambda x: abs(x - target"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the absolute difference between two given numbers.\n\n### Input:\n\n\n", "label": "def absolute_difference(num1, num2):\n return abs(num1 - num2)", "prediction": "def absolute_difference(a, b):\n    return abs(a - b)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to construct a parser to detect an input has errors or not.\n\n### Input:\nInput Code:\n# include <stdio.h>\nvoid main()\n {\n printf(\"Hello World\")\n }\n\n", "label": "def detect_errors(input_code):\n error_tokens = [\"!\", \"@\", \"#\", \"$\"]\n counter = 0\n for line in input_code.splitlines():\n tokens = line.strip().split()\n if any(x in tokens for x in error_tokens):\n counter += 1\n if counter > 0:\n return True\n else:\n return False", "prediction": "def main():\nprint(\"Hello World\")\n\ndef main():\nprint(\"Hello World\")\n\ndef main():\nprint"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of the binomial coefficients for a given value of \"n\" using a Python function.\n\n### Input:\n\n\n", "label": "def binomial_coefficient(n):\n  coefficient = []\n  for k in range(n+1):\n    coefficient.append(int(math.factorial(n) / \n                        (math.factorial(k) * math.factorial(n - k))))\n  return coefficient", "prediction": "def binomial_coefficients(n):\n    \"\"\"Return a list of the binomial coefficients for a given"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Python script below to generate a random sequence of 0s and 1s.\n\n### Input:\nimport random\n\ndef generate_sequence(length):\n return [random.randint(0, 1) for _ in range(length)]\n\n", "label": "def is_balanced(sequence):\n count = {0: 0, 1: 0}\n for bit in sequence:\n count[bit] += 1\n \n return count[0] == count[1]\n \nsequence = generate_sequence(20)\nbalanced = is_balanced(sequence)\n\nprint(\"Sequence:\", sequence)\nprint(\"Balanced:\", balanced)", "prediction": "sequence = generate_sequence(10)\nprint(sequence)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of strings in Python based on the following conditions:\n\n### Input:\nInput array: [\"Apple\", \"Orange\", \"Pear\", \"Watermelon\"]\nCondition: Return a list of strings that contains elements in the input array that start with \"P\".\n\n", "label": "[\u201dPear\u201d, \u201dWatermelon\u201d]", "prediction": "### Output:\n[\"Pear\", \"Watermelon\"]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to remove all duplicates from a given list\n\n### Input:\n[1,2,3,4,4,4,5]\n\n", "label": "def remove_duplicates(input_list):\n    output_list = []\n    for i in input_list:\n        if i not in output_list:\n            output_list.append(i)\n    return output_list\n\nresult = remove_duplicates([1, 2, 3, 4, 4, 4, 5])\nprint(result)", "prediction": "def remove_duplicates(my_list):\n    return list(set(my_list))\n\nprint(remove_duplicates([1,2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a prediction model, in Python code, to identify whether a given sentence is positive or negative.\n\n### Input:\nsentences = [\"I am good\", \"It's terrible\", \"What a wonderful day!\"]\n\n", "label": "def predict_sentiment(sentences):\n    tokenizer = Tokenizer()\n    tokenizer.fit_on_texts(sentences)\n    x_train = tokenizer.texts_to_matrix(sentences)\n    model = Sequential()\n    model.add(Dense(32, input_shape=(x_train.shape[1],), activation=\"relu\"))\n    model.add(Dense(32, activation=\"relu\"))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    model.compile(loss=\"binary_crossentropy\",\n                  optimizer=\"rmsprop\",\n                  metrics=[\"accuracy\"])\n    model.fit(x_train, [1, 0, 1], epochs=10, batch_size=32)\n    \n    predictions = model.predict([x_train[0],x_train[1],x_train[2]])\n    print(predictions)\n    if predictions[0] > 0.5:\n        print(\"The sentence 'I am good' is positive\") \n    else:\n        print(\"The sentence 'I am good' is negative\") \n    if predictions[1] > 0.5:\n        print(\"The sentence 'It's terrible' is positive\") \n    else:\n        print(\"The sentence 'It's terrible' is negative\") \n    if predictions[2] > 0.5:\n        print(\"The sentence 'What a wonderful day!' is positive\") \n    else:\n        print(\"The sentence 'What a wonderful day!' is negative\")", "prediction": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_b"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python generator that generates the odd numbers between 0 and given n.\n\n### Input:\nn = 10\n\n", "label": "def oddNumbers(n):\n    for i in range(0, n + 1):\n        if i % 2 != 0:\n            yield i\n\nn = 10\nfor num in oddNumbers(n):\n    print(num)", "prediction": "def odd_numbers(n):\n    for i in range(1, n, 2):\n        yield"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Node.js script for returning the longest string in an array.\n\n### Input:\n[\"javascript\", \"ruby\", \"python\", \"java\"]\n\n", "label": "const arr = [\"javascript\", \"ruby\", \"python\", \"java\"];\n\nconst longestString = (arr) => {\n let longest = arr[0];\n for (let i = 1; i < arr.length; i++) {\n if (arr[i].length > longest.length) {\n longest = arr[i];\n }\n }\n return longest;\n};\n\nconst longestStr = longestString(arr);\n\nconsole.log(longestStr); // Output: \"javascript\"", "prediction": "### Output:\n\"javascript\""}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and code an entry-level language interpreter in Python.\n\n### Input:\n\n\n", "label": "class Interpreter:\n \n    def __init__(self):\n        self.opeartors = {\n            '+':   self.add,\n            '-':   self.sub,\n            '/':   self.div,\n            '*':   self.mul,\n        }\n \n    def parse(self, text):\n        expressions = text.split(' ')\n        return expressions\n \n    def evaluate(self, expressions):\n        operator = self.opeartors.get(expressions[1])\n        if not operator:\n            raise Exception('Invalid operator')\n        return operator(expressions[0], expressions[2])\n \n    def add(self, a, b):\n        return int(a) + int(b)\n \n    def sub(self, a, b):\n        return int(a) - int(b)\n \n    def div(self, a, b):\n        return int(a) / int(b)\n \n    def mul(self, a, b):\n        return int(a) * int(b)", "prediction": "def interpret(code):\n    if code == \"print\":\n        print(\"Hello, World!\")\n    elif"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines classes for displaying media widgets such as images, videos, and audios. To use these classes, import the necessary modules and create an instance of the desired widget. The `value` attribute of the widget accepts a byte string of the raw media data you want to display. You can also create a widget from a local file or a URL using the provided methods. The `format` attribute specifies the format of the media data, and other attributes such as `width`, `height`, `autoplay`, `loop`, and `controls` can be used to customize the widget's behavior.\n\n### Input:\n\n\n", "label": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport mimetypes\n\nfrom .widget_core import CoreWidget\nfrom .domwidget import DOMWidget\nfrom .valuewidget import ValueWidget\nfrom .widget import register\nfrom traitlets import Unicode, CUnicode, Bool\nfrom .trait_types import CByteMemoryView\n\n\n@register\nclass _Media(DOMWidget, ValueWidget, CoreWidget):\n    \"\"\"Base class for Image, Audio and Video widgets.\n\n    The `value` of this widget accepts a byte string.  The byte string is the\n    raw data that you want the browser to display.\n\n    If you pass `\"url\"` to the `\"format\"` trait, `value` will be interpreted\n    as a URL as bytes encoded in UTF-8.\n    \"\"\"\n\n    # Define the custom state properties to sync with the front-end\n    value = CByteMemoryView(help=\"The media data as a memory view of bytes.\").tag(sync=True)\n\n    @classmethod\n    def _from_file(cls, tag, filename, **kwargs):\n        \"\"\"\n        Create an :class:`Media` from a local file.\n\n        Parameters\n        ----------\n        filename: str\n            The location of a file to read into the value from disk.\n\n        **kwargs:\n            The keyword arguments for `Media`\n\n        Returns an `Media` with the value set from the filename.\n        \"\"\"\n        value = cls._load_file_value(filename)\n\n        if 'format' not in kwargs:\n            format = cls._guess_format(tag, filename)\n            if format is not None:\n                kwargs['format'] = format\n\n        return cls(value=value, **kwargs)\n\n    @classmethod\n    def from_url(cls, url, **kwargs):\n        \"\"\"\n        Create an :class:`Media` from a URL.\n\n        :code:`Media.from_url(url)` is equivalent to:\n\n        .. code-block: python\n\n            med = Media(value=url, format='url')\n\n        But both unicode and bytes arguments are allowed for ``url``.\n\n        Parameters\n        ----------\n        url: [str, bytes]\n            The location of a URL to load.\n        \"\"\"\n        if isinstance(url, str):\n            # If str, it needs to be encoded to bytes\n            url = url.encode('utf-8')\n\n        return cls(value=url, format='url', **kwargs)\n\n    def set_value_from_file(self, filename):\n        \"\"\"\n        Convenience method for reading a file into `value`.\n\n        Parameters\n        ----------\n        filename: str\n            The location of a file to read into value from disk.\n        \"\"\"\n        value = self._load_file_value(filename)\n\n        self.value = value\n\n    @classmethod\n    def _load_file_value(cls, filename):\n        if getattr(filename, 'read', None) is not None:\n            return filename.read()\n        else:\n            with open(filename, 'rb') as f:\n                return f.read()\n\n    @classmethod\n    def _guess_format(cls, tag, filename):\n        # file objects may have a .name parameter\n        name = getattr(filename, 'name', None)\n        name = name or filename\n\n        try:\n            mtype, _ = mimetypes.guess_type(name)\n            if not mtype.startswith('{}/'.format(tag)):\n                return None\n\n            return mtype[len('{}/'.format(tag)):]\n        except Exception:\n            return None\n\n    def _get_repr(self, cls):\n        # Truncate the value in the repr, since it will\n        # typically be very, very large.\n        class_name = self.__class__.__name__\n\n        # Return value first like a ValueWidget\n        signature = []\n\n        sig_value = 'value={!r}'.format(self.value[:40].tobytes())\n        if self.value.nbytes > 40:\n            sig_value = sig_value[:-1]+\"...\"+sig_value[-1]\n        signature.append(sig_value)\n\n        for key in super(cls, self)._repr_keys():\n            if key == 'value':\n                continue\n            value = str(getattr(self, key))\n            signature.append('{}={!r}'.format(key, value))\n        signature = ', '.join(signature)\n        return '{}({})'.format(class_name, signature)\n\n\n@register\nclass Image(_Media):\n    \"\"\"Displays an image as a widget.\n\n    The `value` of this widget accepts a byte string.  The byte string is the\n    raw image data that you want the browser to display.  You can explicitly\n    define the format of the byte string using the `format` trait (which\n    defaults to \"png\").\n\n    If you pass `\"url\"` to the `\"format\"` trait, `value` will be interpreted\n    as a URL as bytes encoded in UTF-8.\n    \"\"\"\n    _view_name = Unicode('ImageView').tag(sync=True)\n    _model_name = Unicode('ImageModel').tag(sync=True)\n\n    # Define the custom state properties to sync with the front-end\n    format = Unicode('png', help=\"The format of the image.\").tag(sync=True)\n    width = CUnicode(help=\"Width of the image in pixels. Use layout.width \"\n                          \"for styling the widget.\").tag(sync=True)\n    height = CUnicode(help=\"Height of the image in pixels. Use layout.height \"\n                           \"for styling the widget.\").tag(sync=True)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    @classmethod\n    def from_file(cls, filename, **kwargs):\n        return cls._from_file('image', filename, **kwargs)\n\n    def __repr__(self):\n        return self._get_repr(Image)\n\n\n@register\nclass Video(_Media):\n    \"\"\"Displays a video as a widget.\n\n    The `value` of this widget accepts a byte string.  The byte string is the\n    raw video data that you want the browser to display.  You can explicitly\n    define the format of the byte string using the `format` trait (which\n    defaults to \"mp4\").\n\n    If you pass `\"url\"` to the `\"format\"` trait, `value` will be interpreted\n    as a URL as bytes encoded in UTF-8.\n    \"\"\"\n    _view_name = Unicode('VideoView').tag(sync=True)\n    _model_name = Unicode('VideoModel').tag(sync=True)\n\n    # Define the custom state properties to sync with the front-end\n    format = Unicode('mp4', help=\"The format of the video.\").tag(sync=True)\n    width = CUnicode(help=\"Width of the video in pixels.\").tag(sync=True)\n    height = CUnicode(help=\"Height of the video in pixels.\").tag(sync=True)\n    autoplay = Bool(True, help=\"When true, the video starts when it's displayed\").tag(sync=True)\n    loop = Bool(True, help=\"When true, the video will start from the beginning after finishing\").tag(sync=True)\n    controls = Bool(True, help=\"Specifies that video controls should be displayed (such as a play/pause button etc)\").tag(sync=True)\n\n    @classmethod\n    def from_file(cls, filename, **kwargs):\n        return cls._from_file('video', filename, **kwargs)\n\n    def __repr__(self):\n        return self._get_repr(Video)\n\n\n@register\nclass Audio(_Media):\n    \"\"\"Displays a audio as a widget.\n\n    The `value` of this widget accepts a byte string.  The byte string is the\n    raw audio data that you want the browser to display.  You can explicitly\n    define the format of the byte string using the `format` trait (which\n    defaults to \"mp3\").\n\n    If you pass `\"url\"` to the `\"format\"` trait, `value` will be interpreted\n    as a URL as bytes encoded in UTF-8.\n    \"\"\"\n    _view_name = Unicode('AudioView').tag(sync=True)\n    _model_name = Unicode('AudioModel').tag(sync=True)\n\n    # Define the custom state properties to sync with the front-end\n    format = Unicode('mp3', help=\"The format of the audio.\").tag(sync=True)\n    autoplay = Bool(True, help=\"When true, the audio starts when it's displayed\").tag(sync=True)\n    loop = Bool(True, help=\"When true, the audio will start from the beginning after finishing\").tag(sync=True)\n    controls = Bool(True, help=\"Specifies that audio controls should be displayed (such as a play/pause button etc)\").tag(sync=True)\n\n    @classmethod\n    def from_file(cls, filename, **kwargs):\n        return cls._from_file('audio', filename, **kwargs)\n\n    def __repr__(self):\n        return self._get_repr(Audio)\n", "prediction": "```python\nfrom media import Image, Video, Audio\n\n# Create an image widget from a byte"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if a given array of numbers is in ascending order.\n\n### Input:\n[3, 5, 7, 9, 16, 19]\n\n", "label": "def isSorted(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(isSorted([3, 5, 7, 9, 16, 19]))", "prediction": "def is_in_ascending_order(arr):\n    for i in range(len(arr) - 1):\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnhance the following Python code for saving a webpage to a local directory.\n\n### Input:\nimport urllib.request\n\ndef save_webpage(url, path):\n urllib.request.urlretrieve(url, path)\n\n", "label": "import urllib.request\nfrom urllib.parse import urlparse\nimport os\n\ndef save_webpage(url, path):\n parsed_url = urlparse(url)\n path = os.path.join(path, parsed_url.netloc + parsed_url.path)\n if not os.path.exists(os.path.dirname(path)):\n os.makedirs(os.path.dirname(path))\n urllib.request.urlretrieve(url, path)", "prediction": "save_webpage(\"https://www.python.org\", \"python.html\")"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this python code to remove all even numbers from a given list.\n\n### Input:\nmy_list = [1,2,3,4,5,6,7,8,9,10]\n\n", "label": "\"\"\"\nEdit this python code to remove all even numbers from a given list.\n\"\"\"\n\nmy_list = [1,2,3,4,5,6,7,8,9,10]\n\n# Use a list comprehension to remove even numbers\nmy_list = [i for i in my_list if i % 2 != 0]\n \nprint(my_list) # [1, 3, 5, 7, 9]", "prediction": "def remove_even_numbers(my_list):\n    new_list = []\n    for num in my_list:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that returns the surface area of a sphere when given the sphere\u2019s radius as input.\n\n### Input:\nradius = 6\n\n", "label": "import math\n\ndef sphere_surface_area(radius):\n surface_area = 4 * math.pi * radius * radius\n return surface_area \n\n# Test\nradius = 6\nprint(sphere_surface_area(radius)) # 452.38934211", "prediction": "def sphere_area(radius):\n    return 4 * 3.14 * radius ** 2\n\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to check if a given value is an alphabet or not.\n\n### Input:\n\n\n", "label": "\"\"\"\nDesign a Python script to check if a given value is an alphabet or not \n\"\"\"\n\n# function to check if the given value is an alphabet or not\ndef is_alphabet(value):\n    # check if the value is empty\n    if value == '':\n        return False\n\n    # check if the given value is an alphabet\n    if value.isalpha():\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    value = input('Enter a value: ')\n    print(is_alphabet(value))", "prediction": "def is_alphabet(value):\n    if value.isalpha():\n        return True\n    else:\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to print the current time in the format `hh:mm:ss`.\n\n### Input:\n\n\n", "label": "# Import datetime module\nimport datetime\n\n# Get the current time\nnow = datetime.datetime.now()\n\n# Print the current time in the format hh:mm:ss\nprint(now.strftime(\"%H:%M:%S\"))", "prediction": "```python\nimport datetime\nprint(datetime.datetime.now().strftime(\"%H:%M:%S\"))\n```"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that can print the first 5 prime numbers.\n\n### Input:\n\n\n", "label": "def print_first_five_primes():\n    prime_numbers = [2, 3, 5, 7, 11]\n    for prime in prime_numbers:\n        print(prime)", "prediction": "def print_prime_numbers():\n    prime_numbers = []\n    for i in range(2, 100"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print the numbers from 1 to 10 using a for loop.\n\n### Input:\nNot applicable\n\n", "label": "for i in range(1,11):\n    print(i)", "prediction": "### Output:\nfor i in range(1, 11):\n    print(i)"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic chatbot using TensorFlow and Python that can answer some basic questions about a particular company.\n\n### Input:\nCompany: Apple\n\n", "label": "def answer_question(question, company):\n if company == 'Apple':\n if question == 'What is Apple's mission statement?':\n return \"Apple's mission statement is 'to make the world's best products that enrich people's lives and empower them to do more.\"\n elif question == 'How many stores does Apple have?':\n return 'Apple currently has 511 stores in 25 countries across the globe.'", "prediction": "Question: What is the company's mission statement?\n\nAnswer: \"Apple's mission is to bring the"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that implements functions for classes and objects.\n\n### Input:\n\n\n", "label": "# Python module for classes and objects\n\n\nclass MyClass:\n    \"\"\"A basic example to demonstrate classes and objects\"\"\"\n\n    # Class attributes\n    color = 'red'\n    shape = 'circle'\n\n    # Initializer\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Methods\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n\n# Create an object\nobj = MyClass(radius = 15)\n\n# Access object attributes\nprint(\"The color of the object is:\", obj.color)\nprint(\"The shape of the object is:\", obj.shape)\n\n# Access object methods\nprint(\"The area of the object is:\", obj.area())", "prediction": "def create_class(name, attributes):\n    \"\"\"Create a class with the given name and attributes.\"\"\"\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose an editor program, in Python code, to remove all the duplicate words from a given sentence.\n\n### Input:\nsentence = \"This is a a random sentence with with repeated words\"\n\n", "label": "def remove_duplicates(sentence): \n    words = sentence.split() \n    words_without_duplicates = [] \n    for i in words: \n        if i not in words_without_duplicates: \n            words_without_duplicates.append(i) \n  \n    return \" \".join(words_without_duplicates)", "prediction": "def remove_duplicate_words(sentence):\n    words = sentence.split()\n    unique_words = []\n    for word"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest string in a list of strings.\n\n### Input:\n[\"Hello\", \"Hi\", \"What's up\", \"Hey\", \"Good morning\"]\n\n", "label": "longest_string = \"\"\nfor string in string_list:\n    if len(string) > len(longest_string):\n        longest_string = string\n\nprint(longest_string)", "prediction": "### Output:\nWhat's up"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that processes a sentence and classifies it as positive or negative.\n\n### Input:\nThe food was really bad.\n\n", "label": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"The food was really bad.\"\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\nscore = sentiment_analyzer.polarity_scores(sentence)\n\nif score['compound'] > 0:\n sentiment = 'positive'\nelif score['compound'] < 0:\n sentiment = 'negative'\n\nprint(f'The sentence is {sentiment}.')", "prediction": "### Output:\nThe food was really bad."}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that accepts an integer greater than 1 as input and prints out all prime numbers up to the given number.\n\n### Input:\nNumber = 10\n\n", "label": "def is_prime(num):\n    prime = True\n    if num <= 1:\n        prime = False\n    else: \n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n    return prime\n\ndef main():\n    num = 10\n    print(\"All prime numbers up to\", num, \"are:\")\n    for i in range(2, num+1):\n        if is_prime(i):\n            print(i)\n\nmain()\n\n# Outputs: 2 3 5 7", "prediction": "### Output:\n2\n3\n5\n7"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a random password of length 10 with at least one uppercase letter, one lowercase letter, one digit and one special symbol.\n\n### Input:\n\n\n", "label": "import string\nimport random\n \nlength = 10\nuppercase_letters = list(string.ascii_uppercase)\nlowercase_letters = list(string.ascii_lowercase) \ndigits = list(string.digits)   \nspecial_characters = list(string.punctuation)\n \nall_chars = uppercase_letters + lowercase_letters + digits + special_characters\nrandom_password = random.sample(all_chars, length)\n\nprint(''.join(random_password))", "prediction": "import random\nimport string\n\ndef generate_password(length):\n    password = []\n    for i in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for sorting a list of items alphabetically.\n\n### Input:\nitems = [\"Apple\", \"Banana\", \"Cherry\", \"Avocado\"]\n\n", "label": "def sort_items(items):\n  items.sort()\n  return items\n\nprint(sort_items(items))\n\n# Output\n['Apple', 'Avocado', 'Banana', 'Cherry']", "prediction": "def sort_list(items):\n    return sorted(items)\n\nsorted_items = sort_list(items)\nprint(sorted_items"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to get the index of a particular word in a given sentence\n\n### Input:\nsentence=\"Python is a programming language.\"; word=\"language\"\n\n", "label": "def index_of_word(sentence, word):\n    words = sentence.split()\n    for index, value in enumerate(words):\n        if value == word:\n            return index\n    return -1\n\nsentence = \"Python is a programming language.\"\nword = \"language\"\nprint(index_of_word(sentence, word))", "prediction": "def get_index(sentence, word):\n    return sentence.index(word)\n\nprint(get_index(sentence, word))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script which takes in a sentence and prints the 2nd and 5th words.\n\n### Input:\nThe quick brown fox jumped over the lazy dog\n\n", "label": "sentence = \"The quick brown fox jumped over the lazy dog\" \nwords = sentence.split(' ') \n  \n# 2nd and 5th words \nprint(words[1] + \" \" + words[4])", "prediction": "### Output:\nquick dog"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a Python program to support multiple versions of Python 3.\n\n### Input:\n# Example Python 3 program for finding the area of a circle \nPI = 3.14\ndef calculateArea(radius): \n    return PI * radius * radius; \n\nprint(\"Area is %.6f\" % calculateArea(5));\n\n", "label": "# Example Python program for finding the area of a circle \n# Adjust for compatibility with Python3 and above \nimport sys \n\nPI = 3.14\n\nif sys.version_info.major >= 3:\n  long = int \n\ndef calculateArea(radius): \n    return PI * radius * radius; \n  \nprint(\"Area is %.6f\" % calculateArea(long(5)));", "prediction": "# Example Python 3 program for finding the area of a circle \nPI = 3.14"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that performs a search in a binary tree and returns the path from the root node to the node containing the search query.\n\n### Input:\nNot applicable\n\n", "label": "class Node:\n def __init__(self, val):\n  self.left = None\n  self.right = None\n  self.val = val\n\ndef search_path(root, key):\n path = []\n path = _search_path(root, key, path)\n return path\n\ndef _search_path(node, key, path):\n if node is None:\n  return None\n path.append(node.val)\n\n if node.val == key:\n  return path\n\n left_search = _search_path(node.left, key, path)\n if left_search is not None:\n  return left_search\n\n right_search = _search_path(node.right, key, path)\n if right_search is not None:\n  return right_search\n\n path.pop()\n return None", "prediction": "### Output:\ndef search(self, query):\n    if self.root is None:\n        return None\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.\n\n### Input:\n\n\n", "label": "my_dict ={}\nfor num in range(1, 16):\n    my_dict[num] = num*num\n\nprint(my_dict)", "prediction": "def square_dict():\n    d = {}\n    for i in range(1, 16):\n       "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API in Python to fetch location information using geopoints.\n\n### Input:\n\n\n", "label": "# Import relevant modules\nimport requests\nimport json\n\n# Url for API\nURL = \"https://api.example.com/geocode\"\n\n# Create function to fetche location information\ndef get_location_info(lat, lon):\n    PARAMS = {'lat': lat, 'lon': lon}\n    response = requests.get(url=URL, params=PARAMS)\n    output = json.loads(response.text)\n    return output\n\n# Call the function\nlocation_info = get_location_info(lat, lon)", "prediction": "def get_location(latitude, longitude):\n    url = f\"https://maps.googleapis.com/maps/api/geocode"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that checks if a string is a palindrome.\n\n### Input:\n\n\n", "label": "def isPalindrome(string): \n    l = \"\".join(re.findall(\"[a-zA-z]+\", string)).lower() \n    return l == l[::-1]", "prediction": "def is_palindrome(string):\n    return string == string[::-1]"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a graphing program using the tkinter library in Python.\n\n### Input:\n\n\n", "label": "import tkinter as tk\n\n# create the main GUI window\nwindow = tk.Tk()\nwindow.title(\"Python Graphing Program\")\nwindow.geometry(\"500x500\")\n\n# create a Canvas object\nc = tk.Canvas(window, width=480, height=480)\nc.pack()\n\n# create the X and Y axes\nc.create_line(10, 240, 470, 240)\nc.create_line(240, 10, 240, 470)\n\n# create the graph\n...", "prediction": "import tkinter as tk\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a random password with a combination of lowercase, uppercase and numeric characters containing 8-10 characters.\n\n### Input:\nNot applicable\n\n", "label": "import random\nimport string\n\ndef generate_password():\n  length = random.randrange(8, 11)\n  password = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))\n  return password\n\nif __name__ == '__main__':\n  password = generate_password()\n  print('Generated Password:', password)", "prediction": "### Output:\nimport random\nimport string\ndef generate_password(length):\n    password = ''.join(random"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get a list of strings from a given string.\n\n### Input:\nstring = \"The quick brown fox jumped over the lazy dog\"\n\n", "label": "def get_words_from_string(string):\n    \"\"\"This function will return a list of words from the given string.\"\"\"\n    words = string.split()\n    return words\n\nstring = \"The quick brown fox jumped over the lazy dog\"\nwords_list = get_words_from_string(string)\nprint(words_list)\n\n# Output:\n# ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']", "prediction": "def split_string(string):\n    return string.split()\n\nprint(split_string(string))"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert an array from the cartesian to the polar coordinate system.\n\n### Input:\n[1, 2]\n\n", "label": "def cartesian_to_polar(arr):\n    x = arr[0]\n    y = arr[1]\n \n    radius = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n \n    return [radius, theta]\n    \narr = [1, 2]\nresult = cartesian_to_polar(arr)\nprint(result)", "prediction": "def cartesian_to_polar(x, y):\n    r = (x**2 + y**2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to create a bot that answers questions about a product.\n\n### Input:\n\n\n", "label": "import nltk\nimport random\n\ndef generate_answers(question):\n    # Use NLTK to process and tokenize the question\n    tokens = nltk.word_tokenize(question)\n\n    # Generate a preliminary answer\n    answer = \"I'm sorry I don't understand the question.\"\n\n    # Use keyword matching to generate a more accurate answer\n    keywords = ['product']\n\n    for token in tokens:\n        if token in keywords:\n            answer = 'This product is great and extremely versatile!'\n\n    return answer\n\n# Main Program\nwhile True:\n    question = input(\"What would you like to know about the product? : \")\n    answer = generate_answers(question)\n    print(answer)", "prediction": "def ask_question(question):\n    \"\"\"Asks a question and returns the answer.\"\"\"\n    answer = input"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which can be used to store data about books.\n\n### Input:\n\n\n", "label": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return '{} by {} ({} pages)'.format(self.title, self.author, self.pages)", "prediction": "class Book:\n    def __init__(self, title, author, year):\n        self.title ="}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to display a Pandas dataframe sorted by its index in descending order.\n\n### Input:\n\n\n", "label": "import pandas as pd\n \n# Create a dataframe\ndataframe = pd.DataFrame(data={'Value': [1, 2, 3, 4, 5]}, index=[5, 4, 3, 2, 1])\n\n# Print the dataframe sorted by its index in descending order\nprint(dataframe.sort_index(ascending=False))", "prediction": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for calculating the area of a circle with radius r.\n\n### Input:\n\n\n", "label": "def calculate_area_circle(r):\n    PI = 3.1415\n    area = PI * r**2\n    return area", "prediction": "def area_of_circle(r):\n    return 3.14 * r ** 2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print all the prime numbers between 0 and 100.\n\n### Input:\nNot applicable\n\n", "label": "def print_prime_numbers():\n for num in range(0, 101):\n if num > 1:\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n print(num)\n\nprint_prime_numbers()", "prediction": "def prime_numbers():\n    for i in range(2, 101):\n        for j in range"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPython program to generate a tree like structure.\n\n### Input:\n\n\n", "label": "def generate_tree(h): \n    # h is the height of the tree\n    # Initialize the number of spaces per line \n    n_spaces = h - 1\n  \n    # Generate the tree structure \n    for i in range(1, h+1): \n        # Print h-i spaces at the beginning of each line \n        for j in range(n_spaces): \n            print(end=\" \") \n              \n        # Print i stars at the end of each line \n        for j in range(i): \n            print(\"* \", end=\"\") \n              \n        # Move to the next line (Print a newline character) \n        print() \n          \n        # Update the number of spaces used \n        n_spaces -= 1", "prediction": "def tree(n):\n    if n == 0:\n        return\n    print(\"*\" * n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to sort an array of strings alphabetically.\n\n### Input:\n\n\n", "label": "def sort_strings_alphabetically(arr):\n    arr.sort(key=str.lower)\n    return arr", "prediction": "def sort_strings(strings):\n    return sorted(strings)\n"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Caesar cipher.\n\n### Input:\n\n\n", "label": "def encrypt(plain_text, shift): \n cipher_text = \"\" \n for char in plain_text: \n     if char.isalpha(): \n         char_code = ord(char) \n         char_code += shift \n         if char.isupper():\n             if char_code > ord('Z'): \n                 char_code -= 26 \n             elif char_code < ord('A'): \n                 char_code += 26 \n         elif char.islower(): \n             if char_code > ord('z'): \n                 char_code -= 26 \n             elif char_code < ord('a'): \n                 char_code += 26 \n         cipher_text += chr(char_code) \n     else: \n         cipher_text += char\n return cipher_text", "prediction": "def caesar_cipher(string, shift):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n   "}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictonary in Python with 5 key value pairs.\n\n### Input:\nNot applicable\n\n", "label": "myDict = {\n 'name': 'John',\n 'age': 25,\n 'height': 6.1,\n 'city': 'New York',\n 'job': 'Developer'\n}", "prediction": "### Output:\nNot applicable\n\n### Explanation:\nNot applicable"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if two strings are anagrams of each other.\n\n### Input:\n\n\n", "label": "def is_anagram(str1, str2): \n    # Create lists of characters in each string\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # Compare the two lists \n    if list1 == list2:\n        return True\n    else:\n        return False", "prediction": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python List into a Dictionary.\n\n### Input:\nlst = [[1, 2], [3, 4], [5, 6]]\n\n", "label": "dict_data = { lst[i][0] : lst[i][1] for i in range(len(lst)) }\n \nprint(dict_data)", "prediction": "### Output:\n{1: 2, 3: 4, 5: 6"}
{"input": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the area of a triangle given its three points in Python.\n\n### Input:\nPoint1(1, 4) Point2(5, 4) Point3(3, 2)\n\n", "label": "def triangle_area(Point1, Point2, Point3):\n    #Calculate the area of the triangle\n    x1, y1 = Point1\n    x2, y2 = Point2\n    x3, y3 = Point3\n    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\n    return area\n\nPoint1 = (1, 4)\nPoint2 = (5, 4)\nPoint3 = (3, 2)\n\narea = triangle_area(Point1, Point2, Point3)\nprint(f\"Area of the triangle: {area}units\")", "prediction": "### Output:\nThe area of the triangle is 2.0."}
